{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Viewer"
    },
    "configAlternates": {
        "designer|userClassName": "string"
    },
    "name": "MyController",
    "designerId": "daa6e88c-3a0f-42ce-a915-2aada82f7acc",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "autoFilesizeFormat",
                "implHandler": [
                    "  var i = Math.floor( Math.log(value) / Math.log(1024) );",
                    "  return ( value / Math.pow(1024, i) ).toFixed(2) * 1 + ' ' + ['B', 'KB', 'MB', 'GB', 'TB'][i];"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "autoFilesizeFormat",
            "designerId": "063157fd-6a2b-4d5b-88ba-dc381b842ad1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|commentHeader": [
                    "The window when click an image in viewer"
                ],
                "designer|params": [
                    "elements"
                ],
                "fn": "viewAttachedFile",
                "implHandler": [
                    "var elInfos = [];",
                    "Ext.Array.each(elements, function(entry, index){",
                    "    var el = Ext.get(entry);",
                    "    var obj = {};",
                    "    obj.oPath = entry.getAttribute('viewSrc');",
                    "    obj.dPath = entry.getAttribute('downSrc');",
                    "    obj.tPath = entry.getAttribute('thumbSrc');",
                    "    obj.filename = entry.getAttribute('filename');",
                    "    obj.filesize = entry.getAttribute('filesize');",
                    "    obj.pixels = entry.getAttribute('pixels');",
                    "    obj.resol = entry.getAttribute('resolution');",
                    "    obj.ext = obj.filename.slice(obj.filename.length - 3, obj.filename.length);",
                    "    obj.isImage = false;",
                    "    obj.isTooBig = false;",
                    "    elInfos.push(obj);",
                    "    el.on('click', function(e){",
                    "        //do not show when click data in dataset field",
                    "        if(el.getAttribute('field') == 'dataset' && Ext.getCmp('viewPanel').down('#viewer').getEditable()){",
                    "            return;",
                    "        }",
                    "",
                    "        var index = elements.indexOf(e.currentTarget);",
                    "        var oPath = \"\";",
                    "        var dPath = \"\";",
                    "        var tPath = \"\";",
                    "        var filename = \"\";",
                    "        var filesize = \"\";",
                    "        var pixels = \"\";",
                    "        var resol = \"\";",
                    "        var ext = \"\";",
                    "        var isImage = false;",
                    "        var isTooBig = false;",
                    "        var isMS =false;",
                    "        var thumbHeight = 0;",
                    "        var changeFileInfo = function(index){",
                    "            oPath = elInfos[index].oPath;",
                    "            dPath = elInfos[index].dPath;",
                    "            tPath = elInfos[index].tPath;",
                    "            filename = elInfos[index].filename;",
                    "            filesize = elInfos[index].filesize;",
                    "            pixels = elInfos[index].pixels;",
                    "            resol = elInfos[index].resol;",
                    "            ext = elInfos[index].ext;",
                    "            ext = ext.toLowerCase();",
                    "//             isImage = (elInfos[index].isImage)? elInfos[index].isImage : true;",
                    "            isTooBig = elInfos[index].isTooBig;",
                    "            if(pixels > 8000 * 8000) isTooBig = true;",
                    "            if(ext == 'tif' || ext == 'psd' || ext == 'jpg' || ext == 'pdf' || ext == 'bmp' || ext == 'gif' || ext == 'png'){",
                    "                isImage = true;",
                    "            }",
                    "",
                    "            if(ext == 'doc' || ext == 'ppt' || ext == 'xls' || ext == 'ptx' || ext == 'lsx' || ext == 'ocx'){",
                    "                isMS = true;",
                    "            }",
                    "            /* window for download or view the attached data */",
                    "            var resolX = (resol !== null)? resol.split('x')[0] : 100;",
                    "            var resolY = (resol !== null)? resol.split('x')[1] : 100;",
                    "            thumbHeight = (resolY < 100)? resolY : 100;",
                    "            var ratio = 250/resolX;",
                    "            if(resolY * ratio < 100){ thumbHeight = resolY * ratio; }",
                    "            if(!isImage) thumbHeight = 32;",
                    "",
                    "            if(confirmWin){",
                    "                var atFile = confirmWin.down('#atFile');",
                    "                var atName = confirmWin.down('#atName');",
                    "                atFile.setWidth(null);",
                    "                atFile.setHeight(null);",
                    "                atFile.setSrc(tPath);",
                    "                atFile.setHeight(thumbHeight);",
                    "                atName.setText(filename);",
                    "            }",
                    "        };",
                    "        changeFileInfo(index);",
                    "",
                    "        var confirmWin = Ext.create('Ext.window.Window', {",
                    "            minWidth:300,",
                    "            modal:true,",
                    "            bodyStyle:'padding:20px',",
                    "            ghost:false,",
                    "            itemId:'attachWin',",
                    "            layout:{",
                    "                type:'vbox',",
                    "                align:'center'",
                    "            },",
                    "            tools:[",
                    "                {",
                    "                    type:'left',",
                    "                    hidden:true,",
                    "                    handler:function(event, button, panelHeader){",
                    "                        var file = panelHeader.up('#attachWin').down('#atFile');",
                    "                        file.currentIndex --;",
                    "                        if(file.currentIndex == -1){",
                    "                            file.currentIndex = elInfos.length - 1;",
                    "                        }",
                    "                        changeFileInfo(file.currentIndex);",
                    "                    }",
                    "                },",
                    "                {",
                    "                    type:'right',",
                    "                    hidden:true,",
                    "                    handler:function(event, button, panelHeader){",
                    "                        var file = panelHeader.up('#attachWin').down('#atFile');",
                    "                        file.currentIndex ++;",
                    "                        if(file.currentIndex == elInfos.length){",
                    "                            file.currentIndex = 0;",
                    "                        }",
                    "                        changeFileInfo(file.currentIndex);",
                    "                    }",
                    "                }",
                    "            ],",
                    "            items:[",
                    "                {",
                    "                    xtype:'image',",
                    "                    src:tPath,",
                    "                    itemId:'atFile',",
                    "                    currentIndex:index,",
                    "                    height:thumbHeight",
                    "                },",
                    "                {",
                    "                    xtype:'label',",
                    "                    itemId:'atName',",
                    "                    text:filename,",
                    "                    style:'font-size:11px;color:#555555'",
                    "                },",
                    "                {",
                    "                    xtype:'container',",
                    "                    layout:{",
                    "                        type:'hbox'",
                    "                    },",
                    "                    itemId:'btnCon',",
                    "                    margin:'10 0 0 0'",
                    "                }",
                    "            ]",
                    "        }).show();",
                    "",
                    "        /* only show left and right buttons when files are more than 1 */",
                    "        if(elInfos.length > 1){",
                    "            var tools = confirmWin.tools;",
                    "            for(var i=0; i<tools.length; i++){",
                    "                if(tools[i].type == 'left' || tools[i].type == 'right'){",
                    "                    tools[i].setHidden(false);",
                    "                }",
                    "            }",
                    "        }",
                    "",
                    "        /* view file in case of image*/",
                    "        var viteBtnTitle = (isImage)? loc.main.showImage : loc.main.showOffice;",
                    "        var viewBtn = {",
                    "            /* show image button */",
                    "            xtype:'button',",
                    "            glyph:'xf06e@FontAwesome',",
                    "            text:viteBtnTitle,",
                    "            handler:function(){",
                    "                var hasPerm = getController('Main').hasUserPermission('download');",
                    "                if(!hasPerm){",
                    "                    Ext.toast(loc.error.lowerLevelToDownload);",
                    "                    return;",
                    "                }                ",
                    "                var win;",
                    "                if(isMS){//if the attached file is a kind of MS office",
                    "                    url = 'http://view.officeapps.live.com/op/view.aspx?src=' + tPath.replace('thumb', 'file');",
                    "                    win = window.open(url, '_blank');",
                    "                }",
                    "                else{",
                    "                    win = window.open('', '_blank');",
                    "                    if(isTooBig){",
                    "                        win.document.write('<img src=\"' + tPath + '/M\"/ alt=\"\">');",
                    "                        Ext.toast(loc.upload.imageTooBig);",
                    "                    }",
                    "                    else{",
                    "                        win.document.write('<img src=\"' + oPath + '\"  alt=\"\"/>');",
                    "                    }",
                    "                }",
                    "            }",
                    "        };",
                    "        /* download file */",
                    "        var hideDownBtn = (dPath === null || dPath === undefined || dPath === '')? true : false;",
                    "        var downBtn = {",
                    "            /* download button */",
                    "            xtype:'button',",
                    "            glyph:'xf019@FontAwesome',",
                    "            text:loc.main.download,",
                    "            margin:'0 0 0 10',",
                    "            hidden:hideDownBtn,",
                    "            handler:function(){",
                    "                var hasPerm = getController('Main').hasUserPermission('download');",
                    "                if(!hasPerm){",
                    "                    Ext.toast(loc.error.lowerLevelToDownload);",
                    "                    return;",
                    "                }",
                    "                window.location.href = domain + '/' + dPath;",
                    "                confirmWin.close();",
                    "            }",
                    "        };",
                    "",
                    "        var btnCon = confirmWin.down('#btnCon');",
                    "        btnCon.add(downBtn);",
                    "        if(isImage || isMS){//show if the attached file can display",
                    "            btnCon.insert(0, viewBtn);",
                    "        }",
                    "    });",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code",
                "designer|commentHeader": "comment"
            },
            "name": "viewAttachedFile",
            "designerId": "d1d84bf7-ad0e-4008-9f77-11a061aaae4e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "getColorradio",
                "implHandler": [
                    "var arr = value.split(',');",
                    "var html = '<div style=\"100%\">';",
                    "Ext.Array.each(arr, function(entry){",
                    "    var units = entry.trim().split('||');",
                    "    var outline = '';",
                    "    if(units[0] == '#ffffff' || units[0] == 'white' || units[0] == '#FFFFFF'){",
                    "        outline = ';border:1px solid #cecece';",
                    "    }",
                    "    html += '<div style=\"float:left;width:13px;height:13px;margin:1px 3px 0 0;background-color:'+units[0]+outline+'\"></div>';",
                    "    html += '<div style=\"float:left;height:13px;margin-right:8px;\">';",
                    "    html += units[1];",
                    "    html += '</div>';",
                    "});",
                    "html += '</div>';",
                    "return html;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getColorradio",
            "designerId": "15ee4993-30fd-4f4a-9631-05d3fc5ddfd8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "image",
                    "maxWidth"
                ],
                "fn": "setImageSize",
                "implHandler": [
                    "var w = image.width, h = image.height;",
                    "",
                    "if(image.width > maxWidth) {",
                    "    w = maxWidth;",
                    "    h = h * maxWidth/image.width;",
                    "}",
                    "image.width = w;",
                    "image.height = h;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setImageSize",
            "designerId": "3fb90283-b51e-41c0-b4cf-d1b5629c611c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "elements"
                ],
                "fn": "setApproval",
                "implHandler": [
                    "var values = [];",
                    "var me = this;",
                    "var bdIdx = elements[0].getAttribute('bdIdx');",
                    "for(i=0; i<elements.length; i++){",
                    "    var checked = elements[i].getAttribute('checked').toString();",
                    "    values.push(checked);",
                    "    Ext.get(elements[i]).on('click', function(e ){",
                    "        var viewer = Ext.getCmp('viewPanel').down('viewer');",
                    "        /* admin or the one who has a permission of approval can */",
                    "        if(e.currentTarget.getAttribute('userid') != sessionId && userInfo.nv_level != 10){",
                    "            Ext.MessageBox.alert(loc.main.notice,  loc.viewer.noPower);",
                    "            return;",
                    "        }",
                    "        var text;",
                    "        var updateMode = 'update';",
                    "        var index = Ext.get(elements).indexOf(e.currentTarget);",
                    "        var target = e.currentTarget;",
                    "        if(target.getAttribute('checked') == '0'){",
                    "            text = loc.viewer.approveDocu;",
                    "        }",
                    "        else{",
                    "            text = loc.viewer.approveCancel;",
                    "            updateMode = 'cancel';",
                    "        }",
                    "",
                    "        /////////////////////////",
                    "        // 결재 승인 예/아니오 창 //",
                    "        /////////////////////////",
                    "        var apvWin = Ext.create('Ext.window.Window', {",
                    "            modal:true,",
                    "            ghost:false,",
                    "            index:index,",
                    "            layout:{",
                    "                type:'vbox',",
                    "                align:'center'",
                    "            },",
                    "            padding:'10',",
                    "            items:[",
                    "                {",
                    "                    xtype: 'label',",
                    "                    text:text,",
                    "                    margin:'15 0 0 0'",
                    "                },",
                    "                {",
                    "                    xtype:'container',",
                    "                    layout:{",
                    "                        type:'hbox',",
                    "                        pack:'center'",
                    "                    },",
                    "                    padding:12,",
                    "                    items:[",
                    "                        {",
                    "                            xtype:'button',",
                    "                            width:100,",
                    "                            text:loc.main.yes,",
                    "                            handler:function(button){",
                    "                                var index = button.up('window').index;",
                    "                                values[index] = (updateMode == 'update')? '1': '0';",
                    "                                button.up('window').close();",
                    "                                me.updateApproval(bdIdx, values.join(\", \"));",
                    "                            }",
                    "                        },",
                    "                        {",
                    "                            xtype:'button',",
                    "                            width:100,",
                    "                            text:loc.main.no,",
                    "                            margin:'0 0 0 10',",
                    "                            handler:function(button){",
                    "                                button.up('window').close();",
                    "                            }",
                    "                        }",
                    "                    ]",
                    "                }",
                    "            ]",
                    "        }).show();",
                    "    });",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setApproval",
            "designerId": "02b6b806-d12c-4af3-af81-c308422e8047"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "source, attr, cls"
                ],
                "fn": "getDatasetTable",
                "implHandler": [
                    "var me = this;",
                    "var i, j;",
                    "var colsData = source.cols_data;",
                    "if(cls === undefined) cls ='';",
                    "html = '<style>';",
                    "html += '\t.dataset-field{';",
                    "html += '\t\tborder-collapse:collapse;';",
                    "html += '\t\twidth:100%;';",
                    "html += '\t}';",
                    "html += '\t.dataset-field th{text-align:center}';",
                    "html += '\t.dataset-field th, .dataset-field td{';",
                    "html += '\t\tpadding:3px 5px 3px 5px;vertical-align:middle;text-align:left';",
                    "html += '\t}';",
                    "html += '</style>';",
                    "html += '\t<table border=\"1\" class=\"dataset-field custom-field\" '+cls+' '+attr+'>';",
                    "var fldOpts = [];",
                    "var geRecOpts = [];",
                    "var colsCodes = [];",
                    "var colsTypes = [];",
                    "var fldCalcs = [];",
                    "var summerys = {};",
                    "var numOfSum = 0;",
                    "for(i=0; i<colsData.length; i++){",
                    "html +=  '\t\t<tr>';",
                    "    var values = {};",
                    "    for(j=1; j<colsData[i].length; j++){",
                    "        var opt;",
                    "        var fldOpt;",
                    "        var refer, field;",
                    "        if(i === 0){//dataset header",
                    "            opt = colsData[i][j].cols_option;",
                    "            if(opt.trim() === '') opt = undefined;",
                    "            if(opt !== undefined){",
                    "                fldOpt = getOption(opt);",
                    "            }",
                    "            else{",
                    "                fldOpt = undefined;",
                    "            }",
                    "            fldOpts.push(fldOpt);",
                    "            //collect cols_code",
                    "            colsCodes.push(colsData[i][j].cols_code);",
                    "            colsTypes.push(colsData[i][j].cols_type);",
                    "html += '\t\t\t<th>';",
                    "html += colsData[i][j].cols_name;",
                    "            if(fldOpt === undefined){",
                    "                geRecOpts.push(undefined);",
                    "            }",
                    "            else if(fldOpt.getRecord !== undefined || fldOpt.getValue !== undefined){",
                    "                if(fldOpt.getRecord !== undefined){",
                    "                    geRecOpts.push({refer:fldOpt.getRecord.split('>')[0], field:fldOpt.getRecord.split('>')[1]});",
                    "                }",
                    "                if(fldOpt.getValue !== undefined){",
                    "                    geRecOpts.push({refer:fldOpt.getValue.split('>')[0], field:fldOpt.getValue.split('>')[1]});",
                    "                }",
                    "",
                    "            }",
                    "            else if(fldOpt.calc !== undefined){",
                    "                fldCalcs.push(j - 1);",
                    "            }",
                    "            else{",
                    "                geRecOpts.push(undefined);",
                    "            }",
                    "html += '\t\t\t</th>';",
                    "        }",
                    "        else{//for real cells(when i > 1)",
                    "html += '\t\t\t<td>';",
                    "            var value = colsData[i][j];",
                    "            if(value === undefined || value === null) value = '';",
                    "            if(fldOpts[j-1] !== undefined){//if a field option is configured'",
                    "                //",
                    "                // option에 따라 이자리에 html 처리",
                    "                //",
                    "                //////////////////////",
                    "                // if option is sum //",
                    "                //////////////////////",
                    "                if(fldOpts[j-1].sum){//detect it need a tr for summary",
                    "                    var sumVal = summerys['feild_' + (j-1).toString()];                    ",
                    "                    if(sumVal === undefined){",
                    "                        sumVal = 0;",
                    "                    }",
                    "                    summerys['feild_' + (j-1).toString()] = sumVal + parseFloat(value);",
                    "                    numOfSum ++;//for check if summery required",
                    "                }",
                    "                /////////////////////////",
                    "                // if option is render //",
                    "                /////////////////////////  ",
                    "                if(fldOpts[j-1].render){",
                    "                    if(fldOpts[j-1].render == 'percent'){",
                    "                        value = Number(value);",
                    "                        var percent = (Ext.isNumber(value))? value : 0;",
                    "html += '\t\t\t\t<div style=\"width:100%;height:20px;border:1px solid #cecece;white-space:nowrap;text-align:center;';",
                    "                        html += '\t\t\t\tbackground-image:url(resources/images/fillcolor.gif);background-size:'+percent+'% 20px;background-repeat:no-repeat\">'+percent+'%';",
                    "// html += '\t\t\t\t\t<div style=\"width:'+percent+'%;height:100%;background-color:#cccccc;font-size:11px;text-align:center\"></div>';",
                    "html += '\t\t\t\t</div>';",
                    "                    }",
                    "                    if(fldOpts[j-1].render == 'colorHex'){",
                    "html += '\t\t\t\t<div style=\"width:20px;height:20px;border:1px solid #cecece;background-color:'+value+'\"><div>';",
                    "                    }",
                    "                }",
                    "                ////////////////////////////////////////",
                    "                // if option is getRecord or getValue //",
                    "                ////////////////////////////////////////                ",
                    "                else if(fldOpts[j-1].getRecord !== undefined || fldOpts[j-1].getValue !== undefined){",
                    "                    var geRecOpt = geRecOpts[j-1];",
                    "                    if(geRecOpts[j-1] !== undefined && value !== null && value !== ''){//getRecord 나 getValue 옵션이 있으면",
                    "                        if(geRecOpts[j-1].field == 'bd_file'){",
                    "                            //field option 설정이 바뀐적이 없는 자료만 표시",
                    "                            if(value.indexOf('file_name=') != -1 && value.indexOf('bd_subject=') != -1 && value.indexOf('bd_idx=') != -1){",
                    "                                html += me.showCopiedFile(value, fldOpts[j-1]);",
                    "//                                 var fileName = decodeURIComponent(value.split('file_name=')[1].split('--bd_subject')[0]);",
                    "//                                 var extArr = fileName.split('.');",
                    "//                                 var ext = extArr[extArr.length -1];",
                    "//                                 var imgs = ['gif', 'tif', 'png', 'jpg', 'ai', 'jpeg', 'eps', 'psd', 'pdf'];",
                    "//                                 var tPath = value.split('?file_name')[0];",
                    "//                                 var oPath = tPath.replace('thumb', 'file');",
                    "//                                 var bdIdx = value.split('--bd_idx=')[1];",
                    "//                                 var dPath = 'binder/down/' + bdIdx + '/0';",
                    "//                                 var attr = 'thumbSrc=\"'+tPath+'\" viewSrc=\"'+oPath+'\" downSrc=\"';",
                    "//                                 attr += dPath+'\" filename=\"'+fileName+'\" field=\"dataset\"';",
                    "//                                 if(fldOpts[j-1].render == 'image'){//image 옵션이 있으면 이미지로 표시",
                    "//                                     if(imgs.indexOf(ext) == -1) tPath = 'resources/ico_ext/ext_' + ext + '.png';",
                    "//                                     var geImgCss = 'background-image:url('+tPath+');background-position:center;background-repeat:no-repeat;';",
                    "//                                     geImgCss   += 'background-size:cover;width:50px;height:50px;margin:0 auto;';",
                    "// html += '\t\t\t\t<div style=\"cursor:pointer;'+ geImgCss +'\" class=\"viewer-download-image \" '+attr+'></div>';",
                    "//                                     if(fldOpts[j-1].imageTitle !== undefined){",
                    "//                                         if(fldOpts[j-1].imageTitle == 'fileName'){",
                    "// html += '\t\t\t\t<div>' + fileName + '</div>';",
                    "//                                         }",
                    "//                                         else{",
                    "//                                             var imgSubject = value.split('bd_subject=')[1].split('--bd_idx=')[0];",
                    "//                                             imgSubject = decodeURIComponent(imgSubject);",
                    "// html += '\t\t\t\t\t<div style=\"width:100%;text-align:center;\">' + imgSubject + '</div>';",
                    "//                                         }",
                    "//                                     }",
                    "//                                 }",
                    "//                                 else{//이미지 표시가 아니면 파일명으로",
                    "// html += '\t\t\t\t<div class=\"viewer-download-image\" '+attr+' style=\"cursor:pointer\">' + fileName + '</div>';",
                    "//                                 }",
                    "",
                    "                            }",
                    "                            else{//파일선택 이외의 선택일 경우",
                    "html += value;",
                    "                            }",
                    "                        }",
                    "                        else{//필드옶션 설정이 바뀌기 전 경우 가공없이 표시",
                    "html += value;",
                    "                        }",
                    "                    }",
                    "                }",
                    "                else{",
                    "html += value;",
                    "                }",
                    "            }",
                    "            //////////////////////////////",
                    "            // if cols_type is colorchk //",
                    "            //////////////////////////////",
                    "            else if(colsTypes[j-1] == 'colorchk'){",
                    "                var chkVals = value.split('||');",
                    "                if(chkVals[i] === null || chkVals[i] === undefined) chkVals[i] = '';",
                    "html += '\t\t\t\t<div style=\"width:20px;height:10px;display:inline-block;background-color:'+chkVals[0]+'\"></div>';",
                    "html += '               <div style=\"display:inline-block\">'+chkVals[1]+'</div>';",
                    "            }",
                    "            ///////////////////////////",
                    "            // if cols_code is image //",
                    "            ///////////////////////////",
                    "            else if(colsCodes[j-1] == 'image'){",
                    "                if(value !== undefined || value !== null || value !== ''){",
                    "                    var imgArr = value.split('.');",
                    "                    var ext = imgArr[imgArr.length - 1];",
                    "                    var imgName = value.replace('.' + ext, '').split('file_name');",
                    "                    var imgAttr = 'thumbSrc=\"'+value+'\" viewSrc=\"'+value;",
                    "                    imgAttr += '\" filename=\"\" field=\"dataset\"';",
                    "                    var geImgCss = 'background-image:url('+colsData[i][j]+');background-position:center;background-repeat:no-repeat;';",
                    "                    geImgCss   += 'background-size:cover;width:50px;height:50px;margin:0 auto;';",
                    "html += '\t\t\t\t<div style=\"cursor:pointer;'+ geImgCss +'\" class=\"viewer-download-image \" '+imgAttr+'>';",
                    "html += '\t\t\t\t</div>';",
                    "                }",
                    "            }",
                    "            //////////////////////",
                    "            // 아무 설정 없는 경우 //",
                    "            //////////////////////",
                    "            else{",
                    "html += value;",
                    "            }",
                    "html += '\t\t\t</td>';",
                    "        }",
                    "    }",
                    "html += '\t\t</tr>';",
                    "}",
                    "    if(numOfSum !== 0){",
                    "html += '\t\t<tr style=\"background-color:#f9f9f9\">';",
                    "        for(i=0; i<fldOpts.length; i++){",
                    "            var sumVal = summerys['feild_' + i.toString()];",
                    "            var unit = colsData[0][i + 1].cols_unit;",
                    "            if(i === 0) sumVal = 'Total';",
                    "            if(sumVal === undefined || isNaN(sumVal)){",
                    "                sumVal = '';",
                    "            }",
                    "            else{",
                    "                sumVal = sumVal + ' ' + colsData[0][i + 1].cols_unit;",
                    "            }",
                    "html += '\t\t\t<td align=\"right\">';",
                    "html += '\t\t\t\t<strong>' + sumVal + '</strong>';",
                    "html += '\t\t\t</td>';",
                    "        }",
                    "html += '\t\t</tr>';",
                    "    }",
                    "html += '\t</table>';",
                    "return html;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getDatasetTable",
            "designerId": "efd766ec-5ff5-43f9-95e9-5dac520b3bd3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value",
                    "option"
                ],
                "fn": "showCopiedFile",
                "implHandler": [
                    "var html = '';",
                    "var fileName = decodeURIComponent(value.split('file_name=')[1].split('--bd_subject')[0]);",
                    "var extArr = fileName.split('.');",
                    "var ext = extArr[extArr.length -1];",
                    "var imgs = ['gif', 'tif', 'png', 'jpg', 'ai', 'jpeg', 'eps', 'psd', 'pdf'];",
                    "var tPath = value.split('?file_name')[0];",
                    "var oPath = tPath.replace('thumb', 'file');",
                    "var bdIdx = value.split('--bd_idx=')[1];",
                    "var dPath = 'binder/down/' + bdIdx + '/0';",
                    "var attr = 'thumbSrc=\"'+tPath+'\" viewSrc=\"'+oPath+'\" downSrc=\"';",
                    "attr += dPath+'\" filename=\"'+fileName+'\" field=\"dataset\"';",
                    "if(option.render == 'image'){//image 옵션이 있으면 이미지로 표시",
                    "    if(imgs.indexOf(ext) == -1) tPath = 'resources/images/ico_ext/ext_' + ext + '.png';",
                    "    var geImgCss = 'background-image:url('+tPath+');background-position:center;background-repeat:no-repeat;';",
                    "    geImgCss   += 'background-size:cover;width:50px;height:50px;margin:0 auto;';",
                    "    html += '\t\t\t\t<div style=\"cursor:pointer;'+ geImgCss +'\" class=\"viewer-download-image \" '+attr+'></div>';",
                    "    if(option.imageTitle !== undefined){",
                    "        if(option.imageTitle == 'fileName'){",
                    "            html += '\t\t\t\t<div>' + fileName + '</div>';",
                    "        }",
                    "        else{",
                    "            var imgSubject = value.split('bd_subject=')[1].split('--bd_idx=')[0];",
                    "            imgSubject = decodeURIComponent(imgSubject);",
                    "            html += '\t\t\t\t\t<div style=\"width:100%;text-align:center;\">' + imgSubject + '</div>';",
                    "        }",
                    "    }",
                    "}",
                    "else{//이미지 표시가 아니면 파일명으로",
                    "    html += '\t\t\t\t<div class=\"viewer-download-image\" '+attr+' style=\"cursor:pointer\">' + fileName + '</div>';",
                    "}",
                    "return html;",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showCopiedFile",
            "designerId": "f84d49d4-a12a-41a7-8e64-b8f5152669a2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "editModeToggle",
                "implHandler": [
                    "var viewer = Ext.getCmp('viewPanel').down('#viewer');",
                    "if(!viewer){",
                    "    Ext.MessageBox.alert(loc.main.notice,  loc.upload.noneSelected);",
                    "    return;",
                    "}",
                    "var cfEls = viewer.el.select('.custom-field').elements;",
                    "var bsEls = viewer.el.select('.basic-field').elements;",
                    "var hiddenEls = viewer.el.select('.hidable').elements;",
                    "var els = Ext.Array.merge(cfEls, bsEls);",
                    "if(!viewer.getEditable()){",
                    "    viewer.setEditable(true);",
                    "    button.setIconCls('fa fa-unlock');",
                    "    Ext.toast(loc.menu.isEditable);",
                    "    Ext.Array.each(els, function(entry){",
                    "        Ext.get(entry).setStyle('background-color', '#f5f9fd');",
                    "    });",
                    "    Ext.Array.each(hiddenEls, function(entry){",
                    "        Ext.get(entry).setStyle('display', 'inline');",
                    "    });",
                    "}",
                    "else{",
                    "    viewer.setEditable(false);",
                    "    button.setIconCls('fa fa-lock');",
                    "    Ext.toast(loc.menu.uneditable);",
                    "    Ext.Array.each(els, function(entry){",
                    "        Ext.get(entry).setStyle('background-color', 'white');",
                    "    });",
                    "    Ext.Array.each(hiddenEls, function(entry){",
                    "        Ext.get(entry).setStyle('display', 'none');",
                    "    });",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "editModeToggle",
            "designerId": "0a90ea1d-88fc-4dda-bbc9-8167093a1c58"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "target",
                    "clickListener"
                ],
                "fn": "setInputField",
                "implHandler": [
                    "var me = this;",
                    "var isImage = (target.getAttribute('cols_code') == 'image' || target.getAttribute('render') == 'image')? true : false;",
                    "if(target.getAttribute('cols_code') == 'linked'){",
                    "    Ext.Msg.alert('Notice', loc.viewer.cannotDirectModify);",
                    "    return;",
                    "}",
                    "/* input that will be added */",
                    "",
                    "var element = document.createElement('input');",
                    "var el = Ext.get(element);",
                    "/* td that slected */",
                    "var target = Ext.get(target);",
                    "/* attributes of td */",
                    "var fieldType = target.getAttribute('field_type');",
                    "var bd_idx = target.getAttribute('bd_idx');",
                    "var cUnit = target.getAttribute('unit');",
                    "/* text in td */",
                    "//target.dom.textContent : in case of subject field",
                    "var value =  target.getAttribute('dataval') || target.dom.textContent;",
                    "if(!value) value = '';",
                    "target.appendChild(el);",
                    "el.setStyle({width:'100%'});",
                    "/* 이미 단위가 입력되어 있는경우 */",
                    "if(cUnit !== '' && cUnit !== undefined && cUnit !== null){",
                    "//     value = value.slice(0, value.length-cUnit.length);",
                    "}",
                    "else{",
                    "    cUnit = '';",
                    "}",
                    "if(value === null) value = '';",
                    "element.value = value;",
                    "element.setAttribute('title', loc.upload.cellEditTip);",
                    "el.focus();",
                    "if(target.getAttribute('cols_type') == 'number'){",
                    "    element.setAttribute('onkeypress', 'getController(\\'Util\\').isNumber(event)');",
                    "}",
                    "var cloneDom = target.dom.cloneNode(true);",
                    "el.on('keyup', function(e){",
                    "    if(e.keyCode == 13){",
                    "        //in case press Enter",
                    "        target.edited = true;",
                    "        /* resume click event to target that dispatched at onViewerRender() */",
                    "        target.on('click', clickListener);",
                    "        var val = el.dom.value.toString();",
                    "        var inTxt;",
                    "        if(isImage){",
                    "            target.dom.innerHTML = '<img style=\"max-height: 85px;cursor: pointer\" src=\"'+element.value+'\" onerror=\"this.src =\\'resources/images/ico_broken.png\\'\" onclick=\"getController(\\'Viewer\\').viewImage(this)\">';",
                    "        }",
                    "        else if(target.getAttribute('render') == 'colorHex'){",
                    "            target.dom.children[0].style.backgroundColor = val;",
                    "            target.dom.children[1].textContent = val;",
                    "            target.dom.setAttribute('dataval', val);",
                    "        }",
                    "        else{",
                    "            if(target.getAttribute('cols_type') == 'idx'){",
                    "                inTxt = val;",
                    "            }",
                    "            else{",
                    "                inTxt = val + cUnit;",
                    "            }",
                    "            target.dom.textContent = inTxt;",
                    "            target.dom.setAttribute('dataVal', val);",
                    "        }",
                    "",
                    "        val = encodeURIComponent(val);",
                    "        var query = '';",
                    "        var colsIdx = '';",
                    "        if(fieldType == 'subject'){",
                    "            query = '?bd_idx='+bd_idx+'&data_name=bd_subject&data_val=' + val;",
                    "            colsIdx = 'bd_subject';",
                    "        }",
                    "        /* for custom field */",
                    "        else{",
                    "            var idx = target.getAttribute('cols_idx');",
                    "            query = '?bd_idx='+bd_idx+'&cols_idx=' + idx + '&data_val=' + val;",
                    "        }",
                    "        me.updateCellValue(query);",
                    "        if(el) el.destroy();",
                    "    }",
                    "});",
                    "el.on('blur', function(e){",
                    "//     var val = el.dom.value.toString();",
                    "//     var inTxt;",
                    "   ",
                    "//     if(isImage){",
                    "//         target.dom.innerHTML = '<img style=\"max-height: 85px;cursor: pointer\" src=\"'+element.value+'\" onerror=\"this.src =\\'resources/images/ico_broken.png\\'\" onclick=\"getController(\\'Viewer\\').viewImage(this)\">';",
                    "//     }",
                    "//     else if(target.getAttribute('render') == 'colorHex'){",
                    "// //         if(targetj.edited) target.edited = false;",
                    "//     }",
                    "//     else{",
                    "//         if(target.getAttribute('cols_type') == 'idx'){",
                    "//             inTxt = val;",
                    "//         }",
                    "//         else{",
                    "//             inTxt = val + cUnit;",
                    "//         }",
                    "//         target.dom.textContent = inTxt;",
                    "//         if(target.getAttribute('cols_type') == 'idx'){",
                    "//             target.dom.textContent.replace(cUnit, '');",
                    "//         }",
                    "//     }",
                    "    if(!target.edited){",
                    "        el.destroy();",
                    "    }",
                    "    target.edited = false;",
                    "    /* resume click event to target that dispatched at onViewerRender() */",
                    "    target.on('click', clickListener);",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setInputField",
            "designerId": "8a334e04-6bc8-4fb3-8b5b-a7b034158e01"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "query",
                    "win",
                    "reloadStore"
                ],
                "fn": "updateCellValue",
                "implHandler": [
                    "var me = this;",
                    "var grid = getController('Main').getListTab().getActiveTab().getGrid();",
                    "var viewer = Ext.getCmp('viewPanel').down('viewer');",
                    "var dStore;",
                    "if(viewer !== null){",
                    "    dStore = Ext.getStore('dStore_' + viewer.categoryId);",
                    "}",
                    "Ext.data.JsonP.request({",
                    "    url:domain + '/binder/expDataUpdate' + query + '&ca_id=' + viewer.categoryId,",
                    "    success:function(response){",
                    "        if(response.result){",
                    "            /* load store that related with viewer to reflesh grid */",
                    "            if(reloadStore === '' || reloadStore === undefined || reloadStore === null) reloadStore = true;",
                    "            if(reloadStore) Ext.toast(loc.upload.edited);",
                    "            if(dStore && reloadStore){",
                    "                dStore.on('load', function onDstoreLoad(store){",
                    "                    dStore.un('load', onDstoreLoad);",
                    "                    grid.setSelection(store.getRange(viewer.gridIndex, viewer.gridIndex));",
                    "//                     getController('Main').getMainView().fireEvent('cellvalueupdated');",
                    "//                     grid.fireEvent('itemclick', grid, grid.getSelectionModel().getLastSelected());//선택된 data 내용보기",
                    "                });",
                    "                dStore.load();",
                    "            }",
                    "            else{",
                    "                getController('Main').getMainView().fireEvent('cellvalueupdated');",
                    "            }",
                    "//             Ext.getCmp('icoEditable').fireEvent('click', Ext.getCmp('icoEditable'));",
                    "            /* some custom field(selectbox) need to remove widow after finish all */",
                    "            if(win){",
                    "                win.close();",
                    "            }",
                    "        }",
                    "    },",
                    "    failure:function(){",
                    "        alert(loc.main.networkProblem);",
                    "    }",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updateCellValue",
            "designerId": "2506ca94-2baa-4fb1-adae-769a4c552339"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "target",
                    "win",
                    "query"
                ],
                "fn": "updateDatasetValue",
                "implHandler": [
                    "var ctlr = getController('Main');",
                    "var me = this;",
                    "var request = new XMLHttpRequest();",
                    "request.open('POST', domain + '/binder/expDataUpdate');",
                    "request.setRequestHeader('Content-Type','application/x-www-form-urlencoded');",
                    "request.onload = function(){",
                    "    if(request.status != 200){",
                    "        alert('Error \" + oReq.status + \" occurred when trying to update.<br \\/>');",
                    "    }",
                    "    else{",
                    "        Ext.toast(loc.upload.edited);",
                    "        /* load store that related with viewer */",
                    "        /* reflesh grid */",
                    "        var viewer = Ext.getCmp('viewPanel').down('viewer');",
                    "        var dStore = Ext.getStore('dStore_' + viewer.categoryId);",
                    "",
                    "        dStore.on('load', function dStoreLoaded(){",
                    "            /* reselect grid row after update dataset value */",
                    "            dStore.un('load', dStoreLoaded);",
                    "            var viewer = Ext.getCmp('viewPanel').down('viewer');",
                    "            var mainGrid = ctlr.getListTab().getActiveTab();",
                    "            mainGrid.getSelectionModel().select(viewer.gridIndex);",
                    "            var selected = mainGrid.getSelectionModel().getSelection()[0];",
                    "            ctlr.viewDocument(selected, mainGrid.getTitle(), mainGrid.formMode, viewer.gridIndex);",
                    "        });",
                    "        dStore.load();",
                    "",
                    "        if(win){",
                    "            win.close();",
                    "        }",
                    "    }",
                    "};",
                    "request.send(query);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updateDatasetValue",
            "designerId": "4267143d-4b29-4658-b129-89ac20e49b79"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "target",
                    "win"
                ],
                "fn": "setHtmlEditorField",
                "implHandler": [
                    "var me = this;",
                    "",
                    "/* td that slected */",
                    "var target = Ext.get(target);",
                    "/* attributes of td */",
                    "var fieldType = target.getAttribute('field_type');",
                    "var bd_idx = target.getAttribute('bd_idx');",
                    "var editor = win.down('htmleditor');",
                    "var val = editor.getValue();",
                    "win.close();",
                    "var query = '';",
                    "var colsIdx = '';",
                    "if(fieldType == 'content'){",
                    "    query = '?bd_idx='+bd_idx+'&data_name=bd_content&data_val=' + encodeURIComponent(val);",
                    "    colsIdx = 'bd_content';",
                    "}",
                    "else{",
                    "    var idx = target.getAttribute('cols_idx');",
                    "    query = '?bd_idx='+bd_idx+'&cols_idx=' + idx + '&data_val=' + encodeURIComponent(val);",
                    "}",
                    "target.dom.innerHTML = val;",
                    "me.updateCellValue(query);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setHtmlEditorField",
            "designerId": "cd97e3ea-05c2-4770-9a91-90659eec36a5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "target",
                    "val",
                    "win"
                ],
                "fn": "setQuery",
                "implHandler": [
                    "var colsIdx = target.getAttribute('cols_idx');",
                    "var colsType = target.getAttribute('cols_type');",
                    "var bdIdx = target.getAttribute('bd_idx');",
                    "var cUnit = target.getAttribute('unit');",
                    "var query = '?bd_idx=' + bdIdx + '&cols_idx=' + colsIdx + '&data_val=' + val;",
                    "if(cUnit !== '' && cUnit !== null && cUnit !== undefined){",
                    "    val += cUnit;",
                    "}",
                    "Ext.get(target).dom.innerHTML = val;",
                    "this.updateCellValue(query, win);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setQuery",
            "designerId": "4fa566c7-d12c-4ed6-8074-67681cf9053c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "target",
                    "isHistory"
                ],
                "fn": "showDataGroupInfomation",
                "implHandler": [
                    "var viewer = Ext.getCmp('viewPanel').down('viewer');",
                    "/* do not open window when click at the editmode */",
                    "/* direct editing window will open instead */",
                    "",
                    "if(!isHistory){",
                    "    if(viewer.getEditable()) return;",
                    "}",
                    "",
                    "var me = this;",
                    "var cId = target.getAttribute('relatedCategory');",
                    "var value = target.getAttribute('value');",
                    "var query = 'ca_id=' + cId;",
                    "Ext.data.JsonP.request({",
                    "    params:{",
                    "        se_subject:value",
                    "    },",
                    "    url:getDataListByIdApi(query),",
                    "    success:function(response){",
                    "        var val = response.binderList[0];",
                    "        if(!val){",
                    "            Ext.toast(loc.viewer.problemInData);",
                    "            return;",
                    "        }",
                    "        var html = me.generateHtml(val, 'Default', false);",
                    "        var win = Ext.create('Ext.window.Window',{",
                    "            modal:true,",
                    "            ghost:false,",
                    "            width:700,",
                    "            maxHeight:windowMaxHeight,",
                    "            scrollabe:true,",
                    "            padding:'20',",
                    "            items:[",
                    "                {",
                    "                    xtype:'container',",
                    "                    html:html,",
                    "                    width:'100%',",
                    "                    maxHeight:800,",
                    "                    scrollable:true",
                    "                }",
                    "            ]",
                    "        }).show();",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showDataGroupInfomation",
            "designerId": "207a4701-fbda-4579-adbe-ab2a50b86d3d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "values",
                    "type",
                    "header"
                ],
                "fn": "generateHtml",
                "implHandler": [
                    "var me = this;",
                    "var html;",
                    "if(type == 'Default'){",
                    "    html  =  '<div>';",
                    "    /* basic info */",
                    "    html +=\t\t '<div style=\"width:100%\">';",
                    "    html +=\t\t \t'<table border=1 cellpadding=0 cellspacing=0 class=\"viewer-table section-space\">';",
                    "    var subject = values.bd_subject;",
                    "    if(subject === undefined) subject = ' ';",
                    "    html +=\t\t \t\t'<tr>';",
                    "    html +=\t\t \t\t\t'<th height=\"25\" colspan=4>'+subject+'</th>';",
                    "    html +=\t\t \t\t'</tr>';",
                    "    html +=\t\t \t\t'<tr>';",
                    "    html +=\t\t \t\t\t'<th>'+loc.main.user+'</th>';",
                    "    html +=\t\t \t\t\t'<td>'+values.bd_name+'</td>';",
                    "    html +=\t\t \t\t\t'<th>'+loc.main.regDate+'</th>';",
                    "    html +=\t\t \t\t\t'<td>'+values.bd_regdate+'</td>';",
                    "    html +=\t\t \t\t'</tr>';",
                    "    var remark = values.bd_content;",
                    "    if(remark === undefined) remark = '';",
                    "    html +=\t\t \t\t'<tr>';",
                    "    html +=\t\t \t\t\t'<td height=25 colspan=4>'+remark+'</td>';",
                    "    html +=\t\t \t\t'</tr>';",
                    "    html +=\t\t \t'</table>';",
                    "    html +=\t\t '</div>';",
                    "    /* custom fields */",
                    "    if(values.bd_data.length > 0){",
                    "        html +=\t \t'<div style=\"width:100%\" class=\"section-space\">';",
                    "        html +=\t\t \t'<table border=1 cellpadding=0 cellspacing=0 class=\"viewer-table section-space\">';",
                    "        Ext.Array.each(values.bd_data, function(entry, index){",
                    "            if(entry.cols_type == 'dataset'){",
                    "                html +=\t\t \t\t'<tr>';",
                    "                html +=\t\t \t\t\t'<th colspan=2>'+entry.cols_name+'</th>';",
                    "                html +=\t\t \t\t'</tr>';",
                    "                html +=\t\t \t\t'<tr>';",
                    "                html += \t\t\t\t'<td colspan=2>';",
                    "                html +=                 \tentry.data_html+'</td>';",
                    "                html +=\t\t \t\t'</tr>';",
                    "            }",
                    "            /* link field */",
                    "            else if(entry.cols_type == 'link'){",
                    "                    html +=\t\t \t\t'<tr>';",
                    "                    html +=\t\t \t\t\t'<th colspan=2>'+entry.cols_name+'</th>';",
                    "                    html +=\t\t \t\t'</tr>';",
                    "                    html +=\t\t \t\t'<tr>';",
                    "                    html += \t\t\t\t'<td height=23 colspan=2>';",
                    "                if(entry.data_val.length > 0){",
                    "                    html += \t\t\t\t\t'<div style=\"width:100%\">';",
                    "                    var ids = entry.data_val.split(',');",
                    "                    Ext.Array.each(ids, function(item){",
                    "                        var url = domain + '/thumb/' + item.trim() + '/0/T';",
                    "                     var parameters = item.trim() + ',' + item.cols_name;",
                    "                        var clickEvt = 'getController(\\'Viewer\\').showLinkInformation('+parameters+')';",
                    "                        html +=\t\t \t\t\t\t'<div class=\"viewer-link\" onclick=\"'+clickEvt+'\" cols_name=\"'+item.cols_name+'\" bd_idx=\"'+item.trim()+'\"';",
                    "                        html += \t\t\t\t\t' style=\"background:URL('+url+');background-repeat:no-repeat;background-position:center\">';",
                    "                        html += \t\t\t\t    '</div>';",
                    "                    });",
                    "                    html += \t\t\t\t\t'</div>';",
                    "                }",
                    "                    html +=\t\t \t\t\t'</td>';",
                    "                    html +=\t\t \t\t'</tr>';",
                    "            }",
                    "            /* end link field */",
                    "            /* color radio field */",
                    "            else if(entry.cols_type == 'colorchk'){",
                    "                    html +=\t\t \t\t'<tr>';",
                    "                    html +=\t\t \t\t\t'<th>'+entry.cols_name+'</th>';",
                    "                    html += \t\t\t\t'<td>';",
                    "                if(entry.data_val.length > 0){",
                    "                    html += \t\t\t\t\tme.getColorradio(entry.data_val);",
                    "                }",
                    "                    html += \t\t\t\t'</td>';",
                    "                    html +=\t\t \t\t'</tr>';",
                    "            }",
                    "            /* end color radio field */",
                    "            else if(entry.cols_type == 'color'){",
                    "                    html +=\t\t \t\t'<tr>';",
                    "                    html +=\t\t \t\t\t'<th>'+entry.cols_name+'</th>';",
                    "                    html += \t\t\t\t'<td><div  style=\"width:15px;height:15px;background-color:'+entry.data_val+'\"></div></td>';",
                    "                    html +=\t\t \t\t'</tr>';",
                    "            }",
                    "            else if(entry.cols_type == 'color256'){",
                    "                    html +=\t\t \t\t'<tr>';",
                    "                    html +=\t\t \t\t\t'<th>'+entry.cols_name+'</th>';",
                    "                    html += \t\t\t\t'<td>';",
                    "                    Ext.Array.each(entry.data_val.split(','), function(item){",
                    "                        html += \t\t\t    \t'<div class=\"color256\" style=\"float:left;width:15px;height:15px;background-color:'+item.trim()+'\"></div>';",
                    "                    });",
                    "                    html +=                  '</td>';",
                    "                    html +=\t\t \t\t'</tr>';",
                    "            }",
                    "            else if(entry.cols_type == 'datagrp'){",
                    "                    html +=\t\t \t\t'<tr>';",
                    "                    html +=\t\t \t\t\t'<th>'+entry.cols_name+'</th>';",
                    "                    html += \t\t\t\t'<td value=\"'+entry.data_val+'\" relatedCategory=\"'+entry.cols_category+'\">';",
                    "                if(entry.data_val ==='' || entry.data_val === undefined || entry.data_val === null){",
                    "",
                    "                }",
                    "                else{",
                    "                    html +=                 \t'<div style=\"float:left\">'+entry.data_val+'</div>';",
                    "                }",
                    "                    html +=\t\t \t\t'</td></tr>';",
                    "            }",
                    "            else{",
                    "                html +=\t\t \t\t'<tr>';",
                    "                html +=\t\t \t\t\t'<th style=\"width:180px\">'+entry.cols_name+'</td>';",
                    "                if(entry.cols_type != 'idx'){",
                    "                    html += \t\t\t\t'<td>' +entry.data_val+ '</td';",
                    "                }",
                    "                else{",
                    "                    html += \t\t\t\t'<td>' +entry.data_val+ '</td';",
                    "                }",
                    "                html +=\t\t \t\t'</tr>';",
                    "            }",
                    "        });",
                    "        html +=\t\t \t'</table>';",
                    "        html +=  \t'</div>';",
                    "    }",
                    "    /* attachment */",
                    "    if(values.bd_file.length > 0){",
                    "        html += '<table border=1 cellpadding=0 cellspacing=0 class=\"viewer-table section-space\">';",
                    "        html += '<tr><th>'+loc.main.attachFile+'</th></tr>';",
                    "        html += '<tr><td>';",
                    "        html += \t'<div style=\"width:100%\">';",
                    "        Ext.Array.each(values.bd_file, function(entry, index){",
                    "            var tPath = entry.thumb_path.replace('/T', '');",
                    "            if(!Ext.isIE) tPath += '?c=' + randomString(16);",
                    "            var oPath = tPath.replace('thumb', 'file');//origial image(jpg) size path",
                    "            var dPath = 'binder/down/' + values.bd_idx + '/' + index;//original file download path",
                    "            var pixels = entry.file_height * entry.file_width;",
                    "            var sizeInFormat = me.autoFilesizeFormat(entry.file_size);",
                    "            var resol = entry.file_width+'x'+entry.file_height;",
                    "            var backSize = (entry.file_height < 120 && entry.file_width < 120)? 'auto' : 'cover';",
                    "            var attr = 'thumbSrc=\"'+tPath+'\" viewSrc=\"'+oPath+'\" downSrc=\"';",
                    "                attr += dPath+'\" pixels=\"'+pixels+'\" filesize=\"'+entry.file_size+'\" resolution=\"'+resol+'\" filename=\"'+entry.file_name+'\"';",
                    "            html += \t\t'<div class=\"viewer-attach-unit\">';",
                    "            html += \t\t\t'<div style=\"background-image:url('+tPath+');background-size:'+backSize+'\" '+attr+' class=\"viewer-attach-image\"></div>';",
                    "            html += \t\t\t'<div class=\"viewer-filename\" title=\"'+entry.file_name+'\">';",
                    "            html += \t\t\t\tentry.file_name;",
                    "            html += \t\t\t'</div>';",
                    "            html += \t\t\t'<div class=\"viewer-filename\">'+sizeInFormat+'</div>';",
                    "            html += \t\t'</div>';",
                    "        });",
                    "        html += \t'</div>';",
                    "        html += '</td></tr>';",
                    "        html += '</table>';",
                    "    }",
                    "    html += '</div>';",
                    "}",
                    "",
                    "return html;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "generateHtml",
            "designerId": "435639f5-d8a1-40c2-92fa-1eaae08147c8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "bdIdx",
                    "colsName"
                ],
                "fn": "showLinkInformation",
                "implHandler": [
                    "var me = this;",
                    "var viewer = Ext.getCmp('viewPanel').down('viewer');",
                    "/* returning in Viewer edit mode */",
                    "if( viewer && viewer.getEditable()) return;",
                    "Ext.data.JsonP.request({",
                    "    url:getViewApi(),",
                    "    params:{",
                    "        bd_idx:bdIdx",
                    "    },",
                    "    success:function(response){",
                    "        var lnkData = response.binderView;",
                    "        lnkData.companyInfo = companyInfo;",
                    "        console.log(response);",
                    "        var html = me.generateHtml(lnkData, 'Default', false);",
                    "        var win = Ext.create('Ext.window.Window',{",
                    "            modal:true,",
                    "            ghost:false,",
                    "            title:loc.viewer.detailView + ' - ' + lnkData.ca_name,",
                    "            width:700,",
                    "            bodyStyle:'padding:20px',",
                    "            items:[",
                    "                {",
                    "                    xtype:'container',",
                    "                    html:html,",
                    "                    width:'100%',",
                    "                    maxHeight:800,",
                    "                    scrollable:true,",
                    "                    listeners:{",
                    "                        afterrender:function(comp){",
                    "                            var attachFile = comp.el.select('.viewer-attach-image');",
                    "                            getController('Viewer').viewAttachedFile(attachFile.elements);",
                    "                        }",
                    "                    }",
                    "                }",
                    "            ]",
                    "        }).show();",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showLinkInformation",
            "designerId": "a394c865-e578-4d82-a989-7fad3c75862f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "source"
                ],
                "fn": "viewImage",
                "implHandler": [
                    "if(Ext.isElement(source)){",
                    "    var cso = Ext.get(source);",
                    "    if(!Ext.getCmp('viewPanel').down('#viewer').editable){",
                    "        var owin = window.open('', '');",
                    "        owin.location.href = source.getAttribute('src');",
                    "    }",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "viewImage",
            "designerId": "0cefbe66-5a21-4375-8839-489547f9da91"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "bd_idx",
                    "value"
                ],
                "fn": "updateApproval",
                "implHandler": [
                    "var msgDocStatus = '';",
                    "var vPan = Ext.getCmp('viewPanel');",
                    "var obj = vPan.el.select('.msgDocStatus').elements[0];",
                    "var html;",
                    "if(obj) html = obj.outerHTML;",
                    "Ext.data.JsonP.request({",
                    "    url:getUpdateApprovalApi(),",
                    "    params:{",
                    "        bd_idx:bd_idx,",
                    "        ap_chk:value",
                    "    },",
                    "    success:function(response){",
                    "        var ctlr = getController('Main');",
                    "        var viewer = Ext.getCmp('viewPanel').down('viewer');",
                    "        var reco= Ext.data.Record.create([",
                    "            {name:'ca_id'}, {name:'bd_idx'}",
                    "        ]);",
                    "        reco.set({",
                    "            ca_id:viewer.categoryId,",
                    "            bd_idx:viewer.info.bd_idx,",
                    "        });",
                    "        //메시지 문서중에서도 결재인 경우",
                    "        if(html !== undefined) reco.set({html:html});",
                    "        //record, title, formMode, index, isRecent",
                    "        ctlr.viewDocument(reco, viewer.title, viewer.formMode, viewer.gridIndex);",
                    "",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updateApproval",
            "designerId": "c57e80e0-4f9f-42c5-b19c-b4f6b51741dc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "colorInfo"
                ],
                "fn": "getColorways",
                "implHandler": [
                    "",
                    "var colorways = eval(colorInfo.data_val);",
                    "var i, j;",
                    "html  ='<tr>';",
                    "html +='\t<th style=\"width:180px\">' + colorInfo.cols_name + '</th>';",
                    "html +='\t<td>';",
                    "for(i=0; i<colorways.length; i++){",
                    "html +='\t\t<div style=\"float:left;border:1px solid #cecece;padding:3px;margin-top:3px;height:28px;\">';",
                    "html +='\t\t\t<div style=\"width:20px;height:20px;display:inline-block;text-align:center\">'+ (i+1) +'</div>';    ",
                    "    var colors = colorways[i].color;",
                    "    for(j=0; j<colors.length; j++){",
                    "        var color = colors[j].color;",
                    "        var info = colors[j].name + '/' + colors[j].color;",
                    "html +='\t\t\t<i style=\"width:20px;height:20px;background-color:'+color+';display:inline-block\" title=\"'+info+'\"></i>';",
                    "    }",
                    "html +='\t\t</div>';    ",
                    "}",
                    "html +='\t</td>';",
                    "html +='</tr>';",
                    "return html;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getColorways",
            "designerId": "1ee51080-4fbb-4cdc-b945-cc3886cfb2c3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "images"
                ],
                "fn": "slideShow",
                "implHandler": [
                    "//[{src:path, width:imgData[i].file_width, height:imgData[i].file_height}]",
                    "// var viewer = Ext.getCmp('viewPanel').down('#viewer');",
                    "// if(!viewer) return;",
                    "// var imgData = viewer.info.bd_file;",
                    "// if(imgData.length === 0 || imgData.length === undefined){",
                    "//     Ext.Msg.alert('Notice', loc.viewer.noShowData);",
                    "//     return;",
                    "// }",
                    "",
                    "var slideWin = Ext.create('Ext.window.Window', {",
                    "    width:windowMaxWidth,",
                    "    height:windowMaxHeight,",
                    "    layout: {",
                    "        type: 'fit',",
                    "        align: 'center',",
                    "        pack: 'middle'",
                    "    },",
                    "    padding:20,",
                    "    id:'slideShow',",
                    "    count:0,",
                    "    ghost:false,",
                    "    modal:true,",
                    "    images:[],",
                    "    bodyStyle:'background-color:black',",
                    "    style:'background-color:black',",
                    "    items:[",
                    "        {",
                    "            xtype:'container',",
                    "            itemId:'imageCon',",
                    "            scrollable:true,",
                    "            layout:'card',",
                    "            animation:'flip'",
                    "        }",
                    "    ],",
                    "    tools:[",
                    "        {",
                    "            ////////////////////////////////////////",
                    "            // show origianl size of image button //",
                    "            ////////////////////////////////////////",
                    "            xtype:'button',",
                    "            scale:'large',",
                    "            glyph:'xf065@fontAwesome',",
                    "            itemId:'btnFit',",
                    "            width:40,",
                    "            height:40,",
                    "            ui:'plain-toolbar-small',",
                    "            style:'color:white',",
                    "            listeners:[",
                    "                {",
                    "                    click:function(button){",
                    "                        var wrapper = button.up('window').down('#imageWrapper');",
                    "                        if(button.getGlyph().glyphConfig == 'xf065@fontAwesome'){",
                    "                            button.setGlyph('xf066@fontAwesome');",
                    "                            var index = wrapper.index;",
                    "                            imgInfo = images[index];",
                    "                            wrapper.setWidth(imgInfo.width);",
                    "                            wrapper.setHeight(imgInfo.height);",
                    "                        }",
                    "                        else{",
                    "                            button.setGlyph('xf065@fontAwesome');",
                    "                            wrapper.setHeight('100%');",
                    "                            wrapper.setWidth('100%');",
                    "                        }",
                    "                    }",
                    "                }",
                    "            ]",
                    "        },",
                    "        {",
                    "            xtype:'button',",
                    "            glyph:'xf04a@FontAwesome',",
                    "            scale:'large',",
                    "            itemId:'btnLeft',",
                    "            width:40,",
                    "            height:40,",
                    "            ui:'plain-toolbar-small',",
                    "            style:'color:white'",
                    "        },",
                    "        {",
                    "            //////////////////////",
                    "            // auto play button //",
                    "            //////////////////////",
                    "            xtype:'button',",
                    "            glyph:'xf04b@FontAwesome',",
                    "            scale:'large',",
                    "            width:40,",
                    "            height:40,",
                    "            status:'pause',",
                    "            itemId:'btnPlay',",
                    "            ui:'plain-toolbar-small',",
                    "            style:'color:white',",
                    "            listeners:[",
                    "                {",
                    "                    click:function(button){",
                    "                        if(button.status == 'play'){",
                    "                            button.status = 'pause';",
                    "                            button.setGlyph('xf04b@FontAwesome');",
                    "                        }",
                    "                        else{",
                    "                            button.status = 'play';",
                    "                            button.setGlyph('xf04c@FontAwesome');",
                    "                        }",
                    "                    }",
                    "                }",
                    "            ]",
                    "        },",
                    "        {",
                    "            xtype:'button',",
                    "            glyph:'xf04e@FontAwesome',",
                    "            scale:'large',",
                    "            itemId:'btnRight',",
                    "            width:40,",
                    "            height:40,",
                    "            ui:'plain-toolbar-small',",
                    "            style:'color:white'",
                    "        }",
                    "    ],",
                    "    listeners:{//window listeners",
                    "        afterrender:function onAfterRender(component){",
                    "            component.un('afterrender', onAfterRender);",
                    "            var setImage = function(direction){",
                    "                var imageCon = component.down('#imageCon');",
                    "                var count = component.count;",
                    "                imageCon.removeAll();",
                    "                var slideBox = {",
                    "                    xtype:'container',",
                    "                    itemId:'slideBox',",
                    "                    scrollable:true,",
                    "                    layout: {",
                    "                        type: 'hbox',",
                    "                        align: 'center',",
                    "                        pack: 'middle'",
                    "                    },",
                    "                    items:[",
                    "                        {",
                    "                            xtype:'component',",
                    "                            itemId:'imageWrapper',",
                    "                            index:count,",
                    "                            style:{",
                    "                                'background-image':'url('+images[count].src+')',",
                    "                                'background-repeat':'no-repeat',",
                    "                                'background-position':'center',",
                    "                                'background-size':'contain'",
                    "                            },",
                    "                            listeners:{",
                    "                               resize:function onSlideBoxResize(element, info){",
                    "                                   element.un('resize', onSlideBoxResize);",
                    "                                   if(images[element.index].width > element.up('container').getWidth() || images[element.index].height > element.up('container').getHeight()){",
                    "                                       //in case image is lrager than container",
                    "                                       element.setWidth('100%');",
                    "                                       element.setHeight('100%');",
                    "                                       component.down('#btnFit').setHidden(false);",
                    "                                   }",
                    "                                   else{",
                    "                                       element.setWidth(images[element.index].width);",
                    "                                       element.setHeight(images[element.index].height);",
                    "                                       component.down('#btnFit').setHidden(true);",
                    "                                   }",
                    "                               }",
                    "                            }",
                    "                        }",
                    "                    ]",
                    "                };",
                    "                imageCon.add(slideBox);",
                    "                if(direction == 'next'){",
                    "                    component.count += 1;",
                    "                }",
                    "                else{",
                    "                    component.count -= 1;",
                    "                }",
                    "                if(component.count == images.length) component.count = 0;",
                    "                if(component.count == -1) component.count = images.length - 1;",
                    "            };",
                    "",
                    "            ////////////////////////////",
                    "            // actions of each button //",
                    "            ////////////////////////////",
                    "            if(images.length > 0){",
                    "                setImage('next');",
                    "            }",
                    "            var play;",
                    "            var btnPlay = component.down('#btnPlay');",
                    "            btnPlay.on('click', function(button){",
                    "                if(button.status == 'play'){",
                    "                    play = setInterval(setImage, 5000, 'next');",
                    "                }",
                    "                else{",
                    "                    clearInterval(play);",
                    "                }",
                    "            });",
                    "            var btnLeft = component.down('#btnLeft');",
                    "            var btnRight = component.down('#btnRight');",
                    "            btnLeft.on('click', function(button){",
                    "                if(btnPlay.status == 'pause'){",
                    "                    clearInterval(play);",
                    "                }",
                    "                setImage('previous');",
                    "            });",
                    "            btnRight.on('click', function(button){",
                    "                if(btnPlay.status == 'pause'){",
                    "                    clearInterval(play);",
                    "                }",
                    "                setImage('next');",
                    "            });",
                    "",
                    "            var header = component.getHeader();",
                    "            header.setStyle('background-color', 'black');",
                    "",
                    "        }",
                    "    }",
                    "}).show();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "slideShow",
            "designerId": "4f81ec37-6976-462c-9b54-c111bac1d9db"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "fldOpt"
                ],
                "fn": "getHideField",
                "implHandler": [
                    "var hide =(fldOpt.hidden)? true : false;",
                    "var grid = getController('Main').getListTab().getActiveTab();",
                    "if(fldOpt.hideAt === undefined) return hide;",
                    "var hides = fldOpt.hideAt.split(',');",
                    "//Category is not cloned",
                    "for(var i=0; i<hides.length; i++){",
                    "    if(grid.categoryId == hides[i]){",
                    "        hide = true;",
                    "    }",
                    "}",
                    "//hideAt 보다 hidden이 강함",
                    "if((fldOpt.hidden)) hide = true;",
                    "return hide;",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getHideField",
            "designerId": "7e06ebc7-e30a-44df-81b0-d98ace0613b3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "fldOpt"
                ],
                "fn": "getDisableField",
                "implHandler": [
                    "var disable = false;",
                    "var grid = getController('Main').getListTab().getActiveTab();",
                    "if(fldOpt.disableAt === undefined) return disable;",
                    "var disables = fldOpt.disableAt.split(',');",
                    "for(var i=0; i<disables.length; i++){",
                    "    if(grid.categoryId == disables[i]){",
                    "        disable = true;",
                    "    }",
                    "}",
                    "return disable;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getDisableField",
            "designerId": "b68b13f4-bc8c-4a55-9c77-18867a609a4a"
        }
    ]
}