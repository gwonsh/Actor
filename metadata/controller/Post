{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Post"
    },
    "configAlternates": {
        "designer|userClassName": "string"
    },
    "name": "MyController",
    "designerId": "ef4f2c73-fbf4-4679-a4b7-05e0612124aa",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|commentHeader": [
                    "target : grid",
                    ""
                ],
                "designer|params": [
                    "target",
                    "pluginName",
                    "colsList"
                ],
                "fn": "showNewPost",
                "implHandler": [
                    "if(!target){",
                    "    Ext.toast(loc.config.noCategorySelect);",
                    "    return;",
                    "}",
                    "var cId = target.categoryId;",
                    "var title = loc.upload.uploadTitle + '-' + target.title;",
                    "if(!pluginName && pluginName.trim() !== '') pluginName = currentPlugin;",
                    "var uploadForm = Ext.create(appName + '.view.UploadForm', {",
                    "    selectedIndex:-1//means not edit mode",
                    "});",
                    "/* hide basic fields if option has value 1 or true at fieldOnly */",
                    "if(target.cateOption.fieldOnly == 1 || target.cateOption.fieldOnly){",
                    "    uploadForm.hideBasicField();",
                    "}",
                    "/* save to search over from categories that have the same names under work sub categories */",
                    "if(pluginName == 'workGroup' || pluginName == 'salesGroup' || pluginName == 'projectGroup'){",
                    "    if(target.getItemId() != 'workGrid'){//to upload to sub-category of workgroup, it must be setted refer for searching later",
                    "        if(!target){",
                    "            Ext.toast(loc.work.tabNotSelected);",
                    "            return;",
                    "        }",
                    "        var inherit = target.cateOption.inherit;",
                    "        if(inherit !== undefined){",
                    "            uploadForm.setRefer(inherit);",
                    "        }",
                    "    }",
                    "}",
                    "// uploadForm.down('#customFieldCon').categoryId = target.categoryId;",
                    "getController('Post').setCustomFields(colsList, uploadForm.down('#customFieldCon'));",
                    "var uploadWin = Ext.create(appName + '.view.UploadWindow', {",
                    "    maxHeight:windowMaxHeight,",
                    "    overflowY:'auto',",
                    "    categoryId:cId,",
                    "    closeAction:'destroy',",
                    "    pluginName:pluginName,",
                    "    id:'uploadWin_' + cId,",
                    "    title:title,",
                    "    padding:10,",
                    "    bdIdxInHtmlEditor:[],",
                    "    items:[",
                    "        uploadForm",
                    "    ],",
                    "    dockedItems: [",
                    "        {",
                    "            xtype: 'container',",
                    "            flex: 1,",
                    "            dock: 'bottom',",
                    "            itemId: 'buttonCon',",
                    "            margin: '20 0 0 0',",
                    "            padding:'15 0 30 0',",
                    "            style:'border-top:3px solid #bebebe',",
                    "            layout: {",
                    "                type: 'hbox',",
                    "                align: 'middle',",
                    "                pack: 'center'",
                    "            },",
                    "            items: [",
                    "                {",
                    "                    xtype: 'button',",
                    "                    itemId: 'btnSubmit',",
                    "                    glyph:'xf093@FontAwesome',",
                    "                    bind: {",
                    "                        text: '{submit}'",
                    "                    },",
                    "                    handler:function(button){",
                    "                        var workCtr = getController('Work');",
                    "                        if(pluginName == 'workGroup' || pluginName == 'salesGroup' || pluginName == 'projectGroup'){//create sub-categories automatically - report, output, service",
                    "                            if(target.getItemId() == 'workGrid'){",
                    "                                var title = uploadWin.down('form').down('#fdSubject').getValue();//it will be the category name for each activate",
                    "                                workCtr.createNewActivity(uploadWin, title);",
                    "                            }",
                    "                            else{",
                    "                                getController('Post').showUploadStatus(uploadWin, true);",
                    "                            }",
                    "                        }",
                    "                        else if(pluginName == 'taskGroup'){",
                    "                            workCtr.createSubcategory(uploadWin, cId);",
                    "                        }",
                    "                        else{",
                    "                            getController('Post').showUploadStatus(uploadWin, true);",
                    "                            uploadWin.fireEvent('uploadbuttonclick', 'new');",
                    "                        }",
                    "                    }",
                    "                },",
                    "                {",
                    "                    xtype: 'button',",
                    "                    itemId: 'btnReset',",
                    "                    margin: '0 0 0 10',",
                    "                    glyph:'xf021@FontAwesome',",
                    "                    bind: {",
                    "                        text: '{reset}'",
                    "                    },",
                    "                    listeners:{",
                    "                        click:function(button){",
                    "                            getController('Post').resetUploadForm(uploadWin);",
                    "                        }",
                    "                    }",
                    "                },",
                    "                {",
                    "                    xtype: 'container',",
                    "                    itemId: 'plButtons',",
                    "                    layout: {",
                    "                        type: 'hbox',",
                    "                        align: 'stretch',",
                    "                        padding: '0 0 0 10'",
                    "                    },",
                    "                    items: [",
                    "                        {",
                    "                            xtype: 'button',",
                    "                            itemId: 'pickfiles',",
                    "                            bind: {",
                    "                                text: '{addFile}'",
                    "                            },",
                    "                            listeners:{",
                    "                                afterrender:function(component){",
                    "                                    getController('Post').onPickfilesAfterRender(component);",
                    "                                }",
                    "                            }",
                    "                        }",
                    "                    ]",
                    "                },",
                    "                {",
                    "                    xtype: 'button',",
                    "                    itemId: 'btnCancel',",
                    "                    margin: '0 0 0 10',",
                    "                    glyph:'xf00d@FontAwesome',",
                    "                    bind: {",
                    "                        text: '{cancel}'",
                    "                    },",
                    "                    listeners: {",
                    "                        click: function(button){",
                    "                            //remove uploaded files in htmleditor when cancel uploading",
                    "                            var bdIdxs = button.up('window').bdIdxInHtmlEditor;",
                    "                            if(bdIdxs.length > 0){",
                    "                                var idxs = bdIdxs.join();",
                    "                                Ext.data.JsonP.request({",
                    "                                    url:domain + '/json/delete?bd_idx=' + idxs",
                    "                                });",
                    "                            }",
                    "                            button.up('window').close();",
                    "                        }",
                    "                    }",
                    "                }",
                    "            ]",
                    "        }",
                    "    ]",
                    "});",
                    "// }",
                    "uploadWin.setMaxHeight(windowMaxHeight);",
                    "uploadWin.setTarget(target);",
                    "uploadWin.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code",
                "designer|commentHeader": "comment"
            },
            "name": "showNewPost",
            "designerId": "935e0fab-4ba2-4900-b92c-bd204d159de0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "serverData",
                    "title",
                    "target",
                    "pluginName"
                ],
                "fn": "editPost",
                "implHandler": [
                    "var currentRecord = getController('Main').getMainView().getViewModel().get('currentRecord');",
                    "var binderBean = serverData.binderBean;",
                    "var colsList = serverData.categoryColsList;",
                    "var me = this;",
                    "var cId;",
                    "var mainCtr = getController('Main');",
                    "var viewer = Ext.getCmp('viewPanel').down('viewer');",
                    "if(!target && target !== '') target = getController('Main').getListTab().getActiveTab();",
                    "if(!pluginName) pluginName = currentPlugin;",
                    "/* row index of grid */",
                    "var selectedIndex;",
                    "if(pluginName == 'workGroup' || pluginName == 'salesGroup' || pluginName == 'projectGroup'){",
                    "    selectedIndex = mainCtr.getMainView().down('#workListPanel').selectedIndex;",
                    "    cId = target.categoryId;",
                    "}",
                    "else if(pluginName == 'taskGroup'){",
                    "    selectedIndex = mainCtr.getMainView().down('#southPanel').down('grid').getStore().indexOf(currentRecord);",
                    "    cId = target.categoryId;",
                    "}",
                    "else{",
                    "    if(!currentRecord){",
                    "        Ext.toast(loc.upload.noneSelected);",
                    "        return;",
                    "    }",
                    "    else{",
                    "        cId = currentRecord.get('ca_id');",
                    "    }",
                    "    selectedIndex = viewer.gridIndex;",
                    "}",
                    "var bdSubject, bdContent, bdColortag, bdRefer, bdReceiver, bdReader, bdIdx, bdFile;",
                    "if(binderBean){",
                    "    bdSubject = binderBean.bd_subject;",
                    "    bdContent = binderBean.bd_content;",
                    "    bdColortag = binderBean.bd_colortag;",
                    "    bdRefer = binderBean.bd_refer;",
                    "    bdReceiver = binderBean.bd_receiver;",
                    "    bdReader = binderBean.bd_reader;",
                    "    bdIdx = binderBean.bd_idx;",
                    "    bdFile = binderBean.bd_file;",
                    "}",
                    "else{",
                    "    if(!viewer){",
                    "        Ext.MessageBox.alert(loc.main.notice, loc.upload.noneSelected);",
                    "        return;",
                    "    }",
                    "    var selected = viewer.info;",
                    "    bdSubject = selected.bd_subject;",
                    "    bdContent = selected.bd_content;",
                    "    bdColortag = selected.bd_colortag;",
                    "    bdRefer = selected.bd_refer;",
                    "    bdReceiever = selected.bd_receiever;",
                    "    bdReader = selected.bd_reader;",
                    "    bdIdx = selected.bd_idx;",
                    "    bdFile = selected.bd_file;",
                    "}",
                    "",
                    "/* new request form */",
                    "var uploadForm = Ext.create(appName + '.view.UploadForm', {",
                    "    isEditMode:true,",
                    "    id:'uploadForm',",
                    "    closeAction:'destroy',",
                    "    selectedIndex:selectedIndex,",
                    "    listeners:[",
                    "        {",
                    "            afterrender:function(component){",
                    "                var headTitle;",
                    "                if(!title){",
                    "                    headTitle = Ext.getCmp('categoryTree').selectedTitle + ' ' + loc.upload.uploadTitleInEdit;",
                    "                }",
                    "                else{",
                    "                    headTitle = title;",
                    "                }",
                    "                uploadForm.up('window').getHeader().setTitle(headTitle);",
                    "                uploadForm.setSubject(bdSubject);",
                    "                uploadForm.setRemark(bdContent);",
                    "                uploadForm.setColortag(bdColortag);",
                    "                uploadForm.setRefer(bdRefer);",
                    "                uploadForm.setReceiver(bdReceiver);",
                    "                uploadForm.setReader(bdReader);",
                    "                var hiddenIdx = uploadForm.down('#bdIdx');",
                    "                /* set parameter by hidden field */",
                    "                hiddenIdx.setValue(bdIdx);",
                    "",
                    "                /* get file info */",
                    "                var files = bdFile;",
                    "                if(files && files.length > 0){",
                    "                    component.down('#attachCon').setHidden(false);",
                    "                    var extCon = uploadForm.down('#existFilesCon');",
                    "                    /* show title of exists file container */",
                    "                    uploadForm.down('#titleExistFile').setHidden(false);",
                    "                    extCon.setHidden(false);",
                    "                    var html = '';",
                    "",
                    "                    Ext.Array.each(files, function(entry, index){",
                    "                        var fid = 'existfile_'+entry.file_no;",
                    "                        var fIdx = entry.file_idx;",
                    "                        var tPath =  entry.thumb_path;",
                    "                        var com = component;",
                    "                        var formId = 'editRequestWin_' + cId;",
                    "                        var tmpArr = entry.file_name.split('.');",
                    "                        var ext = tmpArr[tmpArr.length -1];",
                    "                        if(!Ext.isIE) tPath += '/T?c=' + randomString(16);",
                    "                        html += '<div id=\"'+fid+'\" fileidx=\"'+fIdx+'\" style=\"float:left;height:40px;border:1px solid #cccccc;margin:3px;border-radius:3px;vertical-align:middle;padding:3px\">';",
                    "                        html += '\t<div ext=\"'+ext+'\" src=\"'+entry.file_path+'\" style=\"float:left;width:40px;height:100%;background-image:url('+ tPath +');background-size:contain;';",
                    "                        html += '\tbackground-repeat:no-repeat;background-position:center\" class=\"center-image fileUnit\"></div>';",
                    "                        html += '\t<div style=\"padding:10px 0 3px 0;color:#555555;float:left;font-size:11px\">'+entry.file_name+'</div>';",
                    "                        html += '\t<i class=\"fa fa-minus-square\" onclick=\"getController(\\'Post\\').delAttachedFile(document.getElementById(\\''+fid+'\\'), \\''+formId+'\\')\"';",
                    "                        html += ' \tstyle=\"float:right;cursor:pointer\" ></i>';",
                    "                        html += '</div>';",
                    "                    });",
                    "                    extCon.setHtml(html);",
                    "                    extCon.attachedfileLength = files.length;",
                    "                    extCon.delEntry = [];",
                    "                }",
                    "            }",
                    "        }",
                    "    ]",
                    "});",
                    "",
                    "/* hide basic fields if option has value 1 or true at fieldOnly */",
                    "if(target.cateOption.fieldOnly == 1 || target.cateOption.fieldOnly == 'true'){",
                    "    uploadForm.hideBasicField();",
                    "}",
                    "// uploadForm.down('#customFieldCon').categoryId = cId;",
                    "// if(mainCtr.getListTab().getActiveTab().cloneCategory !== undefined){//in case cloneCategory",
                    "//     uploadForm.down('#customFieldCon').realCategory = target.categoryId;",
                    "// }",
                    "me.setCustomFields(colsList, uploadForm.down('#customFieldCon'), true);",
                    "/* parent window of new request form */",
                    "var uploadWin = Ext.create(appName + '.view.UploadWindow', {",
                    "    maxHeight:windowMaxHeight,",
                    "    overflowY:'auto',",
                    "    closeAction:'destroy',",
                    "    pluginName:pluginName,",
                    "    padding:10,",
                    "    id:'editRequestWin_' + cId,",
                    "    categoryId:cId,",
                    "    items:[",
                    "        uploadForm",
                    "    ],",
                    "    bdIdxInHtmlEditor:[],",
                    "    dockedItems: [",
                    "        {",
                    "            xtype: 'container',",
                    "            flex: 1,",
                    "            dock: 'bottom',",
                    "            itemId: 'buttonCon',",
                    "            margin: '20 0 0 0',",
                    "            padding:'15 0 30 0',",
                    "            style:'border-top:3px solid #bebebe',",
                    "            layout: {",
                    "                type: 'hbox',",
                    "                align: 'middle',",
                    "                pack: 'center'",
                    "            },",
                    "            items: [",
                    "                {",
                    "                    xtype:'checkbox',",
                    "                    itemId:'saveHistory',",
                    "                    boxLabel:loc.upload.saveHistory,",
                    "                    style:'margin-right:10px',",
                    "                    value:false,",
                    "                    hidden:true",
                    "                },",
                    "                {",
                    "                    xtype: 'button',",
                    "                    itemId: 'btnSubmit',",
                    "                    style:'margin-right:10px',",
                    "                    glyph:'xf093@FontAwesome',",
                    "                    text:loc.upload.edit,",
                    "                    handler:function(button){",
                    "                        me.showUploadStatus(uploadWin, true);",
                    "                        uploadWin.fireEvent('uploadbuttonclick', 'edit');",
                    "                    },",
                    "                    listeners:{",
                    "                        render:function(button){",
                    "                            if(getController('Main').getMainView().getController().getActiveTab().categoryInfo.ca_history == 1){",
                    "                                button.setHidden(true);",
                    "                            }",
                    "                        }",
                    "                    }",
                    "                },",
                    "                {",
                    "                    xtype: 'button',",
                    "                    itemId: 'btnSubmitWithHistory',",
                    "                    glyph:'xf1da@FontAwesome',",
                    "                    tooltip:loc.upload.savedAsUpdatedList,",
                    "                    handler:function(button){",
                    "                        //save with history",
                    "                        button.up('#buttonCon').down('#saveHistory').setValue(true);",
                    "                        me.showUploadStatus(uploadWin, true);",
                    "                        uploadWin.fireEvent('uploadbuttonclick', 'edit');",
                    "",
                    "                    },",
                    "                    listeners:{",
                    "                        render:function(button){",
                    "                            button.setText(loc.upload.saveHistory);",
                    "                        }",
                    "                    }",
                    "",
                    "                },",
                    "                {",
                    "                    xtype: 'button',",
                    "                    itemId: 'btnReset',",
                    "                    margin: '0 0 0 10',",
                    "                    glyph:'xf021@FontAwesome',",
                    "                    bind: {",
                    "                        text: '{reset}'",
                    "                    },",
                    "                    listeners:{",
                    "                        click:function(){",
                    "                            var uploadForm= Ext.getCmp('uploadForm');",
                    "                            uploadForm.reset();",
                    "                            var dsetGrid = Ext.ComponentQuery.query('datasetgridbox uploadform');",
                    "                            //if dataset field exists, reset dataset fields",
                    "                            Ext.Array.each(dsetGrid, function(item){",
                    "                                var store = item.getStore();",
                    "                                if(store.getData().items.length> 0){",
                    "                                    var obj = store.getData().items[0].data;",
                    "                                    var nData = {};",
                    "                                    Ext.Object.each(obj, function(key, value){",
                    "                                        if(key !== 'id'){",
                    "                                            nData[key] = '';",
                    "                                        }",
                    "                                        if(key == 'cols_info'){",
                    "                                            nData[key] = value;",
                    "                                        }",
                    "                                    });",
                    "                                    store.removeAll();",
                    "                                    store.add(nData);",
                    "                                }",
                    "                            });",
                    "                            /* Reset attachment */",
                    "                            //reset file entry in plupload",
                    "                            var uploader = uploadForm.uploader;",
                    "                            if(uploader) uploader.files = [];",
                    "                            //remove all attachunit",
                    "                            var fileList = uploadForm.down('#fileList');",
                    "                            fileList.removeAll();",
                    "                            //hide the text that 'how to remove'",
                    "                            var htr = uploadForm.down('#howToRemove');",
                    "                            htr.setHidden(true);",
                    "                        }",
                    "                    }",
                    "                },",
                    "                {",
                    "                    xtype: 'container',",
                    "                    itemId: 'plButtons',",
                    "                    layout: {",
                    "                        type: 'hbox',",
                    "                        align: 'stretch',",
                    "                        padding: '0 0 0 10'",
                    "                    },",
                    "                    items: [",
                    "                        {",
                    "                            xtype: 'button',",
                    "                            itemId: 'pickfiles',",
                    "                            bind: {",
                    "                                text: '{addFile}'",
                    "                            },",
                    "                            listeners:{",
                    "                                afterrender:function(component){",
                    "                                    me.onPickfilesAfterRender(component);",
                    "                                }",
                    "                            }",
                    "                        }",
                    "                    ]",
                    "                },",
                    "                {",
                    "                    xtype: 'button',",
                    "                    itemId: 'btnCancel',",
                    "                    margin: '0 0 0 10',",
                    "                    glyph:'xf00d@FontAwesome',",
                    "                    bind: {",
                    "                        text: '{cancel}'",
                    "                    },",
                    "                    listeners: {",
                    "                        click: function(button){",
                    "                            //remove uploaded files in htmleditor when cancel uploading",
                    "                            var bdIdxs = button.up('window').bdIdxInHtmlEditor;",
                    "                            if(bdIdxs.length > 0){",
                    "                                var idxs = bdIdxs.join();",
                    "                                Ext.data.JsonP.request({",
                    "                                    url:domain + '/json/delete?bd_idx=' + idxs",
                    "                                });",
                    "                            }",
                    "                            uploadWin.close();",
                    "                        }",
                    "                    }",
                    "                }",
                    "            ]",
                    "        }",
                    "    ]",
                    "});",
                    "uploadWin.add(uploadForm);",
                    "uploadWin.setMaxHeight(windowMaxHeight);",
                    "uploadWin.setTarget(target);",
                    "uploadWin.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "editPost",
            "designerId": "322721fe-a064-4334-bb44-14a2b9848457"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|commentHeader": [
                    ""
                ],
                "designer|params": [
                    "colsList",
                    "target",
                    "isEditMode"
                ],
                "fn": "setCustomFields",
                "implHandler": [
                    "var me = this;",
                    "var i, j;",
                    "/* check if number of contact field is over because it can be configured only one */",
                    "var contacts = 0;",
                    "Ext.Array.each(colsList, function(entry, index){",
                    "    var option = getOption(entry.cols_option);",
                    "    var geRecOpt = {}, geValOpt = {};",
                    "    var preVal = entry.data_val;",
                    "    /* current value incase of update(Edit) mode */",
                    "    /* kind of text fields for automation */",
                    "    var txtFields = ['text', 'url', 'textarea'];",
                    "    var colsIdx = entry.cols_idx.toString();",
                    "    var colsType = entry.cols_type;",
                    "    var colsCode = entry.cols_code;",
                    "",
                    "    /* make upload parameter with cols_idx */",
                    "    var isHidden = false, isDisable = false;",
                    "    if(colsIdx.length == 1){",
                    "        colsIdx = '000' + colsIdx;",
                    "    }",
                    "    if(colsIdx.length == 2){",
                    "        colsIdx = '00' + colsIdx;",
                    "    }",
                    "    if(colsIdx.length == 3){",
                    "        colsIdx = '0' + colsIdx;",
                    "    }",
                    "    var fIdx = 'data_' + colsIdx;",
                    "    /* itemid for each field */",
                    "    var iId = 'iid' + fIdx;",
                    "    var fReadOnly = false;",
                    "    if(colsCode !== '' && colsCode != 'readOnly' ){",
                    "        fIdx = colsCode;",
                    "        iId = colsCode;",
                    "    }",
                    "    if(colsCode == 'readOnly' || option.readOnly) fReadOnly = true;",
                    "",
                    "    isHidden = getController('Viewer').getHideField(option);",
                    "    isDisable = getController('Viewer').getDisableField(option);",
                    "",
                    "    /* name of field to upload form */",
                    "    var fName = entry.cols_name;",
                    "    if(colsCode == 'image'){",
                    "        fName = fName + loc.upload.imageURL;",
                    "    }",
                    "",
                    "    if(option.getRecord !== undefined && option.getRcord !== ''){",
                    "        geRecOpt.connectCategory = option.getRecord.split('>')[0];",
                    "        geRecOpt.fieldId = option.getRecord.split('>')[1];",
                    "    }",
                    "    else{",
                    "        geRecOpt = undefined;",
                    "    }",
                    "    if(option.getValue !== undefined && option.getValue !== ''){",
                    "        geValOpt.connectCategory = option.getValue.split('>')[0];",
                    "        geValOpt.fieldId = option.getValue.split('>')[1];",
                    "    }",
                    "    else{",
                    "        geValOpt = undefined;",
                    "    }",
                    "",
                    "    //in case of sharing loaded record",
                    "    var fld = {",
                    "        xtype: 'textfield',",
                    "        labelAlign:'top',",
                    "        flex:1,",
                    "        hidden:isHidden,",
                    "        disabled:isDisable,",
                    "        readOnly:fReadOnly,",
                    "        fieldLabel: fName,",
                    "        name: fIdx,",
                    "        itemId:iId,",
                    "        value:preVal",
                    "    };",
                    "    var fldCon = fld;",
                    "    //for normal custom fields",
                    "    if(Ext.Array.contains(txtFields, colsType)){",
                    "        if(fReadOnly) hideIt = true;",
                    "        if(colsType == 'textarea'){",
                    "            /* field for textarea */",
                    "            if(colsType == 'textarea' && colsCode != 'checkedby'){",
                    "                fldCon.xtype = 'htmleditor';",
                    "                fldCon.height = 170;",
                    "                fldCon.referenceHolder = true;",
                    "                fldCon.labelWidth = 0;",
                    "                fldCon.enableFont = false;",
                    "            }",
                    "        }",
                    "        if(colsCode == 'contact'){",
                    "            contacts ++;",
                    "            if(contacts > 1){",
                    "                alert(loc.error.overContactFields);",
                    "                return;",
                    "            }",
                    "            /* to do not show the field that cols_code is \"contact\" */",
                    "            /* in case of cols_code is \"contact\", create a field that will be really submitted  */",
                    "            var fldContact = fld;",
                    "            fldContact.itemId = iId + '_clone';",
                    "            fldContact.fieldLabel = fName + loc.upload.readOnly;",
                    "            fldContact.readOnly = true;",
                    "            fldContact.submitValue = false;",
                    "            fldContact.value = preVal;",
                    "            fldContact.name ='contact_clone';",
                    "            fldCon = {",
                    "                xtype:'container',",
                    "                flex:1,",
                    "                itemId:iId + '_clone',",
                    "                cls:'requestform-space',",
                    "                layout:{",
                    "                    type:'hbox',",
                    "                    align:'bottom'",
                    "                },",
                    "                items:[",
                    "                    fldContact",
                    "                ]",
                    "            };",
                    "            if(isEditMode) fldContact.value = preVal.split('||')[0];",
                    "        }",
                    "        if(colsCode == 'linked'){//for setting the linked category in workgroup",
                    "            if(currentPlugin !== ''){",
                    "                fld.readOnly = true;",
                    "                fld.fieldLabel = fName + '(' + loc.upload.readOnly + ')';",
                    "                fldCon = {",
                    "                    xtype:'container',",
                    "                    flex:1,",
                    "                    cls:'requestform-space',",
                    "                    layout:{",
                    "                        type:'hbox',",
                    "                        align:'bottom'",
                    "                    },",
                    "                    items:[",
                    "                        fld,",
                    "                        {// button to browse datagroup category",
                    "                            xtype:'button',",
                    "                            width:25,",
                    "                            height:25,",
                    "                            ui:'plain-toolbar-small',",
                    "                            glyph:'xf114@FontAwesome',",
                    "                            handler:function(button){",
                    "                                me.setLikedCategory(button.up('container').down('textfield'));",
                    "                            }",
                    "                        }",
                    "                    ]",
                    "                };",
                    "            }",
                    "        }",
                    "        else if(colsCode == 'getColors'){",
                    "            fld.hidden = true;",
                    "            fldCon = {",
                    "                xtype:'container',",
                    "                width:'100%',",
                    "                items:[",
                    "                    fld,",
                    "                    {",
                    "                        xtype:'container',",
                    "                        layout:'column',",
                    "                        itemId:'colorsCon',",
                    "                        listeners:{",
                    "                            render:function(comp){",
                    "                                if(isEditMode){",
                    "                                    if(Ext.isArray(eval(preVal))) getController('Config').getColorChips(eval(preVal), comp);",
                    "                                }",
                    "                            }",
                    "                        }",
                    "                    }",
                    "                ],",
                    "            };",
                    "        }",
                    "        else if(colsCode == 'percent' || option.render == 'percent'){",
                    "            fldCon.xtype = 'numberfield';",
                    "            fldCon.fieldLabel = fName + '(' + loc.upload.numericOnly + ')';",
                    "            fldCon.decimalPrecision = 5;",
                    "            fldCon.format = '0.#####';",
                    "        }",
                    "        else if(colsCode == 'colorHex' || option.render === 'colorHex'){",
                    "            var cBoxColor;",
                    "            var cBoxTxt = '<span style=\"margin-left:10px\">' + loc.main.typeHex + '</span>';",
                    "            if(preVal.indexOf('#') == -1) preVal = '#' + preVal;",
                    "            if(isEditMode){",
                    "                cBoxColor = 'cursor:pointer;background-color:' + preVal;",
                    "                if(preVal.trim() !== '') cBoxTxt = '';",
                    "            }",
                    "            else{",
                    "                cBoxColor = 'cursor:pointer;border: 1px solid #cecece;line-height:25px;text-align:center';",
                    "            }",
                    "            fld.width = '80%';",
                    "            fld.bind = {",
                    "                value:'{hex}'",
                    "            };",
                    "            fld.listeners = {",
                    "                render:function(field){",
                    "                    field.el.on({",
                    "                        keyup:function(){",
                    "                            var target = field.up('container').down('#colorBox');",
                    "                            target.setStyle({'cursor:pointer;background-color':field.getValue()});",
                    "                        }",
                    "                    });",
                    "                    if(preVal.indexOf('#') == -1) preVal = '#' + preVal;",
                    "                    if(isEditMode) field.up('window').getViewModel().setData({hex:preVal});",
                    "                },",
                    "                change:function(field){//check if rgb field has been configured then automatically input in",
                    "                    var value = field.getValue();",
                    "                    if(value.charAt(0) != '#'){",
                    "                        value = '#' + value;",
                    "                    }",
                    "                    var isHex = getController('Util').isHex(value);",
                    "                    var rawVal = value.replace('#' , '');",
                    "                    if(rawVal.length < 6){",
                    "                        return;",
                    "                    }",
                    "                    //check if number of length is over than 6",
                    "                    if(rawVal.length > 6) value = field.setValue(value.replace(value.charAt(value.length - 1), ''));",
                    "                    if(!isHex && rawVal !== ''){//check if hex value is valid",
                    "                        Ext.toast(loc.error.unknwonColor + ' \"' + value + '\"');",
                    "                        field.focus();",
                    "                        return;",
                    "                    }",
                    "                    var container = field.up('form');",
                    "                    var rVal, gVal, bVal;",
                    "                    var win = field.up('window');",
                    "                    if(value.trim() !== '#'){",
                    "                        rVal = chroma(value).rgb()[0];",
                    "                        gVal = chroma(value).rgb()[1];",
                    "                        bVal = chroma(value).rgb()[2];",
                    "                    }",
                    "                    else{",
                    "                        rVal = '';",
                    "                        gVal = '';",
                    "                        bVal = '';",
                    "",
                    "                    }",
                    "                    win.getViewModel().setData({",
                    "                        r:rVal,",
                    "                        g:gVal,",
                    "                        b:bVal,",
                    "                        hex:value",
                    "                    });",
                    "                    //set value to hidden field",
                    "                    if(target.down('#luminance')){",
                    "                        var lumi = chroma(value).luminance();",
                    "                        var temp = chroma(value).temperature();",
                    "                        target.down('#luminance').setValue(lumi);",
                    "                        target.down('#temperature').setValue(temp);",
                    "                    }",
                    "                }",
                    "            };",
                    "            fldCon = {",
                    "                xtype:'container',",
                    "                flex:1,",
                    "                cls:'requestform-space',",
                    "                layout:{",
                    "                    type:'hbox',",
                    "                    align:'bottom'",
                    "                },",
                    "                items:[",
                    "                    fld,",
                    "                    {",
                    "                        xtype:'component',//button like cameleon",
                    "                        itemId:'colorBox',",
                    "                        height:32,",
                    "                        width:'20%',",
                    "                        style:cBoxColor,",
                    "                        html:cBoxTxt,",
                    "                        listeners:{",
                    "                            afterrender:function(comp){",
                    "                                comp.el.on('click', function(){",
                    "                                    var coVal = comp.up('container').down('textfield').getValue();",
                    "                                    if(!getController('Util').isHex(coVal)) coVal = '#000000';",
                    "                                    var picker = Ext.create('Ext.ux.colorpick.Selector', {",
                    "                                        value: coVal,  // initial selected color",
                    "                                        listeners: {",
                    "                                            change: function (colorselector, color) {",
                    "                                                comp.up('container').down('textfield').setValue('#' + color);",
                    "                                                comp.setStyle({'background-color':'#' + color, cursor:'pointer'});",
                    "                                            }",
                    "                                        }",
                    "                                    });",
                    "                                    Ext.create('Ext.window.Window', {",
                    "                                        items:[picker],",
                    "                                        title:'Color picker',",
                    "                                        modal:true,",
                    "                                        id:'colorPicker'",
                    "                                    }).show();",
                    "                                });",
                    "                            }",
                    "                        }",
                    "                    }",
                    "                ]",
                    "",
                    "            };",
                    "        }",
                    "    }",
                    "    else{",
                    "        if(colsType== 'number'){",
                    "            //if hexCode configured and rgb fields exist, create container for each rgb field in one line",
                    "            if(colsCode == 'rgb_r' || colsCode == 'rgb_g' || colsCode == 'rgb_b'){",
                    "                var rgbVal;",
                    "                if(colsCode == 'rgb_r') rgbVal = '{r}';",
                    "                if(colsCode == 'rgb_g') rgbVal = '{g}';",
                    "                if(colsCode == 'rgb_b') rgbVal = '{b}';",
                    "                fldCon = target.down('#rgbCon');",
                    "                fld.xtype = 'numberfield';",
                    "                fld.fieldLabel = fName + '(' + loc.upload.numericOnly + ')';",
                    "                fld.flex = 1;",
                    "                fld.bind = {",
                    "                    value:rgbVal",
                    "                };",
                    "                fld.listeners = {",
                    "                    blur:function(field){",
                    "                        var rVal = field.up('#rgbCon').down('#rgb_r').getValue();",
                    "                        var gVal = field.up('#rgbCon').down('#rgb_g').getValue();",
                    "                        var bVal = field.up('#rgbCon').down('#rgb_b').getValue();",
                    "                        if(rVal !== null && gVal !== null && bVal !== null){",
                    "                            var win = field.up('window');",
                    "                            var hexVal = chroma([rVal, gVal, bVal]);",
                    "                            win.getViewModel().setData({",
                    "                                hex:hexVal",
                    "                            });",
                    "                        }",
                    "                    }",
                    "                };",
                    "                if(fldCon === null){",
                    "                    fldCon = {",
                    "                        xtype:'container',",
                    "                        layout:'hbox',",
                    "                        itemId:'rgbCon',",
                    "                        items:[",
                    "                            fld",
                    "                        ]",
                    "                    };",
                    "                }",
                    "                else{",
                    "                    fldCon.add(fld);",
                    "                }",
                    "            }",
                    "            else{//for normal number field",
                    "                fldCon.xtype = 'numberfield';",
                    "                fldCon.fieldLabel = fName + '(' + loc.upload.numericOnly + ')';",
                    "            }",
                    "        }",
                    "        if(colsType == 'dbtext'){",
                    "            fldCon.xtype = 'combobox';",
                    "            fldCon.store = [];",
                    "            fldCon.enableKeyEvents = true;",
                    "            fldCon.emptyText = loc.upload.autoText;",
                    "            fldCon.listeners = [",
                    "                {",
                    "                    keyup:function(field, e){",
                    "                        me.getDbtextValue(field, e, colsIdx);",
                    "                    }",
                    "                }",
                    "            ];",
                    "        }",
                    "        /* field for auto numbering field */",
                    "        if(colsType == 'idx'){",
                    "            var ifdHidden = true;",
                    "            if(isEditMode){",
                    "                ifdHidden = false;",
                    "            }",
                    "            fldCon.itemId = 'indexKey';",
                    "            fldCon.hidden = ifdHidden;",
                    "            if(option.autoNumberNameField !== undefined){",
                    "                fldCon.autoNumberNameField = option.autoNumberNameField;",
                    "            }",
                    "        }",
                    "        /* field for color */",
                    "        if(colsType == 'color' || colsType == 'color256'){",
                    "            fldCon.hidden = true;",
                    "        }",
                    "        /* field for select */",
                    "        if(colsType == 'select'){",
                    "            var sltData = entry.cols_data;",
                    "            if(option.fromMember){//프로젝트 구성원 중에서 선택 해야 하는 경우 구성원을 불러와 셀렉트박스에 표시",
                    "                var tabs = getController('Main').getListTab().items.items;",
                    "                var members = [];",
                    "                for(var t=1; t<tabs.length; t++){",
                    "                    if(tabs[t].isMember){",
                    "                        tabs[t].getStore().each(function(record){",
                    "                            members.push(record.get('iduserName'));",
                    "                        });",
                    "                    }",
                    "                }",
                    "                if(members.length > 0) sltData = members;",
                    "            }",
                    "            fldCon.xtype = 'combobox';",
                    "            fldCon.minWidth = 220;",
                    "            fldCon.autoFitErros = false;",
                    "            fldCon.autoSelect = false;",
                    "            fldCon.store = sltData;",
                    "        }",
                    "        /* field for date */",
                    "        if(colsType == 'date'){",
                    "            var daFormat = (localLanguage == 'English')?  'm-d-Y' : 'Y-m-d';",
                    "            preVal = preVal.slice(0, 10);",
                    "            fldCon.xtype = 'datefield';",
                    "            fldCon.width = 128;",
                    "            fldCon.submitFormat = daFormat;",
                    "            fldCon.submitValue = true;",
                    "        }",
                    "        if(colsType == 'radio'){",
                    "            fldCon = Ext.create('Ext.container.Container', {",
                    "                cls:'requestform-space',",
                    "                hidden:isHidden,",
                    "                disabled:isDisable",
                    "            });",
                    "            var rdoData = entry.cols_data;",
                    "            var rg = Ext.create('Ext.form.RadioGroup', {",
                    "                layout:'anchor',",
                    "                fieldLabel: fName,",
                    "                vertical:true,",
                    "                width: '100%',",
                    "                hidden:isHidden,",
                    "                disabled:isDisable",
                    "            });",
                    "            for(i=0; i<rdoData.length; i++){",
                    "                var val = false;",
                    "                if(rdoData[i] == preVal && isEditMode){",
                    "                    val = true;",
                    "                }",
                    "                if(rdoData[i] == preVal){",
                    "                    val = true;",
                    "                }",
                    "                var rdo = {",
                    "                    boxLabel:rdoData[i],",
                    "                    name:fIdx,",
                    "                    style:'float:left',",
                    "                    margin:'0 10 0 0',",
                    "                    readOnly:fReadOnly ,",
                    "                    inputValue:rdoData[i],",
                    "                    value:val",
                    "                };",
                    "                rg.add(rdo);",
                    "            }",
                    "            fldCon.add(rg);",
                    "        }",
                    "        /* field for checkbox */",
                    "        if(colsType == 'check'){",
                    "            fldCon = Ext.create('Ext.container.Container', {",
                    "                width:'100%',",
                    "                cls:'requestform-space',",
                    "                hidden:isHidden,",
                    "                disabled:isDisable",
                    "            });",
                    "            var chkData = entry.cols_data;",
                    "",
                    "            var cg = Ext.create('Ext.form.CheckboxGroup', {",
                    "                fieldLabel: fName,",
                    "                layout:'column',",
                    "                labelAlign:'top',",
                    "                hidden:isHidden,",
                    "                width: '100%'",
                    "            });",
                    "            for(i=0; i<chkData.length; i++){",
                    "                var chkItem = chkData[i].trim();",
                    "                var chkVal = false;",
                    "                var cbArr = preVal.split(',');",
                    "                for(j=0; j<cbArr.length; j++){",
                    "                    cbArr[j] = cbArr[j].trim();",
                    "                }",
                    "                if(Ext.Array.contains(cbArr, chkItem) && isEditMode) chkVal = true;",
                    "                if(!isEditMode && chkItem == preVal) chkVal = true;",
                    "                var chk = {",
                    "                    boxLabel:chkItem,",
                    "                    name:fIdx,",
                    "                    readOnly:fReadOnly,",
                    "                    margin:'0 10 0 0',",
                    "                    inputValue:chkItem,",
                    "                    value:chkVal",
                    "                };",
                    "                cg.add(chk);",
                    "",
                    "            }",
                    "            fldCon.add(cg);",
                    "        }",
                    "        /* field for colorchk */",
                    "        if(colsType == 'colorchk'){",
                    "            fldCon = Ext.create('Ext.container.Container', {",
                    "                width:'100%',",
                    "                cls:'requestform-space',",
                    "                hidden:isHidden,",
                    "                disabled:isDisable",
                    "            });",
                    "            var cCData = entry.cols_data;",
                    "",
                    "            var ccg = Ext.create('Ext.form.CheckboxGroup', {",
                    "                fieldLabel: fName,",
                    "                layout:'column',",
                    "                labelAlign:'top',",
                    "                width: '100%'",
                    "            });",
                    "            for(i=0; i<cCData.length; i++){",
                    "                var ccVal = false;",
                    "                var ccItem = cCData[i][2];",
                    "                if(isEditMode){",
                    "                    var preArr = preVal.split(',');",
                    "                    for(j=0; j<preArr.length; j++){",
                    "                        preArr[j] = preArr[j].trim();",
                    "                    }",
                    "                    if(Ext.Array.contains(preArr, ccItem) && isEditMode) ccVal = true;",
                    "                }",
                    "                var cChk = Ext.create('Ext.form.field.Checkbox', {",
                    "                    name:fIdx,",
                    "                    margin:'0 10 0 0',",
                    "                    inputValue:ccItem,",
                    "                    boxLabel:ccItem.split('||')[1],",
                    "                    readOnly:fReadOnly,",
                    "                    value:ccVal,",
                    "                    beforeLabelTpl :[",
                    "                        '<div style=\"float:left;width:14px;height:15px;margin-top:8px;background-color:'+ccItem.split('||')[0]+'\"></div>'",
                    "                    ]",
                    "                });",
                    "                ccg.add(cChk);",
                    "            }",
                    "            fldCon.add(ccg);",
                    "",
                    "        }",
                    "        /* field for dbgroup field */",
                    "        if(colsType == 'datagrp'){",
                    "            fldCon = Ext.create('Ext.container.Container', {",
                    "                layout:{",
                    "                    type:'hbox',",
                    "                    align:'bottom'",
                    "                },",
                    "                width:'100%',",
                    "                hidden:fReadOnly,",
                    "                disabled:isDisable,",
                    "                cls:'requestform-space'",
                    "            });",
                    "            var fldgrp = Ext.create('Ext.form.TextField', {",
                    "                xtype: 'textfield',",
                    "                itemId: iId,",
                    "                labelAlign:'top',",
                    "                flex:1,",
                    "                fieldLabel: fName,",
                    "                name: fIdx",
                    "            });",
                    "            /* button to browse datagroup category */",
                    "            var grpBtn = {",
                    "                xtype:'button',",
                    "                width:25,",
                    "                height:25,",
                    "                ui:'plain-toolbar-small',",
                    "                glyph:'xf114@FontAwesome',",
                    "                handler:function(button){",
                    "                    if(localLanguage == 'English'){",
                    "                        title = loc.upload.select + ' ' + fName;",
                    "                    }",
                    "                    else{",
                    "                        title = fName + ' ' + loc.upload.select;",
                    "                    }",
                    "                    var grpWin = Ext.create(appName + '.view.DataGroupWindow', {",
                    "                        itemId:fIdx,",
                    "                        title:title,",
                    "                        scrollable:true,",
                    "                        cls:'upload-form',",
                    "                        y:30,",
                    "                        maxHeight:windowMaxHeight - 30,",
                    "                        relatedCategory:entry.cols_category",
                    "                    });",
                    "                    grpWin.show();",
                    "",
                    "                    var grid = grpWin.down('#dgGrid');",
                    "                    grid.on('cellclick', function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){",
                    "                        var refer = record.get('bd_refer');",
                    "                        fldgrp.setValue(record.get('bd_subject'));",
                    "                        if(refer !== '' && refer !== null & refer !== undefined){//check if it is a taskGroup(check if connected sub exists)",
                    "                            var cGrid = grpWin.down('#connectedGrid');",
                    "                            var connectedGrid;",
                    "                            if(!cGrid){//grid for contact person list",
                    "                                connectedGrid = Ext.create('Ext.grid.Panel', {",
                    "                                    xtype: 'gridpanel',",
                    "                                    padding:'3 0 0 0',",
                    "                                    itemId: 'connectedGrid',",
                    "                                    categoryId:refer,",
                    "                                    margin:'15 0 0 0',",
                    "                                    style:'border:1px solid #cecece',",
                    "                                    flex:0.4,",
                    "                                    listeners: {",
                    "                                        itemclick:function(dataview, record, item, index, e, eOpts){",
                    "                                            if(target.up('window').down('#contact')){",
                    "                                                var value = record.get('bd_subject') + '||' + record.get('bd_idx');",
                    "                                                /* set value with contact person into inputfield automatically */",
                    "                                                target.up('window').down('#contact').setValue(value);",
                    "                                                target.up('window').down('#contact_clone').setValue(record.get('bd_subject'));",
                    "                                                grpWin.close();",
                    "                                            }",
                    "                                        }",
                    "                                    }",
                    "                                });",
                    "                                grpWin.add(connectedGrid);",
                    "                            }",
                    "                            else{",
                    "                                connectedGrid = cGrid;",
                    "                            }",
                    "                            getController('Main').getServerData(refer, 'ca_id=' + refer, connectedGrid);",
                    "                        }",
                    "                        else{",
                    "                            grpWin.close();",
                    "                        }",
                    "                    });",
                    "                }",
                    "            };",
                    "            fldgrp.setValue(preVal);",
                    "            fldCon.add(fldgrp);",
                    "            fldCon.add(grpBtn);",
                    "        }",
                    "        /* field for link */",
                    "        if(colsType == 'link'){",
                    "            fldCon = null;",
                    "            var linkLabel = {",
                    "                xtype:'label',",
                    "                text:fName,",
                    "                hidden:isHidden,",
                    "                disabled:isDisable,",
                    "                cls:'x-form-item-label-default'",
                    "            };",
                    "            var links = Ext.create(appName + '.view.LinkedData', {",
                    "                cls:'requestform-space',",
                    "                style:'padding:5px;border:1px solid #cecece',",
                    "                hidden:isHidden,",
                    "                disabled:isDisable,",
                    "                itemId:fIdx",
                    "            });",
                    "            /* container for each thumbnail and title of linked data */",
                    "            var linkUnitCon = Ext.create('Ext.container.Container', {",
                    "                flex: 1,",
                    "                itemId: fIdx + '_unitCon',",
                    "                scrollable: true,",
                    "                hidden:isHidden,",
                    "                disabled:isDisable,",
                    "                layout: 'hbox'",
                    "            });",
                    "            links.add(linkUnitCon);",
                    "            var addLnkBtn = links.down('#addLink');",
                    "            var hdnLnkFld = Ext.create('Ext.form.field.Hidden', {",
                    "                name:fIdx,",
                    "                itemId:fIdx + '_hidden'",
                    "            });",
                    "            links.add(hdnLnkFld);",
                    "            addLnkBtn.on('click', function(){",
                    "                var lnkWin = Ext.create(appName + '.view.LinkingWindow', {",
                    "                    itemId:fIdx,",
                    "                    maxHeight:windowMaxHeight,",
                    "                    openner:target.up('window')",
                    "                }).show();",
                    "            });",
                    "            target.add(linkLabel);",
                    "            target.add(links);",
                    "            if(isEditMode){",
                    "                /* bd_idx Array */",
                    "                var lnkData = entry.data_val.split(',');",
                    "                for(i=0; i<lnkData.length; i++){",
                    "                    /* get information of each data in link from server */",
                    "                    Ext.data.JsonP.request({",
                    "                        url:getDataWriteApi() + '?bd_idx=' + lnkData[i].trim(),",
                    "                        success:function(response){",
                    "                            if(response.binderBean.bd_file === undefined) return;",
                    "                            var unit = Ext.create(appName + '.view.LinkUnit', {",
                    "                                bd_idx:response.binderBean.bd_idx,",
                    "                                itemId:'unit_' + response.binderBean.bd_idx",
                    "                            });",
                    "                            var path = 'resources/images/ico_noimage.gif';",
                    "                            if(response.binderBean.bd_file.length > 0){",
                    "                                path = response.binderBean.bd_file[0].thumb_path;",
                    "                            }",
                    "                            unit.down('#image').setStyle('background-image', 'url(' +path+ ')');",
                    "                            unit.getViewModel().setData({",
                    "                                unitTitle:response.binderBean.bd_subject,",
                    "                                src:path",
                    "                            });",
                    "                            linkUnitCon.add(unit);",
                    "                        }",
                    "                    });",
                    "                }",
                    "            }",
                    "        }",
                    "        /* field for multi-select */",
                    "        if(colsType == 'dbl_select'){",
                    "            fldCon.listeners = {",
                    "                render:function(cmp){",
                    "                    cmp.el.on('click', function(){",
                    "                        var targetFld = cmp;",
                    "                        /* item preset in multi-select  */",
                    "                        var dblData = entry.cols_data;",
                    "                        /* Array data for the first combobox */",
                    "                        var fstData = [];",
                    "                        for(i=0; i<dblData.length; i++){",
                    "                            fstData.push({name:dblData[i].data, subData:dblData[i].subdata});",
                    "                        }",
                    "                        /* store for the first combobox */",
                    "                        var fstStore = Ext.create('Ext.data.Store', {",
                    "                            fields:['name', 'subData'],",
                    "                            data : fstData",
                    "                        });",
                    "                        /* show multi select window */",
                    "                        var dblSelecCon= Ext.create(appName + '.view.MultiSelectWindow', {",
                    "                            title:entry.cols_name,",
                    "                            modal:true,",
                    "                            alwaysOnTop:true",
                    "                        });",
                    "",
                    "                        /* value field in MultiSelectWindow */",
                    "                        var valFld = dblSelecCon.down('#valueField');",
                    "                        /* fill given value to value field */",
                    "                        if(isEditMode){",
                    "                            valFld.setValue(targetFld.getValue());",
                    "                        }",
                    "                        /* connect store to first select option */",
                    "                        dblSelecCon.setFirstStore(fstStore);",
                    "                        dblSelecCon.show();",
                    "                        dblSelecCon.on('close', function(){",
                    "                            if(dblSelecCon.getTitle() === ''){//empty title means it has new data when btnOk click",
                    "                                targetFld.setValue(valFld.getValue());",
                    "                            }",
                    "                            else{//existing title means click 'cancel' or 'close' button",
                    "                                dblSelecCon.down('#valueField').setValue('');",
                    "                            }",
                    "                        });",
                    "                    });",
                    "                }",
                    "            };",
                    "",
                    "        }",
                    "        /* field for dataset */",
                    "        if(colsType == 'dataset'){",
                    "            fldCon = null;",
                    "            me.setDatasetField(entry, isEditMode, target);",
                    "        }",
                    "    }",
                    "    if(geRecOpt !== undefined || geValOpt !== undefined){// for sharing recode fields",
                    "        var availableRecFlds = ['textarea', 'text', 'dbtext', 'select', 'number', 'date', 'url' ,'link', 'idx'];",
                    "        if(availableRecFlds.indexOf(colsType) == -1){",
                    "            Ext.Msg.alert('Alert', 'The type of field \"' +entry.cols_name+ '\" is wrong <br>Error code:107');",
                    "        }",
                    "        else{",
                    "            if(target.numOfGetRec === undefined){",
                    "                target.numOfGetRec = -1;",
                    "            }",
                    "            if(geRecOpt !== undefined){//to count getRecords option",
                    "                if(target['recIdx_' + geRecOpt.connectCategory] === undefined){",
                    "                    target.numOfGetRec += 1;",
                    "                    target['recIdx_' + geRecOpt.connectCategory] = target.numOfGetRec;",
                    "                }",
                    "            }",
                    "            //choose a button color",
                    "            var colorIdx = (geRecOpt)? target['recIdx_' + geRecOpt.connectCategory] : 4;",
                    "            var selRecFld = Ext.create(appName + '.view.SelectRecordField', {",
                    "                xtype:'selectrecordfield',",
                    "                cls:'requestform-space',",
                    "                fielditemId:iId,",
                    "                readOnly:fReadOnly,",
                    "                hidden:isHidden,",
                    "                buttonColorIndex:colorIdx,",
                    "                listeners:{",
                    "                    render:function(recFld){",
                    "                        var recBtn = recFld.down('#btnSelect');",
                    "                        if(recFld.readOnly){",
                    "                            recBtn.setDisabled(true);",
                    "                            recFld.down('textfield').setReadOnly(true);",
                    "                        }",
                    "                        recBtn.setStyle({",
                    "                            'background-color':recFld.getButtonColor(recFld.buttonColorIndex)",
                    "                        });",
                    "                    }",
                    "                }",
                    "",
                    "            });",
                    "            var ct = (geRecOpt !== undefined)? geRecOpt.connectCategory : geValOpt.connectCategory; //reference category id",
                    "            var fId = (geRecOpt !== undefined)? geRecOpt.fieldId : geValOpt.fieldId;",
                    "            selRecFld.setRecordInfo(ct, fId , fldCon);",
                    "            target.add(selRecFld);",
                    "        }",
                    "    }",
                    "    else{",
                    "        if (fldCon !== null) target.add(fldCon); //dataset 과 같이 자체적으로 target에 추가된 경우 제외하고  add",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|commentHeader": "comment",
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setCustomFields",
            "designerId": "af08f18f-bce6-4d70-86aa-10d2f8373d30"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "onPickfilesAfterRender",
                "implHandler": [
                    "var pickBtn = component.el.dom;",
                    "var uploadForm = component.up('window').down('form');",
                    "var listCon = uploadForm.down('#attachCon').down('#fileList');",
                    "var uploader = new plupload.Uploader({",
                    "    runtimes : 'html5,flash,silverlight,html4',",
                    "",
                    "    browse_button : pickBtn, // you can pass in id...",
                    "    //     container: document.getElementById('container'), // ... or DOM Element itself",
                    "",
                    "    url : \"/binder/upload\",",
                    "",
                    "    //     filters : {",
                    "    //         max_file_size : '1000mb',",
                    "    //         mime_types: [",
                    "    //             {title : \"Image files\", extensions : \"jpg,gif,png\"},",
                    "    //             {title : \"Zip files\", extensions : \"zip\"}",
                    "    //         ]",
                    "    //     },",
                    "    chunk_size:'50mb',",
                    "    // Flash settings",
                    "    flash_swf_url : '/plupload/js/Moxie.swf',",
                    "",
                    "    // Silverlight settings",
                    "    silverlight_xap_url : '/plupload/js/Moxie.xap',",
                    "",
                    "",
                    "    init: {",
                    "        PostInit: function() {",
                    "            listCon.setHtml('');",
                    "        },",
                    "",
                    "        FilesAdded: function(up, files) {",
                    "            //configure uploader after files are added",
                    "            uploadForm.down('#attachCon').setHidden(false);",
                    "            uploadForm.down('#lbNewFileAdded').setHidden(false);",
                    "            plupload.each(files, function(file, index) {",
                    "                var html = listCon.html + '<div id=\"' + file.id + '\">' + file.name + ' (' + plupload.formatSize(file.size) + ') <b></b></div>';",
                    "                var aUnit = Ext.create(appName + '.view.AttachUnit');",
                    "                //to get reference of uploader at remove aUnit by dblclick or....",
                    "                uploadForm.uploader = uploader;",
                    "                aUnit.addFile(file, index);",
                    "                aUnit.setId(file.id);",
                    "                listCon.add(aUnit);",
                    "            });",
                    "            //descripttion how to delete",
                    "            var htr = uploadForm.down('#attachCon').down('#howToRemove');",
                    "            htr.setText(loc.upload.dblclickToDel);",
                    "            htr.setHidden(false);",
                    "            component.up('window').fireEvent('fileadded');",
                    "        },",
                    "        Error: function(up, err) {",
                    "            console.info('Error', \"\\nError #\" + err.code + \": \" + err.message);",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "uploader.init();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "onPickfilesAfterRender",
            "designerId": "073f4976-be4b-4865-ac51-4ab8ea859eed"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "entry",
                    "isEditMode",
                    "target"
                ],
                "fn": "setDatasetField",
                "implHandler": [
                    "var i, j;",
                    "var me = this;",
                    "var colsIdx = entry.cols_idx.toString();",
                    "var activeTab = getController('Main').getListTab().getActiveTab();",
                    "if(colsIdx.length == 1){",
                    "    colsIdx = '000' + colsIdx;",
                    "}",
                    "if(colsIdx.length == 2){",
                    "    colsIdx = '00' + colsIdx;",
                    "}",
                    "if(colsIdx.length == 3){",
                    "    colsIdx = '0' + colsIdx;",
                    "}",
                    "var fIdx = 'data_' + colsIdx;",
                    "",
                    "/* data for store in grid */",
                    "var storeData = [];",
                    "/* colums for grid according to sub-fields */",
                    "var clms = [];",
                    "/* model fields for store */",
                    "/* cols_info is a preset fields to be used by edit(specially dbl_select) */",
                    "var flds = [{name:'cols_info'}, {name:'subIdx'}];",
                    "/* idx of sub-fields */",
                    "var subColsIdxs = [];",
                    "/* generate infomarion each column */",
                    "var subColsInfos = [];",
                    "//add each row number",
                    "var rowNum = new Ext.grid.RowNumberer();",
                    "clms.push(rowNum);",
                    "",
                    "var colsData = entry.cols_data;",
                    "var tmpData = JSON.parse(JSON.stringify(colsData));",
                    "var geRecInfo = []; //collect field infomation for requiring data record at designated category",
                    "var win = (target.up('window'))? target.up('window') : target;",
                    "var dsetCols;",
                    "var totalInfo;",
                    "var totColsIdx;",
                    "var needSum = false;",
                    "var needHex = false;",
                    "var hexCdx;",
                    "for(i=0; i<tmpData.length; i++){",
                    "    /* object item for storeData */",
                    "    /* [{name:'cols_info'}, {name:'cdx'}] */",
                    "    var storeObj = {};",
                    "    if(i === 0){// for header",
                    "        var tmpItem = tmpData[i].slice(); // slice to keep original item properties",
                    "        tmpItem.shift();",
                    "        storeObj.cols_info = tmpItem;",
                    "        storeObj.colsIdx = entry.cols_idx.toString();",
                    "        dsetCols = tmpItem;",
                    "        /* valiItem:sub-fields information that is included cols_name, cols_idx and cols_type */",
                    "        for(j=0; j<tmpData[i].length; j++){",
                    "            /* arrange sub-fields into storeObj */",
                    "            if(j > 0){",
                    "                var colsInfo = tmpData[i][j];",
                    "                /* generate cell dataindex */",
                    "                var cdx = colsInfo.cols_idx.toString();",
                    "",
                    "                if(cdx.length == 1){",
                    "                    cdx = '000' + cdx;",
                    "                }",
                    "                if(cdx.length == 2){",
                    "                    cdx = '00' + cdx;",
                    "                }",
                    "                if(cdx.length == 3){",
                    "                    cdx = '0' + cdx;",
                    "                }",
                    "",
                    "                /* cols27_data_0028 */",
                    "                cdx = 'cols' + entry.cols_idx.toString() +'_data_' + cdx;",
                    "                /* empty field values for new reqeust mode */",
                    "                //                 storeObj[cdx] = '';",
                    "                /* save cols_infos into Array to use at Editmode */",
                    "                subColsIdxs.push(cdx);",
                    "                /* update cols_idx for each sub-fields to new naming */",
                    "                tmpItem[j-1].cols_idx = cdx;",
                    "                /* build grid columns */",
                    "                var fReadOnly = false;",
                    "                /* in case of field code configured as readOnly */",
                    "                if(colsInfo.cols_code == 'readOnly'){",
                    "                    fReadOnly = true;",
                    "                }",
                    "                getController('Main').getMainView().on('fieldoptionerror', function(){",
                    "                    return;",
                    "                });",
                    "",
                    "                var clm = me.getDatasetGridColumns(tmpData[i][j]);",
                    "                if(clm.selectedRecord !== undefined){",
                    "                    geRecInfo.push({",
                    "                        connectCategory:clm.selectedRecord.relatedCategory,",
                    "                        fieldId:clm.selectedRecord.fieldId,",
                    "                        idx:colsInfo.cols_idx,",
                    "                        index:j",
                    "                    });",
                    "                }",
                    "                var fld = {",
                    "                    name:cdx,",
                    "                    convert:function(v){",
                    "                        if(v === undefined) v = '';",
                    "                        return v;",
                    "                    }",
                    "                };",
                    "                if(colsInfo.cols_type == 'number'){",
                    "                    fld.convert = function(v){",
                    "                        if(v === '' || v === null || v === undefined) v = 0;",
                    "                        return parseFloat(v);",
                    "                    };",
                    "                }",
                    "                if(getOption(colsInfo.cols_option).sum){",
                    "                    needSum = true;//check if sum setting exists",
                    "                }",
                    "                if(colsInfo.cols_type == 'date'){",
                    "                    fld.convert = function(v){",
                    "                        var val;",
                    "                        if(v !== undefined && v !== '' && v !== null){",
                    "                            val = getController('Util').parseDate(v);",
                    "                        }",
                    "                        else{",
                    "                            val = '';",
                    "                        }",
                    "                        return val;",
                    "                    };",
                    "                }",
                    "                var colsOpt = getOption(tmpData[i][j].cols_option);",
                    "                if(colsOpt.calc !== undefined){",
                    "                    totalInfo = colsOpt.calc;",
                    "                    totColsIdx = tmpData[i][j].cols_idx;",
                    "                };",
                    "",
                    "                /* grid columns */",
                    "                clms.push(clm);",
                    "                /* store fields */",
                    "                flds.push(fld);",
                    "",
                    "                if(colsInfo.cols_code == 'colorHex'){//for hanyoung dataset in colorcode category only",
                    "                    needHex = true;",
                    "                    hexCdx = cdx;",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "var dsetCon = Ext.create(appName + '.view.DatasetGridBox', {",
                    "    itemId:'dsetCon',",
                    "    style:'margin-bottom:10px',",
                    "    cls:'requestform-space'",
                    "});",
                    "dsetCon.setGrid(needSum);",
                    "dsetCon.addTitle(entry.cols_name + ':');",
                    "var grid = dsetCon.getGrid();",
                    "grid.colsInfo = dsetCols;",
                    "",
                    "var dsetIdx = 'cols' + entry.cols_idx;",
                    "var aStore = Ext.create('Ext.data.Store', {",
                    "    fields:flds,",
                    "    storeId:dsetIdx",
                    "",
                    "});",
                    "if(totalInfo !== undefined){",
                    "    var operator = getController('Util').getOperator(totalInfo);//Array ex) [\"data_3077\", \"*\", \"data_3078\"]",
                    "    aStore.on('update', function(store, record , operation , modifiedFieldNames , details , eOpts){",
                    "        //         var sc = ['x', '-', '+', ')', '(', '/', '*'];",
                    "        var value = '';",
                    "        var count = 0;",
                    "        var flds = [];",
                    "        var values = [];",
                    "        for(var i=0; i<operator.length; i++){",
                    "            var oper = operator[i];",
                    "            if(oper.indexOf('data_') != -1){//to call a field value",
                    "                var fVal = store.getStoreId() + '_' + oper;",
                    "                oper = record.get(fVal);",
                    "                values.push(oper);",
                    "                flds.push(fVal);",
                    "            }",
                    "            if(oper === undefined){",
                    "                Ext.Msg.alert('Arror', 'One of unavailable charactor could be included to use at calulation<br>Error code:108');",
                    "                return;",
                    "            }",
                    "            else{",
                    "                value += oper;",
                    "            }",
                    "            count ++;",
                    "        }",
                    "        if(flds.indexOf(modifiedFieldNames[0]) == -1){//if the cell is not include to calculate",
                    "            return;",
                    "        }",
                    "        else{//if the cell is included to caclulate, input the value to the required field",
                    "            if(values.indexOf('') == -1){//all field values that required are inputed",
                    "                var result = parseInt(eval(value)).toFixed(2);",
                    "                record.set(totColsIdx, result);",
                    "            }",
                    "        }",
                    "    });",
                    "}",
                    "if(isEditMode){",
                    "    var cInfo = [];",
                    "    for(i=0; i<tmpData.length; i++){",
                    "        storeObj = {};",
                    "        if(i === 0){//get and save cals_info from header",
                    "            var tmpItem = tmpData[i].slice(); // slice to keep original item properties",
                    "            tmpItem.shift();",
                    "            cInfo = tmpItem;",
                    "        }",
                    "        if(i > 0){//from next of header",
                    "            for(var j=0; j<tmpData[i].length; j++){",
                    "                if(j === 0){",
                    "                    storeObj.subIdx = tmpData[i][j];",
                    "                }",
                    "                else{",
                    "                    storeObj[subColsIdxs[j-1]] = tmpData[i][j];",
                    "                }",
                    "            }",
                    "            storeObj.cols_info = cInfo;",
                    "            storeData.push(storeObj);",
                    "        }",
                    "    }",
                    "    aStore.setData(storeData);",
                    "}",
                    "/* apply storeObj if only it is new request mode to make just 1 coloum */",
                    "else{",
                    "//     var emptyData = {subIdx:''};",
                    "//     for(i=0; i<grid.colsInfo.length; i++){",
                    "//         if(grid.colsInfo[i].cols_type != 'date'){",
                    "//             emptyData[grid.colsInfo[i].cols_idx] = '';",
                    "//         }",
                    "//     }",
                    "//     aStore.insert(0, emptyData);",
                    "}",
                    "",
                    "grid.setColumns(clms);",
                    "grid.setMargin('5 0 0 0');",
                    "grid.dataIdx = fIdx;",
                    "grid.reconfigure(aStore);",
                    "grid.on('cellclick', function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){",
                    "    if(cellIndex === 0 ) return;//for selectionModel",
                    "    //extract data from selected cell",
                    "    var cellInfo = grid.colsInfo[cellIndex-2];",
                    "    var cType= cellInfo.cols_type;",
                    "    var cName = cellInfo.cols_name;",
                    "    if(cType == 'dbl_select'){",
                    "        /* show multi select window */",
                    "        var dblSelecWin = Ext.create(appName + '.view.MultiSelectWindow', {",
                    "            title:cName,",
                    "            modal:true,",
                    "            alwaysOnTop:true",
                    "        });",
                    "",
                    "        dblSelecWin.down('#valueField').setValue(record.get(cellInfo.cols_idx));",
                    "",
                    "        //store for first option",
                    "        var sData = [];",
                    "        for(i=0; i<cellInfo.cols_data.length; i++){",
                    "            var dblColsData = cellInfo.cols_data[i];",
                    "            sData.push({'name':dblColsData.data, 'subData':dblColsData.subdata});",
                    "        }",
                    "        //         Ext.Array.each(cellInfo.cols_data, function(item, index){",
                    "        //             sData.push({'name':item.data, 'subData':item.subdata});",
                    "        //         });",
                    "        //store for #firstOption",
                    "        var store = Ext.create('Ext.data.Store', {",
                    "            fields:['name', 'subData'],",
                    "            data : sData",
                    "        });",
                    "",
                    "        dblSelecWin.setFirstStore(store);",
                    "        dblSelecWin.show();",
                    "        dblSelecWin.on('close', function(){",
                    "            if(dblSelecWin.getTitle() === ''){//title is empty means it has new data when btnOk click",
                    "                var valFld = dblSelecWin.down('#valueField');",
                    "                var store = grid.getStore();",
                    "                record.set(cellInfo.cols_idx, valFld.getValue());",
                    "                grid.getView().refresh();",
                    "            }",
                    "            else{",
                    "                dblSelecWin.down('#valueField').setValue('');",
                    "            }",
                    "        });",
                    "    }",
                    "    if(cType == 'check'){",
                    "        var chkFldWin = Ext.create('Ext.window.Window',{",
                    "            title:cName,",
                    "            modal:true,",
                    "            width:420,",
                    "            alwaysOnTop:true,",
                    "            bodyStyle:'padding:20px',",
                    "            items:[",
                    "                {",
                    "                    xtype:'checkboxgroup',",
                    "                    columns:2,",
                    "                    itemId:'chkGrp',",
                    "                    fieldLabel:cName,",
                    "                    width:'100%'",
                    "                },",
                    "                {",
                    "                    xtype:'container',",
                    "                    layout:{",
                    "                        type:'hbox',",
                    "                        pack:'center'",
                    "                    },",
                    "                    width:'100%',",
                    "                    margin:'12 0 0 0',",
                    "                    items:[",
                    "                        {",
                    "                            xtype: 'button',",
                    "                            itemId: 'btnOk',",
                    "                            width: 80,",
                    "                            bind: {",
                    "                                text: '{ok}'",
                    "                            },",
                    "                            listeners:{",
                    "                                click:function(button){",
                    "                                    var win = button.up('window');",
                    "                                    var cg = win.down('checkboxgroup');",
                    "                                    var store = grid.getStore();",
                    "                                    var cgVal = cg.getValue();",
                    "                                    Ext.Object.each(cgVal, function(key, item){",
                    "                                        record.set(cellInfo.cols_idx, item);",
                    "                                    });",
                    "                                    win.close();",
                    "                                }",
                    "                            }",
                    "                        },",
                    "                        {",
                    "                            xtype: 'button',",
                    "                            itemId: 'btnCancel',",
                    "                            margin: '0 0 0 10',",
                    "                            width: 80,",
                    "                            bind: {",
                    "                                text: '{cancel}'",
                    "                            },",
                    "                            listeners: {",
                    "                                click: function(button){",
                    "                                    button.up('window').close();",
                    "                                }",
                    "                            }",
                    "                        }",
                    "                    ]",
                    "",
                    "                }",
                    "            ],",
                    "            addContent:function(chkInfo){",
                    "                var chkData = cellInfo.cols_data;",
                    "                var preVal = record.get(cellInfo.cols_idx);",
                    "                var cg = this.down('#chkGrp');",
                    "                for(i=0; i<chkData.length; i++){",
                    "                    chkData[i] = chkData[i].trim();",
                    "                    var val = false;",
                    "                    var cbArr = preVal.toString().split(',');",
                    "                    for(j=0; j<cbArr.length; j++){",
                    "                        cbArr[j] = cbArr[j].trim();",
                    "                    }",
                    "                    /* in edit mode */",
                    "                    if(Ext.Array.contains(cbArr, chkData[i])) val = true;",
                    "                    var mgn = (i % 2 === 1)? '0 0 0 5' : '0 0 0 0';",
                    "                    var chk = {",
                    "                        boxLabel:chkData[i],",
                    "                        name:fIdx,",
                    "                        margin:mgn,",
                    "                        inputValue:chkData[i],",
                    "                        value:val",
                    "                    };",
                    "                    cg.add(chk);",
                    "                }",
                    "            }",
                    "        }).show();",
                    "        chkFldWin.addContent(cellInfo.cols_data);",
                    "    }",
                    "    //If fieldOPtion exist when click on a cell",
                    "    if(grid.getColumns()[cellIndex].selectedRecord !== undefined || grid.getColumns()[cellIndex].selectedValue !== undefined){",
                    "        var clmRec = grid.getColumns()[cellIndex].selectedRecord; //다른 카테고리에서 선택하여  복수의 값을 이용할 경우의 조건",
                    "        var clmVal = grid.getColumns()[cellIndex].selectedValue; //다른 카테고리에서 단건의 값을 선택할 경우의 조건",
                    "        var selRec = (clmRec !== undefined)? clmRec : clmVal;",
                    "        var connectCategory = selRec.relatedCategory;",
                    "        var fieldId = selRec.fieldId;",
                    "        win.hide();",
                    "",
                    "        var grpWin = Ext.create(appName + '.view.DataGroupWindow', {",
                    "            scrollable:true,",
                    "            cls:'upload-form',",
                    "            modal:true,",
                    "            y:30,",
                    "            fieldId:fieldId,",
                    "            maxHeight:windowMaxHeight - 30,",
                    "            relatedCategory:connectCategory,",
                    "            listeners:{",
                    "                close:function(){",
                    "                    win.show();",
                    "                }",
                    "            }",
                    "        }).show();",
                    "        var dgGrid = grpWin.down('#dgGrid');",
                    "        dgGrid.on('cellclick', function(tableview, dgTd, cellIndex, rec){",
                    "            var value;",
                    "            var store = grid.getStore();",
                    "            var fieldId = grpWin.fieldId;",
                    "            if(basicItems.indexOf(fieldId) != -1){//기본정보들 중 택하는경우",
                    "                if(fieldId == 'bd_file'){",
                    "                    value = rec.get(fieldId)[0].thumb_path;",
                    "                    value += '?file_name=' + encodeURIComponent(rec.get(fieldId)[0].file_name);",
                    "                    value += '--bd_subject=' + encodeURIComponent(rec.get('bd_subject'));",
                    "                    value += '--bd_idx=' + rec.get('bd_idx');//for downloading",
                    "                }",
                    "                else{",
                    "                    value = rec.get(fieldId);",
                    "                }",
                    "            }",
                    "            else{",
                    "                value = rec.get(fieldId);",
                    "            }",
                    "            for(var i=0; i<geRecInfo.length; i++){",
                    "                //모아 놓은 getRecord 필드 중 ca_id가 같은 것만 자동으로 값 입력",
                    "                if(geRecInfo[i].fieldId != fieldId && geRecInfo[i].connectCategory == rec.get('ca_id')){",
                    "                    var eachItem = rec.get(geRecInfo[i].fieldId);",
                    "                    if(Ext.isArray(eachItem)) eachItem = eachItem[0];",
                    "                    if(geRecInfo[i].fieldId == 'bd_file') {",
                    "                        var fileInfo = eachItem;",
                    "                        fileInfo = eachItem.thumb_path;",
                    "                        fileInfo += '?file_name=' + encodeURIComponent(eachItem.file_name);",
                    "                        fileInfo += '--bd_subject=' + encodeURIComponent(rec.get('bd_subject'));",
                    "                        fileInfo += '--bd_idx=' + rec.get('bd_idx');//for downloading",
                    "                        eachItem = fileInfo;",
                    "                    }",
                    "                    store.getAt(rowIndex).set(grid.colsInfo[geRecInfo[i].index - 1].cols_idx, eachItem);",
                    "                }",
                    "            }",
                    "            store.getAt(rowIndex).set(cellInfo.cols_idx, value);",
                    "            grpWin.close();",
                    "        });",
                    "    }",
                    "});",
                    "//Auto fill when double click on the cell by previous value",
                    "grid.on('celldblclick', function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){",
                    "    var cellInfo = grid.colsInfo[cellIndex-2];",
                    "    var preRec = grid.getStore().getRange(rowIndex-1, rowIndex-1);",
                    "    if(preRec[0]){",
                    "        var preValue = preRec[0].get(cellInfo.cols_idx);",
                    "        record.set(cellInfo.cols_idx, preValue);",
                    "        grid.focus();",
                    "    }",
                    "});",
                    "target.add(dsetCon);",
                    "if(needHex){",
                    "    var fdHex;",
                    "    var hexValue;",
                    "    if(target.up('form')){",
                    "        fdHex = target.up('form').down('#colorHex');",
                    "        hexValue = fdHex.getValue();",
                    "        fdHex.on('change', function(field){//in case changing color by colorpicker",
                    "            aStore.each(function(record, index){",
                    "                record.set(hexCdx, field.getValue());",
                    "            });",
                    "        });",
                    "    }",
                    "    else{//from viewer",
                    "        var selected = getController('Main').getListTab().getActiveTab().getGrid().getSelectionModel().getSelection();",
                    "        if(selected.length > 1){",
                    "            Ext.Msg.alert('Notice', loc.main.selectOnlyOne);",
                    "            target.close();",
                    "            return;",
                    "        }",
                    "        hexValue = selected[0].get('idcolorHex');",
                    "    }",
                    "    aStore.each(function(record){//기본 열 추가된경우에 대비 무조건 부모 hex값 추가",
                    "        record.set(hexCdx, hexValue);",
                    "    });",
                    "    aStore.on('add', function(store, records, index){//in case click + or -",
                    "        if(fdHex !== undefined){",
                    "            hexValue = fdHex.getValue();",
                    "        }",
                    "        store.each(function(record) {",
                    "            record.set(hexCdx, hexValue);",
                    "        });",
                    "    });",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setDatasetField",
            "designerId": "b789697a-f506-467f-a04f-14354c9d87f0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "colsInfo"
                ],
                "fn": "getDatasetGridColumns",
                "implHandler": [
                    "var type = colsInfo.cols_type;",
                    "var code = colsInfo.cols_code;",
                    "var option = colsInfo.cols_option;",
                    "var colsIdx = colsInfo.cols_idx.toString();",
                    "var colsName = colsInfo.cols_name;",
                    "var colsData = colsInfo.colsData;",
                    "var colsUnit = colsInfo.cols_unit;",
                    "var fReadOnly = false;",
                    "var geRec = {}, geVal = {};",
                    "var fldOpt = getOption(option);",
                    "var renderType = [];",
                    "if(fldOpt.render !== undefined) renderType.push(fldOpt.render);",
                    "",
                    "if(fldOpt.getRecord !== undefined || fldOpt.getValue !== undefined){",
                    " var  recType = (fldOpt.getRecord !== undefined)? 'getRecord' : 'getValue' ;",
                    "    renderType.push(recType);",
                    "",
                    "    //error check in field option getRecord or getValue",
                    "    var err = false;",
                    "    var chkVal = (fldOpt.getRecord !== undefined)? fldOpt.getRecord : fldOpt.getValue;",
                    "    if(chkVal.indexOf('>') == -1) err = true;",
                    "",
                    "    if(err){",
                    "        var msg;",
                    "        if(localLanguage == 'Korean'){",
                    "            msg = '필드옵션 설정에 문제가 있습니다.<br>필드이름:' + colsName + '<br>';",
                    "            msg += '필드옵션:' + option;",
                    "        }",
                    "        else{",
                    "            msg = 'A problem found in field option.<br>Field name:' + colsName + '<br>';",
                    "            msg += 'Field option:' + option;",
                    "        }",
                    "        var msgBox = Ext.create('Ext.window.MessageBox', {",
                    "            listeners:{",
                    "                hide:function(){",
                    "                    getController('Main').getMainView().fireEvent('fieldoptionerror');",
                    "                }",
                    "            }",
                    "        });",
                    "        msgBox.alert('Error', msg);",
                    "        return;",
                    "    }",
                    "}",
                    "var rndr = getController('Main').gridCustomRenderer(renderType, colsIdx, colsUnit, 30);",
                    "/* in case of field code configured as readOnly */",
                    "if(code == 'readOnly' || fldOpt.readOnly){",
                    "    fReadOnly = true;",
                    "}",
                    "var clm = {",
                    "    xtype:'gridcolumn',",
                    "    colsInfo:colsInfo,",
                    "    dataIndex:colsIdx,",
                    "    hidden:fldOpt.hidden,",
                    "    text:colsName,",
                    "    flex:1,",
                    "    editor:{",
                    "        xtype:'textfield',",
                    "        disabled:fReadOnly",
                    "    },",
                    "    renderer:rndr",
                    "};",
                    "if(type == 'number'){",
                    "    var numEditor = (fldOpt.calc !== undefined)? null : {",
                    "        xtype:'numberfield',",
                    "        decimalPrecision:5",
                    "    };",
                    "    if(fldOpt.sum){",
                    "        clm.summaryType = 'sum';",
                    "        clm.summaryRenderer = function(val, params, data) {",
                    "            if(colsUnit !== '') val += colsUnit;",
                    "            val = '<span style=\"font-weight:600;color:#7792A9\">' + val + '</span>';",
                    "            return val;",
                    "        };",
                    "    }",
                    "    clm.xtype = 'numbercolumn';",
                    "    clm.format = '0.#####';",
                    "    clm.editor = numEditor;",
                    "}",
                    "if(type == 'date'){",
                    "    var dtFormat = (localLanguage == 'English')? 'm-d-Y' : 'Y-m-d';",
                    "    clm.xtype = 'datecolumn';",
                    "    clm.editor =  {",
                    "        xtype: 'datefield',",
                    "        format:dtFormat,",
                    "        ctype:type",
                    "    };",
                    "}",
                    "if(type == 'radio' || type == 'select'){",
                    "    clm.editor = {",
                    "        xtype: 'combo',",
                    "        ctype:colsInfo.cols_type,",
                    "        store:colsInfo.cols_data",
                    "    };",
                    "}",
                    "",
                    "if(colsInfo.cols_type == 'dbtext'){",
                    "    clm.editor = {",
                    "        xtype: 'combo',",
                    "        ctype:type,",
                    "        store:[],",
                    "        emptyText:loc.upload.autoText,",
                    "        enableKeyEvents:true,",
                    "        listeners:[",
                    "            {",
                    "                keyup:function(field, e){",
                    "                    var arr = field.dataIndex.split('_');",
                    "                    var colsIdx = parseInt(arr[2]);",
                    "                    getController('Post').getDbtextValue(field, e, colsIdx);",
                    "                }",
                    "            }",
                    "        ]",
                    "    };",
                    "",
                    "}",
                    "if(type == 'colorchk'){",
                    "    clm.sortable = false;",
                    "    clm.renderer = function(value, record){",
                    "        var val;",
                    "        if(value === undefined || value === null || value === ''){",
                    "            value = '';",
                    "        }",
                    "        else{",
                    "            if(value.indexOf('||') == -1){",
                    "                val = value.split(',');",
                    "            }",
                    "            else{",
                    "                val = value.split('||');",
                    "            }",
                    "            value = '<div style=\"height:15px;display:inline-block;width:10px;background-color:'+val[0]+'\"></div>';",
                    "            value += '<div style=\"display:inline-block;margin-left:5px\">' + val[1] + '</div>';",
                    "        }",
                    "        return value;",
                    "    };",
                    "    clm.editor = {",
                    "        xtype: 'combo',",
                    "        ctype:colsInfo.cols_type,",
                    "        store:colsInfo.cols_data",
                    "    };",
                    "}",
                    "",
                    "if(colsInfo.cols_option !== undefined && colsInfo.cols_option.trim() !== ''){",
                    "    //to transfer field options",
                    "    var fieldOption = getOption(colsInfo.cols_option);",
                    "    if(fieldOption.getRecord !== undefined){",
                    "        var gri = fieldOption.getRecord.split('>')[1];",
                    "        var rc = fieldOption.getRecord.split('>')[0];",
                    "        //if it need to select field cols_idx that not basic info",
                    "        if(basicItems.indexOf(gri) == -1) gri = 'id' + gri;",
                    "        geRec.relatedCategory = rc;",
                    "        geRec.fieldId = gri;",
                    "        geVal = undefined;",
                    "    }",
                    "    else if(fieldOption.getValue !== undefined){",
                    "        var gri = fieldOption.getValue.split('>')[1];",
                    "        var rc = fieldOption.getValue.split('>')[0];",
                    "        //if it need to select field cols_idx that not basic info",
                    "        if(basicItems.indexOf(gri) == -1) gri = 'id' + gri;",
                    "        geVal.relatedCategory = rc;",
                    "        geVal.fieldId = gri;",
                    "        geRec = undefined;",
                    "    }",
                    "    else{",
                    "        geRec = undefined;",
                    "        geVal = undefined;",
                    "    }",
                    "}",
                    "else{",
                    "    geRec = undefined;",
                    "    geVal = undefined;",
                    "}",
                    "if(geRec !== undefined){",
                    "    clm.selectedRecord = geRec;",
                    "}",
                    "if(geVal !== undefined){",
                    "    clm.selectedValue = geVal;",
                    "}",
                    "return clm;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getDatasetGridColumns",
            "designerId": "8c1115fe-ab58-4d55-bde8-8b364da068a3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "div",
                    "formId"
                ],
                "fn": "delAttachedFile",
                "implHandler": [
                    "",
                    "var cId = Ext.getCmp('categoryTree').selectedId;",
                    "var frmId = (formId === undefined)? 'editRequestWin_' + cId : formId;",
                    "var editWin = Ext.getCmp(frmId);",
                    "var existFilesCon = editWin.down('#existFilesCon');",
                    "var index = div.id.split('_')[1];",
                    "var fileIdx = div.getAttribute('fileidx');",
                    "existFilesCon.delEntry.push(fileIdx);",
                    "Ext.get(div).destroy();",
                    "",
                    "var files = editWin.el.select('.fileUnit').elements;",
                    "var image = new Image();",
                    "var colorsCon = editWin.down('#colorsCon');",
                    "var fdColors = editWin.down('#getColors');",
                    "if(fdColors){",
                    "    fdColors.setValue('');",
                    "    colorsCon.removeAll();",
                    "}",
                    "if(colorsCon && files.length > 0){",
                    "    editWin.mask('Please wait white extracting colors...');",
                    "    var imgExt = ['png', 'gif', 'jpg'];",
                    "    var ext = files[0].getAttribute('ext');",
                    "    if(imgExt.indexOf(ext) != -1){",
                    "        var src = files[0].getAttribute('src');",
                    "",
                    "        image.onload = function(){",
                    "            var colors = getController('Config').getColorChips(this, colorsCon);",
                    "            fdColors.setValue(JSON.stringify(colors));",
                    "            editWin.unmask();",
                    "        };",
                    "        image.setAttribute('src', src);",
                    "    }",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "delAttachedFile",
            "designerId": "00c67752-3430-42ab-8d79-3661952ee1d2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "window"
                ],
                "fn": "resetUploadForm",
                "implHandler": [
                    "if(!window) return false;",
                    "var uploadForm = window.down('form');",
                    "uploadForm.reset();",
                    "var dsetGrid = Ext.ComponentQuery.query('datasetgridbox #datasetGrid');",
                    "//if dataset field exists, reset dataset fields",
                    "Ext.Array.each(dsetGrid, function(item){",
                    "    var store = item.getStore();",
                    "    if(store.getData().items.length> 0){",
                    "        var obj = store.getData().items[0].data;",
                    "        var nData = {};",
                    "        Ext.Object.each(obj, function(key, value){",
                    "            if(key !== 'id'){",
                    "                nData[key] = '';",
                    "            }",
                    "            if(key == 'cols_info'){",
                    "                nData[key] = value;",
                    "            }",
                    "        });",
                    "        store.removeAll();",
                    "        store.add(nData);",
                    "    }",
                    "});",
                    "",
                    "/* Reset attachment */",
                    "//reset file entry in plupload",
                    "if(uploadForm.uploader){",
                    "    var uploader = uploadForm.uploader;",
                    "    uploader.files = [];",
                    "    //remove all attachunit",
                    "    var fileList = uploadForm.down('#fileList');",
                    "    fileList.removeAll();",
                    "    //hide the text that 'how to remove'",
                    "    var htr = uploadForm.down('#howToRemove');",
                    "    htr.setHidden(true);",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "resetUploadForm",
            "designerId": "c8a36f6c-4a7a-47e8-bb7a-f43696803d31"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "win",
                    "submit"
                ],
                "fn": "showUploadStatus",
                "implHandler": [
                    "var me = this;",
                    "var uploader = win.down('form').uploader;",
                    "if(uploader){",
                    "    //the status data provide by created uploader after render the pickFiles button",
                    "    var units = win.down('#fileList').items.items;",
                    "    var stsWin = Ext.create(appName + '.view.UploadStatusWindow', {",
                    "        maxHeight:windowMaxHeight,",
                    "        id:'uploadProgress'",
                    "    });",
                    "    stsWin.down('#statuses').setData(units);",
                    "",
                    "    //stop uploading when click close(x) button",
                    "    stsWin.on('close', function(){",
                    "        uploader.stop();",
                    "    });",
                    "    //when click cancel button",
                    "    stsWin.down('#btnCancelUpload').on('click', function(){",
                    "        stsWin.close();",
                    "    });",
                    "    stsWin.on('show', function(){",
                    "        uploader.start();",
                    "    });",
                    "    stsWin.show();",
                    "",
                    "    uploader.bind('UploadProgress', function(up, file) {",
                    "        var el = document.getElementById('bar_'+file.id);",
                    "        el.style.width = file.percent + \"%\";",
                    "        el.innerHTML = '<span>' + file.percent + \"%</span>\";",
                    "    });",
                    "    if(submit){",
                    "        uploader.bind('UploadComplete', function onComplete(ul, files){",
                    "            uploader.unbind('UploadComplete', onComplete);",
                    "            stsWin.close();",
                    "            me.submitPost(win);",
                    "        });",
                    "    }",
                    "",
                    "}",
                    "else{//in case of uploading without file attachment",
                    "    if(submit) me.submitPost(win);",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showUploadStatus",
            "designerId": "a16ead82-e6a8-4811-81b5-efde51b90bf0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "win"
                ],
                "fn": "submitPost",
                "implHandler": [
                    "var node = Ext.getStore('CategoryStore').getNodeById(win.categoryId);",
                    "if(node){",
                    "    if(node.get('isColor')){",
                    "        win.mask(loc.upload.extractingColor);",
                    "    }",
                    "    else{",
                    "        win.mask(loc.upload.uploading);",
                    "    }",
                    "}",
                    "/* after file uploading complete*/",
                    "win.on('uploadcomplete', function onUploadComplete(bdIdx, pluginName){",
                    "    win.un('uploadcomplete', onUploadComplete);",
                    "    var grid = (win.target.getGrid)? win.target.getGrid() : win.target;",
                    "    var store = grid.getStore();",
                    "    /* refresh grid by reloading dStore */",
                    "    if(pluginName === undefined) pluginName = currentPlugin;",
                    "    if(pluginName === '' || pluginName == 'taskGroup'){//for common uploading",
                    "        var currentIndex = win.down('form').selectedIndex;",
                    "        store.on('load', function onDstoreLoad(){",
                    "            store.un('load', onDstoreLoad);",
                    "            win.unmask();",
                    "            if(win.down('form').selectedIndex > -1){//at editmode, update viewer",
                    "                if(grid){//only for mainGrid",
                    "                    var newRec = store.getAt(currentIndex);",
                    "                    //keep grid selection",
                    "                    if((grid.type !== undefined)){// for text or normal type of grid",
                    "                        grid.getSelectionModel().select(newRec);",
                    "                        //update viewer",
                    "                        getController('Main').viewDocument(newRec, grid.title, grid.formMode, currentIndex);",
                    "                    }",
                    "                }",
                    "                if(win){",
                    "                    Ext.toast(loc.upload.posted);",
                    "                    win.destroy();",
                    "                }",
                    "            }",
                    "            else{",
                    "                if(win){",
                    "                    Ext.toast(loc.upload.posted);",
                    "                    win.destroy();",
                    "                }",
                    "            }",
                    "        });",
                    "        store.load();",
                    "    }",
                    "    if(pluginName == 'workGroup' || pluginName == 'salesGroup'  || pluginName == 'projectGroup'){",
                    "        Ext.toast(loc.upload.posted);",
                    "        store.load();",
                    "        win.destroy();",
                    "    }",
                    "    Ext.MessageBox.hide();",
                    "});",
                    "",
                    "getController('Post').postRequest(win);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "submitPost",
            "designerId": "111576c4-d210-4465-808b-4258cebc04d3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "win"
                ],
                "fn": "postRequest",
                "implHandler": [
                    "var me = this;",
                    "var url = domain + '/binder/addUpdate2';",
                    "var form = win.down('form');",
                    "var saveHistory = 0;",
                    "if(win.down('#saveHistory')){",
                    "    if(win.down('#saveHistory').getValue()) saveHistory = 1;",
                    "}",
                    "",
                    "/* extract link fields from request panel */",
                    "var lnkFlds = Ext.ComponentQuery.query('linkeddata', form);",
                    "if(lnkFlds !== null && lnkFlds.length > 0){",
                    "    Ext.Array.each(lnkFlds, function(field){",
                    "        /* linkUnitCon created at setCustomFields() */",
                    "        var target = field.down('#' + field.getItemId() + '_unitCon');",
                    "        /* itemid of linkUnitCon*/",
                    "        var targetId = target.getItemId();",
                    "        /* hidden field to upload automatically by form */",
                    "        var hdnFld = field.down('hiddenfield');",
                    "        var items = target.items.items;",
                    "        var linkVal = '';",
                    "        Ext.Array.each(items, function(item, index){",
                    "            if(index === 0){",
                    "                linkVal += item.bd_idx;",
                    "            }",
                    "            else{",
                    "                linkVal += ', ' + item.bd_idx;",
                    "            }",
                    "        });",
                    "        hdnFld.setValue(linkVal);",
                    "    });",
                    "}",
                    "",
                    "var frame = Ext.getBody().createChild({",
                    "    tag:'iframe',",
                    "    cls:'x-hidden',",
                    "    id:'iFrame',",
                    "    name:'iframe',",
                    "    isReady:false",
                    "});",
                    "",
                    "frame.isReady = false;",
                    "",
                    "var onUploadComplete = function(form){",
                    "    win.fireEvent('uploadcomplete', form.down('#bdIdx').getValue(), win.pluginName);",
                    "    frame.isLoaded = true;",
                    "    frame.destroy();",
                    "};",
                    "",
                    "// check if uploading complete",
                    "frame.dom.onload = function (){",
                    "    if(!frame.isReady){",
                    "        frame.isReady = true;",
                    "    }",
                    "    else{",
                    "        onUploadComplete(form);",
                    "    }",
                    "};",
                    "////////////////////////",
                    "// declare formData() //",
                    "////////////////////////",
                    "var formData = new FormData();",
                    "if(form.isValid()){",
                    "    /* in case grids insise of form */",
                    "    var dsetGrids = Ext.ComponentQuery.query('datasetgridbox gridpanel');",
                    "    /* if dataset field exists, get values from each dataset field */",
                    "    var datasetParams = {};",
                    "    var submitObj = {};",
                    "    submitObj.ca_id =  win.categoryId;",
                    "    submitObj.bd_group = 1;",
                    "    submitObj.uploadType = 'form';",
                    "    if(saveHistory !== 0) submitObj.history = 1;",
                    "    Ext.Array.each(dsetGrids, function(entry, gridIdx){",
                    "        var idx = entry.dataIdx; //data_xxxx",
                    "        var dsetStore = entry.getStore();",
                    "        var idxVal = '';",
                    "        var colsIdx = dsetStore.storeId;",
                    "        dsetStore.each(function(rec, index){",
                    "            Ext.Object.each(rec.data, function(key, val){",
                    "                if(val === undefined || val === null) val = '';",
                    "                if(Ext.isDate(val)){",
                    "                    val = getController('Util').parseDate(val);",
                    "                }",
                    "                if(key.indexOf('_data_') != -1){",
                    "                    formData.append(key + '_' + index, val);",
                    "                }",
                    "                /* sub category */",
                    "                if(key === 'subIdx'){",
                    "                   formData.append(colsIdx + '_bd_idx', val);",
                    "                }",
                    "            });",
                    "        });",
                    "    });",
                    "",
                    "    var atcCon = form.down('#attachCon');",
                    "    var existFilesCon = form.down('#existFilesCon');",
                    "",
                    "    var delEntry = existFilesCon.delEntry;",
                    "    /* remove selected exist file(s) */",
                    "    Ext.Array.each(delEntry, function(entry, index){",
                    "        submitObj['file_del_' + entry] = 1;",
                    "    });",
                    "    var isModern = false;",
                    "    if(detectIE() !== false){",
                    "        if(detectIE() > 9){",
                    "            isModern = true;",
                    "        }",
                    "    }",
                    "",
                    "    if(isHtml5() || isModern){",
                    "        submitObj.bd_idx = form.down('#bdIdx').getValue();",
                    "        var values = form.getValues();",
                    "        var autoIdxRefer, autoIdxReferValue, idxParam;",
                    "",
                    "        if(form.down('#indexKey') !== null){//check changable prefix if autoNumberNameField option configured",
                    "            autoIdxRefer = form.down('#indexKey').autoNumberNameField;//decided from setCustomField()",
                    "            if(autoIdxRefer !== undefined){",
                    "                if(autoIdxRefer.length == 1){",
                    "                    autoIdxRefer = '000' + autoIdxRefer;",
                    "                }",
                    "                if(autoIdxRefer.length == 2){",
                    "                    autoIdxRefer = '00' + autoIdxRefer;",
                    "                }",
                    "                if(autoIdxRefer.length == 3){",
                    "                    autoIdxRefer = '0' + autoIdxRefer;",
                    "                }",
                    "                idxParam = 'data_' + autoIdxRefer;//자동증가번호 참조 필드의 data_ + cols_idx to submit",
                    "            }",
                    "        }",
                    "        Ext.Object.each(values, function(key, value){",
                    "            submitObj[key] = value;",
                    "            if(key == idxParam){",
                    "                //get value from prefix  reference field",
                    "                if(value !== '' && value !== undefined) autoIdxReferValue = value;",
                    "            }",
                    "        });",
                    "        if(autoIdxReferValue !== undefined){//idx field 설정이 있고 prefix 참조필드가 설정 된경우",
                    "            var preAutoIdx = form.down('#indexKey').getValue();",
                    "            var numOfMark = preAutoIdx.split(\"?\").length - 1;",
                    "            var refLen = autoIdxReferValue.length;",
                    "            //",
                    "            if(refLen < numOfMark){",
                    "                for(i=0; i<(numOfMark - refLen); i++){",
                    "                    autoIdxReferValue += '0';",
                    "                }",
                    "            }",
                    "",
                    "            for(i =0; i<preAutoIdx.length; i++){",
                    "                if(preAutoIdx.charAt(i) == '?'){",
                    "                    //change \"?\" in auto numbering field value by autoNumberNameField",
                    "                    preAutoIdx = preAutoIdx.replaceAt(i, autoIdxReferValue.charAt(i));",
                    "                }",
                    "            }",
                    "            submitObj[form.down('#indexKey').name] = preAutoIdx;",
                    "        }",
                    "        /* for basic params */",
                    "        Ext.Object.each(submitObj, function(key, value){",
                    "            formData.append(key, value);",
                    "        });",
                    "        var request = new XMLHttpRequest();",
                    "        request.open('POST', url);",
                    "        request.onload = function(){",
                    "            if(request.status == 200){",
                    "                onUploadComplete(form);",
                    "            }",
                    "            else{",
                    "                alert('Error \" + oReq.status + \" occurred when trying to upload your file.<br \\/>');",
                    "            }",
                    "        };",
                    "        request.send(formData);",
                    "    }",
                    "    else{",
                    "        /* uploading files */",
                    "        Ext.Object.each(submitObj, function(key, value){",
                    "            form.baseParams[key] = value;",
                    "        });",
                    "        form.submit(",
                    "            {",
                    "                url:url,",
                    "                target:'iframe',",
                    "                waitMsg:loc.upload.pleaseWait,",
                    "                success:function(){",
                    "",
                    "                },",
                    "                callback:function(){",
                    "",
                    "                }",
                    "            }",
                    "        );",
                    "    }",
                    "}",
                    "else{",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "postRequest",
            "designerId": "3c4e6cb7-fe2c-4bb5-9661-39710745fd8b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field"
                ],
                "fn": "setLikedCategory",
                "implHandler": [
                    "var getLabel = function(cId, title){",
                    "    var label = {",
                    "        xtype:'button',",
                    "        cId:cId,",
                    "        itemId:'linkedLbl_' + cId,",
                    "        text:title,",
                    "        padding:'3 10 3 10',",
                    "        margin:'8 0 4 4',",
                    "        height:24,",
                    "        style:'border:2px solid #cecece;border-radius:5px;color:black;background-color:white',",
                    "        listeners:{",
                    "            afterrender:function(button){",
                    "                var title = button.el.select('.x-btn-inner-default-small').elements[0];//change text in button color",
                    "                title.style.color = 'black';",
                    "                var el = button.up('window').el.select('#addIcon_' + cId).elements[0];",
                    "                if(!el) return;",
                    "                Ext.get(el).setStyle('color', 'red');",
                    "                Ext.get(el).setCls('fa fa-minus-circle');",
                    "                el.setAttribute('action', 'del');",
                    "            },",
                    "            click:function(button){",
                    "                var el = button.up('window').el.select('#addIcon_' + cId).elements[0];",
                    "                if(el){//when only the category is collapsed",
                    "                    Ext.get(el).setStyle('color', 'black');",
                    "                    Ext.get(el).setCls('fa fa-plus-circle');",
                    "                    el.setAttribute('action', 'add');",
                    "                }",
                    "                button.destroy();",
                    "            }",
                    "        }",
                    "    };",
                    "    return label;",
                    "};",
                    "",
                    "var tStore = Ext.create('Ext.data.TreeStore', {",
                    "    storeId: 'lkTreeStore',",
                    "    model: appName + '.model.CategoryModel',",
                    "    proxy: {",
                    "        type: 'jsonp',",
                    "        api: {",
                    "            read: getCategoryListApi()",
                    "        },",
                    "        reader: {",
                    "            type: 'json',",
                    "            keepRawData: true",
                    "        }",
                    "    },",
                    "    filters: {",
                    "        filterFn: function(item) {",
                    "            if(!item.get('isHidden') && !item.get('isBoard')) return true;",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "Ext.create('Ext.window.Window', {",
                    "    modal: true,",
                    "    height: 250,",
                    "    minHeight: 600,",
                    "    width: 500,",
                    "    layout: 'hbox',",
                    "    bodyPadding: 20,",
                    "    items: [",
                    "        {",
                    "            xtype: 'treepanel',",
                    "            cls: 'category-setting',",
                    "            itemId: 'lkCateTree',",
                    "            style: 'border:1px solid #cecece',",
                    "            width: 220,",
                    "            header: false,",
                    "            hideHeaders: true,",
                    "            scrollable:true,",
                    "            store: tStore,",
                    "            rootVisible: false,",
                    "            useArrows: true,",
                    "            height:'100%',",
                    "            columns: [",
                    "                {",
                    "                    xtype: 'treecolumn',",
                    "                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {",
                    "                        var selectedCon = view.up('window').down('#selectedCon');//right container",
                    "                        var cates = field.value.split(',');//values in linked-code field",
                    "                        var cId = record.get('id');",
                    "                        var lbl;",
                    "                        var items = selectedCon.items.items;",
                    "                        var added = [];",
                    "                        for(var i=0; i<items.length; i++){",
                    "                            added.push(items[i].cId);",
                    "                        }",
                    "                        if(added.indexOf(cId) == -1){",
                    "                            val = '</span><i class=\"fa fa-plus-circle\" id=\"addIcon_'+cId+'\" style=\"margin-right:5px;cursor:pointer\" action=\"add\"></i><span>' + record.get('text');",
                    "                        }",
                    "                        else{",
                    "                            val = '</span><i class=\"fa fa-minus-circle\" id=\"addIcon_'+cId+'\" style=\"color:red;margin-right:5px;cursor:pointer\" action=\"del\"></i><span>' + record.get('text');",
                    "                        }",
                    "                        if(record.get('id') == 'root'){",
                    "                            val = '';",
                    "                        }",
                    "                        return val;",
                    "                    },",
                    "                    width: '100%',",
                    "                    text: 'MyTreeColumn'",
                    "                }",
                    "            ],",
                    "            listeners: {",
                    "                itemclick:function(dataview, record, item, index, e, eOpts) {",
                    "                    var action = e.target.getAttribute('action');",
                    "                    var selectedCon = dataview.up('window').down('#selectedCon');",
                    "                    if(action == 'add' || action === null){",
                    "                        var chkExist = selectedCon.down('#linkedLbl_' + record.get('id'));",
                    "                        if(chkExist) return;",
                    "                        var label = getLabel(record.get('id'), record.get('text'));",
                    "                        selectedCon.add(label);",
                    "                    }",
                    "                    if(action == 'del'){",
                    "                        selectedCon.down('#linkedLbl_' + record.get('id')).destroy();",
                    "                        Ext.get(e.target).setStyle('color', 'black');",
                    "                        Ext.get(e.target).setCls('fa fa-plus-circle');",
                    "                        e.target.setAttribute('action', 'add');",
                    "                    }",
                    "                }",
                    "            }",
                    "        },",
                    "        {",
                    "            xtype: 'container',",
                    "            flex: 1,",
                    "            height: '100%',",
                    "            itemId: 'eastCon',",
                    "            layout: {",
                    "                type: 'vbox',",
                    "                align: 'left',",
                    "                padding: '0 0 0 15'",
                    "            },",
                    "            items: [",
                    "                {",
                    "                    xtype: 'container',",
                    "                    flex: 1,",
                    "                    itemId: 'selectedCon',",
                    "                    scrollable: true,",
                    "                    width: '100%',",
                    "                    height:'100%',",
                    "                    listeners:{",
                    "                        render:function(component){",
                    "                            if(field.value === '' || field.value === null) return;",
                    "                            var cates = field.value.split('，');//values in linked-code field",
                    "                            for(var i=0; i<cates.length; i++){",
                    "                                var cId = cates[i].split('＠')[1];",
                    "                                var title = cates[i].split('＠')[0];",
                    "                                var lbl = getLabel(cId, title);",
                    "                                component.add(lbl);",
                    "                            }",
                    "                        }",
                    "                    }",
                    "                },",
                    "                {",
                    "                    xtype: 'container',",
                    "                    height: 35,",
                    "                    itemId: 'addCateCon',",
                    "                    width: '100%',",
                    "                    layout: {",
                    "                        type: 'hbox',",
                    "                        align: 'stretch',",
                    "                        pack: 'center'",
                    "                    },",
                    "                    items: [",
                    "                        {",
                    "                            xtype: 'button',",
                    "                            handler: function(button, e) {",
                    "                                var selectedCon = button.up('window').down('#selectedCon');",
                    "                                var items = selectedCon.items.items;",
                    "                                var values;",
                    "                                for(var i=0; i<items.length; i++){",
                    "                                    if(i === 0){",
                    "                                        values = items[i].text + '＠' + items[i].cId;",
                    "                                    }",
                    "                                    else{",
                    "                                        values += '，' + items[i].text + '＠' + items[i].cId;",
                    "                                    }",
                    "                                }",
                    "                                field.setValue(values);",
                    "                                button.up('window').close();",
                    "",
                    "                            },",
                    "                            style: 'float:right',",
                    "                            width: 110,",
                    "                            iconCls: 'x-fa fa-hdd-o',",
                    "                            text:loc.main.add",
                    "                        }",
                    "                    ]",
                    "                }",
                    "            ]",
                    "        }",
                    "    ]",
                    "}).show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setLikedCategory",
            "designerId": "20965e6e-1822-4e58-afbe-8fdffff7283e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "e",
                    "colsIdx"
                ],
                "fn": "getDbtextValue",
                "implHandler": [
                    "/* dropdown 위 아래로 움직여 선택 할 수 있도록 화살표 위, 아래 엔테 제외 */",
                    "if(e.keyCode == 38 || e.keyCode == 40 || e.keyCode == 13){",
                    "    return;",
                    "}",
                    "var url = domain + '/binder/expDataList';",
                    "Ext.data.JsonP.request({",
                    "    url:url,",
                    "    params:{",
                    "        cols_idx:colsIdx,",
                    "        data_val:field.getValue()",
                    "    },",
                    "    success:function(response){",
                    "        if(response.result) field.setStore(response.data_val);",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getDbtextValue",
            "designerId": "a989852b-c3a7-4fc7-9f5e-582b9a37bef6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "win",
                    "record",
                    "item"
                ],
                "fn": "submitMember",
                "implHandler": [
                    "var form = win.down('#memberForm');",
                    "form.down('#job').setValue(item.down('#fdJob').getValue());",
                    "form.down('#phone').setValue(record.get('nvm_cellphone'));",
                    "form.down('#email').setValue(record.get('nvm_email'));",
                    "form.down('#department').setValue(record.get('nvm_groupname'));",
                    "form.down('#userName').setValue(record.get('nvm_name'));",
                    "form.down('#duty').setValue(record.get('nvm_duty'));",
                    "form.down('#photo').setValue(record.get('nvm_file'));",
                    "",
                    "var url = domain + '/binder/addUpdate2';",
                    "var fd = new FormData();",
                    "fd.append('ca_id', win.categoryId);",
                    "fd.append('bd_group', 1);",
                    "fd.append('uploadType', 'form');",
                    "Ext.Object.each(form.getValues(), function(key, value){",
                    "    fd.append(key, value);",
                    "});",
                    "var request = new XMLHttpRequest();",
                    "request.open('POST', url);",
                    "request.onload = function(){",
                    "    if(request.status == 200){",
                    "        win.fireEvent('uploadcomplete');",
                    "    }",
                    "    else{",
                    "        alert('Error \" + oReq.status + \" occurred when trying to upload your file.<br \\/>');",
                    "    }",
                    "};",
                    "request.send(fd);",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "submitMember",
            "designerId": "e7f86453-b67f-4510-8bae-1b94c8ca9071"
        }
    ]
}