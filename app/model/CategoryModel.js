/*
 * File: app/model/CategoryModel.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.model.CategoryModel', {
    extend: 'Ext.data.Model',

    requires: [
        'Ext.data.field.Boolean'
    ],

    fields: [
        {
            mapping: 'title',
            name: 'text'
        },
        {
            name: 'lazy'
        },
        {
            mapping: 'data.id',
            name: 'id'
        },
        {
            mapping: 'data.ca_history',
            name: 'ca_history'
        },
        {
            mapping: 'data.ca_subject_title',
            name: 'ca_subject_title'
        },
        {
            mapping: 'data.ca_ca_info_view',
            name: 'ca_info_view'
        },
        {
            mapping: 'data.ca_use_email',
            name: 'ca_use_email'
        },
        {
            mapping: 'data.page_row',
            name: 'rows'
        },
        {
            mapping: 'data.ca_use_email_to',
            name: 'ca_use_email_to'
        },
        {
            mapping: 'data.cpmv',
            name: 'cpmv'
        },
        {
            mapping: 'data.del',
            name: 'del'
        },
        {
            mapping: 'data.download',
            name: 'download'
        },
        {
            mapping: 'data.isApproval',
            name: 'isApproval'
        },
        {
            convert: function(v, rec) {
                return (v == 1)? true: false;
            },
            mapping: 'data.isColor',
            name: 'isColor'
        },
        {
            mapping: 'data.layout',
            name: 'layout'
        },
        {
            mapping: 'data.view',
            name: 'view'
        },
        {
            mapping: 'data.write',
            name: 'write'
        },
        {
            convert: function(v, rec) {
                return (rec.get('lazy') === false);
            },
            name: 'leaf'
        },
        {
            convert: function(v, rec) {
                var opt = rec.data.option;
                if(opt !== null && opt !== undefined && opt !== ''){
                    var caOpt = getOption(opt);
                    var categoryName = caOpt.categoryName;
                    if(categoryName) v = categoryName;
                }
                return v;
            },
            name: 'title'
        },
        {
            mapping: 'data.code',
            name: 'code'
        },
        {
            type: 'boolean',
            defaultValue: false,
            name: 'isShortcut'
        },
        {
            convert: function(v, rec) {
                var value = false;
                if(v){
                    if(v == 1) value = true;
                }
                return value;
            },
            mapping: 'data.isBoard',
            name: 'isBoard'
        },
        {
            convert: function(v, rec) {
                if(!v){
                    v = '';
                }
                var opt = getOption(v);
                var value;
                if(opt.actor === undefined) value = false;
                if(opt.actor === true) value = false;
                if(opt.actor === false) value = true;
                if(userInfo.nv_level == 10) value = false;
                return value;
            },
            mapping: 'data.ca_option',
            name: 'isHidden'
        },
        {
            mapping: 'data.ca_option',
            name: 'option'
        }
    ]
});