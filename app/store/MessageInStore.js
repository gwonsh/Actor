/*
 * File: app/store/MessageInStore.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.store.MessageInStore', {
    extend: 'Ext.data.Store',

    requires: [
        'Ext.data.proxy.JsonP',
        'Ext.data.reader.Json',
        'Ext.data.field.Boolean'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            pageSize: 50,
            storeId: 'MessageInStore',
            autoLoad: false,
            proxy: {
                type: 'jsonp',
                api: {
                    read: domain+'/message/recv?psize=50'
                },
                limitParam: 'psize',
                reader: {
                    type: 'json',
                    rootProperty: 'messageList',
                    totalProperty: 'page.totCount'
                }
            },
            fields: [
                {
                    name: 'bd_idx'
                },
                {
                    name: 'content'
                },
                {
                    name: 'idx'
                },
                {
                    name: 'message_type'
                },
                {
                    name: 'recv_list'
                },
                {
                    name: 'send_date_time'
                },
                {
                    name: 'send_read_time'
                },
                {
                    name: 'subject'
                },
                {
                    name: 'send_id'
                },
                {
                    name: 'send_name'
                },
                {
                    name: 'send_photo'
                },
                {
                    name: 'recv_id'
                },
                {
                    name: 'unread'
                },
                {
                    type: 'boolean',
                    name: 'isDoc'
                }
            ],
            listeners: {
                load: {
                    fn: me.onJsonpstoreLoad,
                    scope: me
                }
            }
        }, cfg)]);
    },

    onJsonpstoreLoad: function(store, records, successful, operation, eOpts) {
        var noReadsNor = 0;
        var noReadsCfm = 0;
        for(var i=0; i<records.length; i++){
            if(records[i].get('message_type') !== 0) records[i].set('isDoc', true);
            if(records[i].get('send_read_time') === null){//check if the message has not been read
                if(records[i].get('message_type') === 0){//check if the message is a simple message
                    noReadsNor ++;
                    if(getController('Main').getListTab()){
                        if(getController('Main').getListTab().getActiveTab()){
                            if(getController('Main').getListTab().getActiveTab().id == 'messageInGrid'){
                                var tr = getController('Main').getListTab().getActiveTab().getEl().select('.x-grid-row').elements[i];
                                tr.style.backgroundColor = '#fdf8f0';//change color for unread tr
                                records[i].set('unread', true);
                            }
                        }
                    }
                }
                else{//check if the message is a document
                    noReadsCfm ++;
                    if(getController('Main').getListTab()){
                        if(getController('Main').getListTab().getActiveTab()){
                            if(getController('Main').getListTab().getActiveTab().id == 'documentInGrid'){
                                var tr = getController('Main').getListTab().getActiveTab().getEl().select('.x-grid-row').elements[i];
                                tr.style.backgroundColor = '#fdf8f0';//change color for unread tr
                                records[i].set('unread', true);
                            }
                        }
                    }
                }
            }
            else{
                records[i].set('unread', false);
            }
        }

        ////////////////////////////////////////////////////////////////
        // show number of unread messages on message or document box  //
        ////////////////////////////////////////////////////////////////

        var cateCon = Ext.getCmp('categoryContainer');
        var mBox = cateCon.down('#messageBox');
        var dBox = cateCon.down('#documentBox');
        if(!Ext.get('unReadMsgNum')){//save first title of message box
            cateCon.msgTitle = mBox.getTitle();
        }
        if(!Ext.get('unReadDocNum')){//save first title of document box
            cateCon.docTitle = dBox.getTitle();
        }
        var unR = cateCon.down('#unReadMessages');
        var unRDoc = cateCon.down('#unReadDocMessages');

        if(noReadsNor !== 0){
            unR.setHtml(noReadsNor);//write unread messages to message button(in)
            /* write unread messages to message box(in) */
            mBox.setTitle(cateCon.msgTitle + '<sup id="unReadMsgNum" style="margin:0 0 0 5px;font-size:12px;color:#5e93bb">'+noReadsNor+'</sup>');
        }
        if(noReadsCfm !== 0){
            unRDoc.setHtml(noReadsCfm);//write unread document to document button(in)
            /* write unread messages to document box(in) */
            dBox.setTitle(cateCon.docTitle + '<sup id="unReadDocNum" style="margin:0 0 0 5px;font-size:12px;color:#5e93bb">'+noReadsCfm+'</sup>');
        }
        store.fireEvent('messagestorecomplete', store);
    }

});