/*
 * File: app/view/ColorWindow.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.ColorWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.colorwindow',

    requires: [
        'Actor.view.ColorWindowViewModel',
        'Actor.view.ColorWindowViewController',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.form.Panel',
        'Ext.form.FieldSet',
        'Ext.form.field.ComboBox',
        'Ext.toolbar.Spacer',
        'Ext.view.View',
        'Ext.XTemplate'
    ],

    config: {
        erpDomain: 'http://hanapi.dipol.co.kr:8080',
        removedRecord: [
            
        ],
        symbolOrder: {
            
        }
    },

    controller: 'colorwindow',
    viewModel: {
        type: 'colorwindow'
    },
    id: 'color_window',
    itemId: 'colorWindow',
    title: 'Colorway',
    ghost: false,
    maximizable: true,
    maximized: true,

    layout: {
        type: 'hbox',
        align: 'stretch',
        padding: 15
    },
    items: [
        {
            xtype: 'container',
            flex: 1,
            height: '100%',
            itemId: 'designCon',
            padding: '0 0 10 0',
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    style: 'border:none',
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'btnFit',
                            icon: 'resources/images/ico_fit.png',
                            listeners: {
                                click: 'onBtnFitClick'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnActual',
                            icon: 'resources/images/ico_actual.png',
                            listeners: {
                                click: 'onBtnActualClick'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnPlus',
                            iconCls: 'fa fa-search-plus',
                            listeners: {
                                click: 'onBtnPlusClick'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnMinus',
                            iconCls: 'fa fa-search-minus',
                            listeners: {
                                click: 'onBtnMinusClick'
                            }
                        }
                    ]
                },
                {
                    xtype: 'form',
                    getDefaultColorList: function(rec) {

                        ////////////////////////
                        // get local colorway //
                        ////////////////////////
                        var me = this;
                        var cWin = me.up('window');
                        var url=domain+"/json/color";
                        var params={file_idx:rec.get('bd_file')[0].file_idx};
                        //call default colors
                        Ext.data.JsonP.request({
                            url:url,
                            method:'POST',
                            params: params,
                            success: function(response){
                                var symbolCon = me.up('window').down('#behalfCon');
                                var symbols = [], colorways;
                                for(var i=0; i<response.color.length; i++){
                                    response.color[i].cno = i + 1;
                                }
                                colorways = [{group:0, check:true, color:response.color, chasu:1, color_name:'디자인 디폴트', behalf:symbols, id:'default_1'}];
                                cWin.down('#designForm').originalColor=colorways[0];
                                cWin.getController().initialize(colorways);
                            },
                            failure: function() {
                                console.info("오류");
                            }

                        });
                    },
                    cloneCanvas: function(canvas) {
                        //create a new canvas
                        var newCanvas = document.createElement('canvas');
                        var context = newCanvas.getContext('2d');
                        //set dimensions
                        newCanvas.width = canvas.width;
                        newCanvas.height = canvas.height;
                        //apply the old canvas to the new one
                        context.drawImage(canvas, 0, 0);

                        //return the new canvas
                        return newCanvas;

                    },
                    setButton: function(isOrignal) {
                        var win=this.up("window");
                        if(isOrignal===false) {
                            win.down("#btnRestore").setDisabled(false);
                        }
                    },
                    setImage: function(file_path) {
                        // var me=this;
                        // var canvas=this.canvas;
                        // var drawing = new Image();
                        // this.mask(loc.main.loadingImage);
                        // drawing.crossOrigin="anonymous";
                        // drawing.src = file_path;
                        // drawing.onload=function() {
                        //     var drwWidth=drawing.width;
                        //     var drwHeight=drawing.height;
                        //     if(drawing.width>1024) {
                        //         var ratio=1024/drwHeight;
                        //         drwWidth=drwWidth*ratio;
                        //         drwHeight=1024;
                        //     }

                        //     canvas.width=drwWidth;
                        //     canvas.height=drwHeight;
                        //     ctx = canvas.getContext('2d'); // Get the drawing context of your canvas element.

                        //     ctx.oImageSmoothingEnabled = false;
                        //     ctx.mozImageSmoothingEnabled = false;
                        //     ctx.webkitImageSmoothingEnabled = false;
                        //     ctx.msImageSmoothingEnabled = false;
                        //     ctx.imageSmoothingEnabled = false;
                        // //     ctx.drawImage(drawing, 0, 0, drawing.width, drawing.height, 0, 0, drwWidth, drwHeight);
                        //     ctx.drawImage(drawing, 0, 0, drawing.width, drawing.height);
                        // //     ctx.drawImage(drawing, 0, 0, drwWidth, drwHeight);
                        //     // 	ctx.drawImage(drawing, 0, 0, drwWidth, drwHeight);
                        //     if(me.originalCanvas===undefined) {
                        //         me.originalCanvas=me.cloneCanvas(canvas);
                        //     }
                        //     me.unmask();
                        //     me.fireEvent('imageready');
                        // };

                    },
                    hexToRgb: function(hex) {
                        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                        return result ? {
                            r: parseInt(result[1], 16),
                            g: parseInt(result[2], 16),
                            b: parseInt(result[3], 16)
                        } : null;

                    },
                    getChasuList: function(designNo, chasu, dosu, colorings) {
                        var url = this.up('window').erpDomain + '/getColorList?design='+designNo+'&chasu='+chasu+'&cno=1';
                        var colors = [{num:''}];
                        Ext.data.JsonP.request({
                            url:url,
                            success:function(response){
                                var colorways=[];
                                var i, j;
                                for(i=0; i< colorings.length; i++){
                                    colorways[i] = [];
                                }
                                Ext.Array.each(response, function(entry, z){
                                    var cwNo = entry.CNO - 1;
                                    var jssu = entry.JSSU - 9;

                                    if(colorways[jssu] === undefined){
                                        colorways[jssu] = {colors:[]};
                                    }

                                    var c = (entry.DCOLOR === null)? entry.COLOR : entry.DCOLOR;
                                    var isExist=false;
                                    for (var i = 0; i < colorways[jssu].colors.length; i++) {
                                        if ((colorways[jssu].colors[i].cno === cwNo + 1) && (colorways[jssu].colors[i].name == c)) isExist=true;

                                    }
                                    if(c == '.') {
                                        c = colorways[jssu - 1].colors[cwNo-1].name;
                                    }

                                    if(isExist === false) colorways[jssu].colors.push({name:c, cno:cwNo + 1});
                                });
                                ////////////////////
                                // Colorway store //
                                ////////////////////
                                var colorStore = Ext.create('Ext.data.Store', {
                                    storeId:'ERPColorwayStore',
                                    autoLoad:true,
                                    fields:[
                                    {
                                        name:'칼라코드',
                                        mapping:'colors'
                                    }
                                    ],
                                    data:colorways
                                });
                                /////////////////////////////////
                                // Colorway list in ERP window //
                                /////////////////////////////////
                                var cListWin = Ext.create('Ext.window.Window', {
                                    width:600,
                                    padding:20,
                                    title:'Colorways-' + chasu,
                                    scrollable:true,
                                    layout:'fit',
                                    itemId:'colorwayList',
                                    maxHeight:windowMaxHeight,
                                    items:[
                                    {
                                        ///////////////////
                                        // Colorway grid //
                                        ///////////////////
                                        xtype:'gridpanel',
                                        width:'100%',
                                        columns:[
                                        {
                                            xtype:'rownumberer'
                                        },
                                        {
                                            text: 'Color',
                                            dataIndex:'colors',
                                            flex:1,
                                            renderer:function(v){
                                                var val = '';
                                                for(var i=0; i<v.length; i++){
                                                    var bgColor = (v[i].color === undefined)? '':v[i].color;
                                                    val += '<div style="background-color:'+bgColor+';display:inline-block;padding:2px 5px 2px 5px;border:1px solid #cecece;margin-right:5px; width:55px">';
                                                    val += v[i].name+'</div>';
                                                }
                                                return val;
                                            }
                                        },
                                        {
                                            xtype: 'actioncolumn',
                                            width:60,
                                            text:'보기',
                                            align:'center',
                                            items:[
                                            {
                                                icon:'resources/images/ico_colorwheel.png',
                                                tooltip:'색표시',
                                                itemId:'btnGetHex',
                                                cls:'action-icon',
                                                handler:function (grid, rowIndex, colIndex){
                                                    //add cliked colorway to color_window grid
                                                    var rec = grid.getStore().getAt(rowIndex);
                                                    var colors = rec.get('colors');
                                                    Ext.getCmp('color_window').getController().getHexByCode(rec, colors, colorWin.down('gridpanel'));
                                                }
                                            }
                                            ]
                                        }

                                        ],
                                        selModel: {
                                            selType: 'checkboxmodel'
                                        },
                                        store:colorStore,
                                        listeners:{
                                            itemclick:function(dataview, rec, item, index, e){
                                                if(e.target.className == 'x-grid-checkcolumn') return;//for click on checkbox
                                                //when click on activecolumn
                                                if(Ext.get(e.target).dom.localName == 'img') return;
                                                var colors = rec.get('colors');
                                                dataview.grid.addColorway(colors);
                                            },
                                            afterlayout:function onAfterLayout(dataview){
                                                /////////////////////////////////////////////////////////
                                                // Automatically fill color by hex to colorways in ERP //
                                                /////////////////////////////////////////////////////////
                                                dataview.un('afterlayout', onAfterLayout);
                                                var count = 0;
                                                var store = dataview.getStore(); //store for colorways in ERP
                                                var getColorways = function(rec, colors){
                                                    dataview.up('window').mask('추천 배색를 불러오고 있는 중입니다.');
                                                    Ext.getCmp('color_window').getController().getHexByCode(rec, colors, dataview);
                                                };
                                                Ext.getCmp('color_window').on('colorwayloadcomplete', function (win){
                                                    if(count < store.getCount() ){
                                                        getColorways(store.getAt(count), store.getAt(count).get('colors'));
                                                        count ++;
                                                    }
                                                    else{
                                                        if(dataview.up('window')) dataview.up('window').unmask();
                                                    }
                                                });
                                                getColorways(store.getAt(count), store.getAt(count).get('colors'));

                                            }
                                        },
                                        addColorway:function(colors){
                                            var colorWin = Ext.getCmp('color_window');
                                            var colorStore= colorWin.down('#colorGrid').getStore();
                                            var genMainColor={group:colorStore.getCount(), check:false, color:colors, color_name:''};
                                            var record = Ext.data.Record.create(genMainColor);
                                            record.set('chasu', colorWin.down('#cbChasu').getValue()); // add chasu to store
                                            record.set('user', userInfo.nv_name);
                                            colorStore.add(record);
                                            var colorwayList = colorWin.down('#colorGrid');
                                            colorwayList.refresh();
                                            cListWin.close();
                                        }
                                    }
                                    ],
                                    dockedItems:[//add colorway to color_window grid
                                    {
                                        xtype:'container',
                                        dock:'bottom',
                                        width:'100%',
                                        margin:'15 0 0 0',
                                        items:[
                                        {
                                            xtype:'button',
                                            text:loc.main.add,
                                            style:'float: right',
                                            width:100,
                                            handler:function(button){
                                                var selected = button.up('window').down('gridpanel').getSelectionModel().getSelection();
                                                var grid = button.up('window').down('gridpanel');
                                                for(var i=0; i<selected.length; i++){
                                                    grid.addColorway(selected[i].get('colors'));
                                                }
                                            }
                                        }
                                        ]
                                    }
                                    ]

                                }).show();
                            }
                        });
                    },
                    setAllChangeColor: function(originalRec, targetRec) {
                        var form = Ext.getCmp('color_window').down('#designForm');
                        var originalCanvas=form.cloneCanvas(form.originalCanvas);
                        var targetCanvas=form.canvas; // 칼라웨이를 적용할 캔버스
                        var count = 0;
                        form.on('colorapplied', function removeMask(){
                            //     form.un('colorapplied', removeMask);
                            count ++;
                            if(count == originalRec.length - 1){
                                count = 0;
                                form.unmask();
                            }
                        });
                        for(var i=0; i<originalRec.length;i++) {
                            if(targetRec.length-1>=i) {
                                form.setChangeColor(originalRec[i].color, targetRec[i].color, originalCanvas, targetCanvas);
                            }
                        }

                    },
                    setChangeColor: function(original, target, originalCanvas, targetCanvas) {
                        // originalCanvas : form.cloneCanvas(form.originalCanvas);
                        // targetCanvas : form.canvas; // 칼라웨이를 적용할 캔버스

                        var original_color=this.hexToRgb(original);
                        var target_color=this.hexToRgb(target);
                        //for none exist color, set color to white
                        if(original_color === null) original_color = {r:255, g:255, b:255};
                        if(target_color === null) target_color = {r:255, g:255, b:255};
                        var oriCtx = originalCanvas.getContext('2d'); // Get the drawing context of your canvas element.
                        var img = oriCtx.getImageData(0, 0, originalCanvas.width, originalCanvas.height), // Pull a rectangle of image data from context
                        data = img.data, // Image image data array.
                        len = data.length; // Length of data array.
                        this.setButton(false);
                        //    this.isOrignal=false;

                        var t=1;
                        i=0;
                        do {
                            if(data[i]==original_color.r && data[i+1]==original_color.g && data[i+2]==original_color.b) {
                                data[i] = (1-t) + (target_color.r*t);
                                data[i+1] = (1-t) + (target_color.g*t);
                                data[i+2] = (1-t) + (target_color.b*t);
                            }
                            i+=2; //data[i] = data[i++] * 1 + 0; << skip alpha component. Adjust as needed.

                        } while(i < len);
                        oriCtx.putImageData(img, 0, 0);//originalCanvas context
                        var tgtCtx = targetCanvas.getContext('2d');//targetCanvas context
                        //apply the old canvas to the new one
                        tgtCtx.clearRect(0, 0, this.originalCanvas.width, this.originalCanvas.height);
                        tgtCtx.drawImage(originalCanvas, 0, 0);

                        this.baseCanvas = this.cloneCanvas(originalCanvas);
                        this.up('window').unmask();
                        this.fireEvent('colorapplied');//to read count from setAllChangeColor

                    },
                    appliedGroup: 0,
                    flex: 1,
                    itemId: 'designForm',
                    scrollable: true,
                    listeners: {
                        afterrender: 'onFormAfterRender',
                        beforerender: 'onFormBeforeRender'
                    }
                }
            ]
        },
        {
            xtype: 'container',
            height: '100%',
            itemId: 'eastCon',
            minWidth: 320,
            padding: 15,
            scrollable: true,
            style: 'border-left:1px solid #cecece',
            width: 320,
            layout: 'vbox',
            items: [
                {
                    xtype: 'fieldset',
                    itemId: 'chasuFieldSet',
                    style: 'background-color:white !important;border: 1px solid #cecece;',
                    width: 288,
                    title: '차수',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            itemId: 'cbChasu',
                            width: 65,
                            labelWidth: 45,
                            displayField: 'chasu',
                            valueField: 'chasu',
                            listeners: {
                                select: 'onCbChasuSelect'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnChasuInfo',
                            margin: '0 0 0 5',
                            iconCls: 'fa fa-info-circle',
                            listeners: {
                                click: 'onBtnChasuInfoClick',
                                afterrender: 'onBtnChasuInfoAfterRender'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnAddChasu',
                            margin: '0 0 0 5',
                            bind: {
                                text: '{add}'
                            },
                            listeners: {
                                afterrender: 'onButtonAfterRender',
                                click: 'onBtnAddChasuClick'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnUpdateChasu',
                            margin: '0 0 0 5',
                            bind: {
                                text: '{update}'
                            },
                            listeners: {
                                afterrender: 'onBtnUpdateChasuRender',
                                click: 'onBtnUpdateChasuClick'
                            }
                        }
                    ]
                },
                {
                    xtype: 'tbspacer',
                    height: 5
                },
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    width: '100%',
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'btnNewColorway',
                            iconCls: 'fa fa-file-o',
                            listeners: {
                                click: 'onBtnNewColorwayClick',
                                render: 'onBtnNewColorwayRender'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnCopyColorway',
                            iconAlign: 'top',
                            iconCls: 'fa fa-clone',
                            listeners: {
                                render: 'onBtnCopyColorwayRender',
                                click: 'onBtnCopyColorwayClick'
                            }
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {


                                var dsnWin = Ext.create(appName + '.view.ActorWindow', {
                                    title:'색정보를 가져올 디자인 선택',
                                    listeners:{
                                        afterrender:function(win){
                                            win.disableEvent();
                                        }
                                    }
                                }).show();
                                var tree =  dsnWin.down('#tree');
                                tree.on('itemclick', function(cateTree, rec){
                                    if(rec.data){
                                        var hasColorChip = (rec.data.data.isColor == 1)? true : false;
                                        if(!hasColorChip){
                                            Ext.toast(loc.error.hasNoColorDataCategory);
                                        }
                                        else{
                                            dsnWin.down('gridpanel').categoryId = rec.get("id");
                                            getController('Main').getServerData(rec.get("id"), '&ca_id=' + rec.get("id"), dsnWin.down('gridpanel'));
                                        }
                                    }
                                });
                                tree.getStore().on('load', function(treeStore){
                                    var cfgStore = Ext.getStore('ConfigStore');
                                    //show default design library that configured
                                    var dsnCate = cfgStore.getAt(0).get('designSourceCategory');
                                    var node = treeStore.getNodeById(dsnCate);
                                    tree.getSelectionModel().select(node);
                                    //show category that sonfigured at actor.json
                                    tree.fireEvent('itemclick', tree, node, tree.el, '', event);
                                });
                                //when click one of rows in the list
                                dsnWin.getGrid().on('itemclick', function(grid, record){
                                    var url=domain+"/json/color";
                                    var params={file_idx:record.get('bd_file')[0].file_idx};
                                    var cName = record.get('bd_file')[0].file_name;
                                    Ext.data.JsonP.request({
                                        url:url,
                                        method:'POST',
                                        params: params,
                                        success: function(response){
                                            var colorStore = button.up('window').getViewModel().getStore('ColorwayStore');
                                            var genMainColor = {group:colorStore.getCount(), check:false, color:response.color, color_name:cName};
                                            var record = Ext.data.Record.create(genMainColor);
                                            colorStore.insert(1, record);
                                            var dataview=button.up('window').down('dataview');
                                            dataview.refresh();
                                            dsnWin.close();
                                        },
                                        failure: function() {
                                            console.info("오류");
                                        }

                                    });

                                });
                            },
                            hidden: true,
                            itemId: 'btnCopyColorway1',
                            iconAlign: 'top',
                            iconCls: 'fa fa-clone',
                            listeners: {
                                render: 'onBtnCopyColorwayRender1'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnGetERPData',
                            iconAlign: 'top',
                            iconCls: 'fa fa-server',
                            listeners: {
                                render: 'onBtnGetERPDataRender',
                                click: 'onBtnGetERPDataClick'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnRemove',
                            iconCls: 'fa fa-trash-o',
                            listeners: {
                                render: 'onBtnRemoveRender',
                                click: 'onBtnRemoveClick'
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            hidden: true,
                            itemId: 'btnRestore',
                            ui: 'plain-toolbar-small',
                            iconAlign: 'top',
                            iconCls: 'fa fa-refresh',
                            listeners: {
                                click: 'onBtnRestore',
                                render: 'onRecoverybtnRender'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnSave',
                            style: 'font-size:18px',
                            iconCls: 'fa fa-floppy-o',
                            listeners: {
                                click: 'onBtnSaveClick',
                                render: 'onBtnSaveAsRender'
                            }
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    setBehalfs: function(record, store) {
                        var i;
                        var me = this;
                        var bhf = [];
                        var chasu = record.get('chasu');
                        var designNo = this.up('window').down('form').getRecord().get('bd_subject');
                        var bhStore;
                        me.symbols = [];
                        // if(Ext.getStore('behalf_' + designNo + '_' + chasu)){
                        //     bhStore = Ext.getStore('behalf_' + designNo + '_' + chasu);
                        //     bhStore = null;
                        // }
                        //ERP 서버에서 차수에 맞는 디자인 기호 불러오기
                        bhStore = this.up('window').getController().getColorSymbol(designNo, chasu);
                        //ERP에서 디자인 기호를 불러온 store가 load되면
                        bhStore.on('load', function onSymbolsLoad(st){
                            bhStore.un('load', onSymbolsLoad);
                            me.symbols = [];
                            for(i=0; i<st.getCount(); i++){
                                if(me.items){
                                    me.items.items[i].setText(st.getAt(i).get('color'));
                                    me.symbols.push(st.getAt(i).get('color'));
                                }
                            }
                            if(st.getCount() === 0){//서버에 없으며 1차 복사해서 사용(일단 1차는 무조건 있다고 가정)
                                var fstChaSto = Ext.getStore('behalf_' + designNo + '_1');
                                fstChaSto.each(function(rec){
                                    me.symbols.push(rec.get('color'));
                                });
                            }
                            me.fireEvent('defaultsymbolscomplete', me);

                        });

                        me.up('window').down('#colorGrid').setHidden(false);

                    },
                    symbols: [
                        
                    ],
                    itemId: 'behalfCon',
                    margin: '7 0 0 0',
                    style: 'background-color:white !important;border: 1px solid #cecece;',
                    width: 288,
                    layout: 'column',
                    title: '디자인기호'
                },
                {
                    xtype: 'container',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'component',
                            height: 22,
                            style: 'cursur:pointer',
                            width: 22,
                            listeners: {
                                render: 'onComponentRender'
                            }
                        },
                        {
                            xtype: 'component',
                            height: 22,
                            itemId: 'fillAllColor',
                            style: {
                                'background-image': 'url(resources/images/ico_colorwheel.png)',
                                'background-repeat': 'no-repeat',
                                'background-position': 'center',
                                cursor: 'pointer'
                            },
                            width: 22,
                            listeners: {
                                render: 'onFillAllColorRender'
                            }
                        }
                    ]
                },
                {
                    xtype: 'dataview',
                    cls: 'tpl-6gnpxlbi',
                    flex: 1,
                    hidden: true,
                    itemId: 'colorGrid',
                    margin: '15 0 0 0',
                    scrollable: true,
                    width: '100%',
                    itemCls: 'color-list-item',
                    itemSelector: '.colorways-unit',
                    itemTpl: Ext.create('Ext.XTemplate', 
                        '<tpl for=\'.\'>',
                        '    <tpl if="group == 0">',
                        '        <div class=\'colorways-unit\'>',
                        '            <input type=\'radio\' class=\'color-chk\' name=\'color_select\' value=\'{group}\' idx=\'{[xindex]}\' {[this.getCheck(values)]}>',
                        '            <span style="color:#678fcd;cursor:pointer" class=\'colorway-name\'>{color_name}</span>',
                        '            <ul>',
                        '                <tpl for="color">',
                        '                    <li>',
                        '                        <span>{[this.getColorIndex(xindex, values, true)]}</span>',
                        '                        <i class=\'color-button\' style=\'width:20px;height:20px;display:inline-block;background-color:{color}\' idx=\'{[xindex]}\'  title="{color}"></i>',
                        '                        <input class="defalut-color" type=\'text\' name=\'color_name\' class=\'color-name\' value=\'{[this.getBehalf(parent, xindex)]}\' idx=\'{[xindex]}\' style=\'height:26px;border:1px solid #cecece;color:#999999;width:100px\'/>',
                        '                        <button class="btn-setsymbol"  idx=\'{[xindex]}\'>기호적용</button>',
                        '                    </li>    ',
                        '                </tpl>    ',
                        '            </ul>    ',
                        '        </div>    ',
                        '    <tpl else>',
                        '        <div class=\'colorways-unit\'>',
                        '            {[this.setIndex()]}        ',
                        '            <input type=\'radio\' name=\'color_select\' class=\'color-chk\' value=\'{group}\' idx=\'{[xindex]}\' {[this.getCheck(values)]}>',
                        '            <span style=\'cursor:default;color:#678fcd;cursor:pointer\'  class=\'colorway-name\'>{color_name}</span>',
                        '            <i class="fa fa-trash remove-record" aria-hidden="true" index="{#}" style=\'margin-top:7px;float:right;display:{[this.checkCount(values)]};margin-left:10px;cursor:pointer\'></i>    ',
                        '            <i class="fa fa-pencil edit-title" oldname="{color_name}"  aria-hidden="true" style=\'margin-top:7px;float:right;display:{[this.checkCount(values)]};margin-left:10px;cursor:pointer\'></i>',
                        '            <ul>',
                        '                <tpl for="color">',
                        '                    <li>',
                        '                        <span>{[this.getColorIndex(xindex, values)]}</span>',
                        '                        <i class=\'color-button\' style=\'background-color:{color}\' idx=\'{[xindex]}\' title="{color}"></i>',
                        '                        <input type=\'text\' name=\'color_name\' class=\'color-name\' value=\'{name}\' idx=\'{[xindex]}\' style=\'border:1px solid #cecece;color:#999999;width:130px\'/>',
                        '                        <i class="fa fa-chevron-up color-button-up"  idx=\'{[xindex]}\' aria-hidden="true"></i>',
                        '                        <i class="fa fa-chevron-down color-button-down" idx=\'{[xindex]}\' aria-hidden="true"></i>',
                        '                        <i class="fa fa-th colorchip" idx=\'{[xindex]}\' aria-hidden="true"></i>',
                        '                    </li>',
                        '                </tpl>',
                        '            </ul>',
                        '        </div>',
                        '    </tpl>',
                        '</tpl>',
                        {
                            checkCount: function(values) {
                                if(values.group === 0){
                                    return 'none';
                                }
                                else{
                                    return 'inline';
                                }
                            },
                            getCheck: function(values) {
                                var val = (values.check)? 'checked' : '';
                                return val;
                            },
                            setIndex: function() {
                                this.index = this.index + 1;
                            },
                            getColorIndex: function(index, values, isDefault) {
                                var val = index.toString();
                                if(val.length == 1) val = '0' + val;
                                //show index number in red if color is not defined
                                if(isDefault) values.isExist = true; // 디자인디폴트의 여우 기본 색 표시
                                if(!values.isExist) val = '<span style="color:red">' + val + '</span>';
                                return val;
                            },
                            getBehalf: function(parent, index) {
                                if(parent[0].behalf.length > 0){
                                    if(parent[0].behalf[index -1] !== undefined){
                                        return parent[0].behalf[index -1];
                                    }
                                }
                            }
                        }
                    ),
                    listeners: {
                        itemclick: 'onDataviewItemClick'
                    }
                }
            ]
        }
    ],
    listeners: {
        render: 'onColor_windowRender',
        beforerender: 'onColor_windowBeforeRender',
        close: 'onColor_windowClose'
    }

});