/*
 * File: app/view/LinkingWindowViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.LinkingWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.linkingwindow',

    onListForLinkCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var linkWin = tableview.up('window');
        var dropBox = linkWin.down('#dropBox');
        /* check units in dropBox of linkingWindow */
        var preUnit = dropBox.down('#unit_' + record.data.bd_idx);
        /* check units in linkedData of newRequest view */
        /* newRequest를 통해 업로드하거나 수정할 때만 체크 */
        var uploadWin = linkWin.openner;
        /* if request win is opened that is new request mode or edit request mode */
        if(uploadWin && !uploadWin.hidden){
            var oldUnit = linkWin.openner.down('#' + linkWin.getItemId() + '_unitCon').down('#unit_' + record.data.bd_idx);
            /* check if it has been added */
            if(oldUnit !== null || preUnit !== null){
                Ext.toast(loc.main.duplicated);
                return;
            }
        }
        else{
            /* in case edit by viewer directly */
            if(preUnit !== null){
                Ext.toast(loc.main.duplicated);
                return;
            }
        }

        var linkUnit = Ext.create(appName + '.view.LinkUnit', {
            itemId:'unit_' + record.data.bd_idx
        });


        if(record.data.thumb_path){
            linkUnit.down('#image').setStyle('background-image', 'url(' +record.data.thumb_path+ ')');
        }
        else{
            linkUnit.down('#image').setStyle('background-image', 'url(resources/images/ico_noimage.gif');
        }

        linkUnit.getViewModel().setData({
            src:record.data.thumb_path,
            bdIdx:record.data.bd_idx,
            unitTitle:record.data.bd_subject
        });
        dropBox.add(linkUnit);
    },

    onDroipBoxRender: function(component, eOpts) {
        var dropEl = component.el.dom;
        var me = component;
        var dropTarget = Ext.create('Ext.dd.DropTarget', dropEl, {
            ddGroup:'gridData',
            notifyEnter:function(ddSource, e, data){
                /* hide 'drop here' message when a data dragged on dropBox */
                me.down('#header').setHtml('');
            },
            notifyDrop:function(ddSource, e, data){
                var record = ddSource.dragData.records[0];
                /* check units in dropBox of linkingWindow */
                var preUnit = me.down('#unit_' + record.data.bd_idx);
                var oldUnit = null;
                /* check units in linkedData of newRequest view */
                var uploadWin = component.up('window').openner;
                /* if request win is opened that is new request mode or edit request mode */
                if(uploadWin && !uploadWin.hidden){
                    oldUnit = uploadWin.down('#' + me.up('window').getItemId()).down('#unit_' + record.data.bd_idx);
                }
                /* check if it has been added */
                if(oldUnit !== null || preUnit !== null){
                    Ext.toast(loc.main.duplicated);
                    return;
                }
                /* drop into dropBox the dragged data */
                var linkUnit = Ext.create(appName + '.view.LinkUnit', {
                    itemId:'unit_' + record.data.bd_idx
                });
                linkUnit.getViewModel().setData({
                    src:record.data.thumb_path,
                    bdIdx:record.data.bd_idx,
                    unitTitle:record.data.bd_subject
                });
                if(record.data.thumb_path){
                    linkUnit.down('#image').setStyle('background-image', 'url(' +record.data.thumb_path+ ')');
                }
                else{
                    linkUnit.down('#image').setStyle('background-image', 'url(resources/images/ico_noimage.gif');
                }
                me.add(linkUnit);
            }
        });
    },

    onWindowBeforeRender: function(component, eOpts) {
        var tree = component.down('#tree');
        tree.setTitle(loc.main.category);
        var tStore = Ext.create('Ext.data.TreeStore', {
            //     model:'CateModel',
            fields:[
            {name:'title'},
            {name:'lazy'},
            /* category id to expand tree automactically when click expand icon */
            /* cateList?node = 'id' */
            {
                name:'id',
                mapping:'data.id'
            },
            {
                name:'text',
                mapping:'title'
            },
            /* check if need to show the expand icon  */
            {
                name:'leaf',
                convert:function(v, record){
                    return (record.get('lazy') === false);
                }
            }
            ],
            proxy: {
                type: 'jsonp',
                reader: {
                    type: 'json'
                },
                api: {
                    read: getCategoryListApi()
                }
            }
        });
        tStore.load();
        tree.setStore(tStore);
        var ctrl = getController('Main');
        ctrl.getServerData('', '', component.down('gridpanel'));
        tree.getSelectionModel().on('select', function(sm, node, index){
            component.down('gridpanel').categoryId = node.id;
            ctrl.getServerData(node.id, '&ca_id=' + node.id, component.down('gridpanel'));
        });
    }

});
