/*
 * File: app/view/MainViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.MainViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.mainview',

    getActiveTab: function() {
        return this.getView().down('#listTab').getActiveTab();
    },

    getSelected: function() {
        if(this.getView().down('#listTab').getActiveTab() === undefined) return undefined;
        var tab = this.getView().down('#listTab').getActiveTab().getGrid();
        return tab.getSelectionModel().getSelection();
    },

    copyData: function(targetId, bdIdx, title) {
        var url = domain + '/binder/copy';
        var confirm = Ext.Msg.show({
            title:loc.main.caution,
            message: loc.main.copyMessage + '<br><spna style="font-size:15px">Copy to:<strong>' + title + '</strong></span>',
            buttons: Ext.Msg.YESNO,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {
                if (btn === 'yes') {
                    Ext.data.JsonP.request({
                        url:url,
                        params:{
                            ca_id:targetId,
                            bd_idx:bdIdx
                        },
                        success:function(response){
                            Ext.toast(loc.main.copied);
                            if(Ext.getStore('dStore_' + targetId)){
                                Ext.getStore('dStore_' + targetId).load();
                            }
                        }
                    });
                } else {

                }
            }
        });
    },

    newComment: function() {
        var selected = getController('Main').getMainView().getController().getSelected();
        if(!selected){
            Ext.toast(loc.upload.noneSelected);
            return;
        }
        var viewer = Ext.getCmp('viewPanel').down('#viewer');
        if(!viewer){
            Ext.toast(loc.upload.noneSelected);
            return;
        }
        var me = this;
        var bdIdx = viewer.info.bd_idx;

        var cmtWin = Ext.create('Ext.window.Window', {
            width:600,
            height:320,
            padding:10,
            title:loc.main.newComment,
            items:[
                {
                    xtype: 'htmleditor',
                    height: 200,
                    itemId: 'commentNew',
                    style: 'background-color:#ffffff',
                    width: '100%',
                    hideLabel: true,
                    enableFont: false
                },
                {
                    xtype:'container',
                    layout:{
                        type:'hbox',
                        pack:'center'
                    },
                    margin:'30 0 0 0',
                    items:[
                        {
                            xtype:'button',
                            text:loc.main.ok,
                            glyph:'xf05d@FontAwesome',
                            width:90,
                            handler:function(button){
                                var value = button.up('window').down('htmleditor').getValue();
                                me.submitComment(value, bdIdx);
                                button.up('window').close();
                            }
                        },
                        {
                            xtype:'button',
                            text:loc.upload.cancel,
                            glyph:'xf00d@FontAwesome',
                            width:90,
                            margin:'0 0 0 10',
                            handler:function(button){
                                button.up('window').close();
                            }
                        }
                    ]
                }
            ]
        });
        cmtWin.show();
    },

    submitComment: function(value, idx) {
        var me = this;
        var cmtUrl = getCommentUpdateApi();
        if(value === ''){
            Ext.toast(loc.main.noComment);
            return;
        }

        Ext.data.JsonP.request({
            url:cmtUrl,
            params:{
                bd_idx:idx,
                cmt_content:value
            },
            success:function(response){
                if(response.result){
                    Ext.toast(loc.upload.posted);
                    me.setCommentList(idx);
                }
                else{
                    alert(loc.main.networkProblem);
                }
            },
            failure:function(response){
                alert(loc.main.networkProblem);
            }

        });
    },

    setCommentList: function(idx) {
        var viewer = Ext.getCmp('viewPanel').down('#viewer');
        if(!viewer) return;
        var cmtListUrl = getCommentListApi();
        Ext.data.JsonP.request({
            url:cmtListUrl,
            params:{
                bd_idx:idx
            },
            success:function(response){
                var cPan = Ext.getCmp('commentPanel');
                if(!response.binderCList) return;
                cPan.setData(response.binderCList);
                if(response.binderCList.length === 0){
                    cPan.setCollapsed(true);
                }
                else{
                    if(!viewer.initialized){
                        cPan.setCollapsed(false);
                        viewer.initialized = true;
                    }
                    if(viewer.comments < response.binderCList.length){//when someone add comment
                        cPan.setCollapsed(false);
                        Ext.toast(loc.viewer.newCommentAdded);
                    }
                    if(viewer.comments > response.binderCList.length){//when someone removed comment
                        Ext.toast(loc.viewer.commentDeleted);
                    }
                    viewer.comments = response.binderCList.length;
                }
            },
            failure:function(response){
                //alert(locale.main.networkProblem);
            }

        });
    },

    showHistory: function() {
        var me = this;

        var ctrl = getController('Main');
        var grid = this.getActiveTab().getGrid();
        var viewer = Ext.getCmp('viewPanel').down('#viewer');
        var values = viewer.info;

        var bdIdx = values.bd_idx;
        var url = getHistoryApi();
        var cId = this.getActiveTab().categoryId;
        var colsList = this.getActiveTab().categoryColsList;
        var flds = Ext.getStore('dStore_' + cId).fields;
        var gCols = ctrl.getGridColumns(colsList, grid, true);

        /* store for grid */
        var hStore = Ext.create('Ext.data.Store', {
            storeId:'hStore_' + bdIdx,
            fields: flds,
            proxy: {
                type: 'jsonp',
                url:url + '?bd_idx=' + bdIdx,
                limitParam:'page_size',
                reader: {
                    type: 'json',
                    rootProperty: 'binderList',
                    totalProperty: 'page.totCount'
                }
            },
            listeners:{
                load:function onHStoreLoad(store, records){
                    if(store.getCount() === 0){
                        Ext.toast('버전 정보가 없습니다.');
                        return;
                    }
                    store.un('load', onHStoreLoad);
                    var hw = Ext.create(appName + '.view.HistoryWindow', {
                        maxHeight:windowMaxHeight,
                        title:loc.main.historyList
                    });
                    hw.show();
                    var historyGrid = hw.down('#historyGrid');
                    var hsViewer = hw.down('#historyViewer');
                    hsViewer.setStyle('border-bottom', '1px solid #cccccc');
                    hsViewer.colsList = colsList;
                    /* to show up bottom line of header */
                    hsViewer.getHeader().removeCls('x-docked-top');
                    historyGrid.reconfigure(store, gCols);
                    historyGrid.setStyle('border-right', '1px solid #cccccc');
                    var currentIndex = -1;
                    historyGrid.on('itemclick', function( grid, record, item, index, e, eOpts ){
                        if(currentIndex == index){
                            hsViewer.setCollapsed(true);
                            currentIndex = -1;
                            return;
                        }
                        currentIndex = index;
                        var itemInfo = record.data;
                        itemInfo.subjectTitle = (me.getActiveTab().subjectTitle === undefined)? loc.main.title : me.getActiveTab().subjectTitle;
                        itemInfo.bd_name = record.get('mb_id');
                        itemInfo.bd_last_modify_id = record.get('mb_id');
                        html = formLib[3].setHtml(record.data, hsViewer);
                        hsViewer.setCollapsed(false);
                        hsViewer.setTitle('History ' + record.get('bd_idx') + '-' + (index + 1).toString());
                    });
                    hsViewer.on('titlechange', function(container){
                        /* prepare for when click on attached */
                        var attachFile = container.el.select('.viewer-attach-image');
                        getController('Viewer').viewAttachedFile(attachFile.elements);
                    });

                    /* check what has been changed in store */
                    var gridView = historyGrid.getView();
                    hw.getController().showChanged(store, gridView, true);
                }
            }
        });

        hStore.load();
    },

    onBtnLogoutClick: function(button, e, eOpts) {
        var logoutFrame = Ext.getBody().createChild({
            tag:'iframe',
            cls:'x-hidden',
            id:'iFrame',
            name:'iFrame',
            isReady:false
        });
        var logout = function logoutApp(){
            document.location.href = 'index.html';
        };
        var url = domain + "/member/logout";
        logoutFrame.dom.src = url;

        setTimeout(logout, 500);
    },

    onBtnGoPdClick: function(button, e, eOpts) {
        var pdURL = domain + '/main/category.jsp';
        window.open(pdURL, '_blank');
    },

    onBtnVersionClick: function(button, e, eOpts) {
        Ext.create('Ext.window.Window', {
            with:350,
            height:120,
            layout:'vbox',
            title:'Version',
            iconCls:'fa fa-info',
            padding:20,
            items:[
            {
                xtype:'label',
                text:'PD version : 11',
            },
            {
                xtype:'label',
                text:'Actor vertion : 4.171201'
            }
            ]
        }).show();
    },

    onBtnNewClick: function(button, e, eOpts) {
        var activeTab = this.getActiveTab();
        if(!activeTab){
            Ext.toast(loc.config.noCategorySelect);
            return;
        }
        if(activeTab.isMessage){
            getController('Main').selectMember('', 'message');
            return;
        }
        if(!getController('Main').hasUserPermission('write')){//check the wite permission
            Ext.toast(loc.error.lowerLevelToWrite);
            return;
        }
        var caOpt = activeTab.cateOption;
        if(caOpt.categoryCode == 'member'){
            getController('Main').selectMember(activeTab.categoryId);
        }
        else{
            /* get new data values */
            Ext.data.JsonP.request({
                url:getDataWriteApi(),
                params:{
                    ca_id:activeTab.categoryId,
                    html:0
                },
                success:function(response){
                    var colsList = response.categoryColsList;
                    getController('Post').showNewPost(activeTab, '', colsList);
                },
                failure:function(response){
                    alert(loc.main.networkProblem);
                }

            });
        }
    },

    onBtnCopyClick: function(button, e, eOpts) {
        // create new category store to avoid conflict with the store in main tree
        var me = this;
        var selected = me.getSelected();
        if(selected === undefined){
            Ext.toast(loc.config.noCategorySelect);
            return;
        }
        if(selected.length === 0){
            Ext.toast(loc.upload.noneSelected);
            return;
        }
        if(selected.length > 1){
            Ext.toast(loc.main.selectOnlyOne);
            return;
        }
        if(!getController('Main').hasUserPermission('copy')){//check the permission
            Ext.toast(loc.error.lowerLevelToCopy);
            return;
        }
        var bdIdx = selected[0].get('bd_idx');
        var sStore = Ext.create('Ext.data.TreeStore', {
            model: 'Actor.model.CategoryModel',
            autoLoad:true,
            proxy: {
                type: 'jsonp',
                api: {
                    read: getCategoryListApi()
                },
                reader: {
                    type: 'json'
                }
            },
            filters: {
                filterFn: function(item) {
                    var opt = {};
                    if(item.get('option')) opt = getOption(item.get('option'));
                    if(!item.get('isHidden') && !item.get('isBoard')) show =  true;
                    if(opt.categoryCode == 'workGroup') show = false;
                    if(opt.categoryCode == 'taskGroup') show = false;
                    if(opt.categoryCode == 'salesGroup') show = false;
                    return show;
                }
            }
        });
        var copyWin = Ext.create('Ext.window.Window', {
            modal:true,
            ghost:false,
            scrollable:true,
            title:loc.upload.selectCategory,
            padding:20,
            items:[
            {
                xtype:'label',
                cls: 'form-title-label',
                text:loc.menu.copyToCurrentCategory//copyt to current category
            },
            {
                xtype:'checkboxfield',
                labelWidth:0,
                padding:'10 0 10 0',
                listeners:{
                    change:function(sb){
                        if(sb.value){
                            var cId = me.getActiveTab().categoryId;
                            var title = me.getActiveTab().title;
                            var selected = me.getSelected();
                            var bdIdx = selected[0].get('bd_idx');
                            me.copyData(cId, bdIdx, title);
                        }
                    }
                }
            },
            {
                xtype:'label',
                cls: 'form-title-label',
                text:loc.upload.selectCategory//select category
            },
            {
                xtype: 'treepanel',
                width:400,
                height:500,
                title:'Tree',
                rootVisible:false,
                store:sStore,
                frameHeader: false,
                header: {
                    hidden: true
                },
                hideHeaders: true,
                columns: [
                {
                    xtype: 'treecolumn',
                    dataIndex:'title',
                    width: '100%',
                    renderer:function(value, metaData, record, rowIndex, colIndex, store, view){
                        var caOpt = getOption(record.get('option'));
                        var cIcon = caOpt.icon;
                        //in case no icon, set default
                        if(!cIcon) cIcon = 'folder-o';
                        var css = 'style="float:right;cursor:pointer;opacity:0.4"';
                        var val = '';
                        val    += 	'<i class="fa fa-'+cIcon+'" aria-hidden="true"></i>' + ' <span class="tree-title">' + record.get('title') + '</span>';
                        return val;
                    }
                }
                ] ,
                listeners:{
                    itemclick:function( node, record, item, index, e, eOpts){
                        var cId = record.get('id');
                        me.copyData(cId, bdIdx, record.get('title'));
                        copyWin.close();
                    }
                }
            }
            ]
        }).show();
        //show configuration window

        if(currentPlugin !== ''){ //for workgroup series when copy data
            var pluginTitle = Ext.getCmp('workListPanel').getTitle();
            var container = Ext.create('Ext.container.Container', {
                layout:'vbox',
                width:400,
                padding:'0 0 10 0',
                items:[
                {
                    xtype:'label',
                    cls: 'form-title-label',
                    margin:'0 0 10 0',
                    text:'In ' + pluginTitle
                }
                ]
            });
            var items = getController('Main').getListTab().items.items;
            for(var i=0; i<items.length; i++){
                var button = {
                    xtype:'button',
                    text:items[i].title,
                    categoryId:items[i].categoryId,
                    ui:'plain-toolbar-small',
                    style:'margin-bottom:8px;border:1px solid #cecece',
                    listeners:{
                        click:function(btn){
                            cId = btn.categoryId;
                            me.copyData(cId, bdIdx, btn.text);
                            copyWin.close();
                        }
                    }
                };
                container.add(button);
            }
            copyWin.insert(0, container);
            copyWin.center();
        }
    },

    onBtnEditClick: function(button, e, eOpts) {
        var postCtr = getController('Post');
        var activeTab = this.getActiveTab();
        var selected = this.getSelected();
        if(!activeTab || selected.length === 0){
            Ext.toast(loc.upload.noneSelected);
            return;
        }
        if(selected.length > 1){
            Ext.toast(loc.main.selectOnlyOne);
            return;
        }
        if(!getController('Main').hasUserPermission('write')){//check the permission
            Ext.toast(loc.error.lowerLevelToWrite);
            return;
        }
        // var bdIdx = this.getViewModel().get('currentRecord').get('bd_idx');
        var bdIdx = selected[0].get('bd_idx');

        /* get new data values */
        Ext.data.JsonP.request({
            url:getDataWriteApi(),
            params:{
                ca_id:activeTab.categoryId,
                bd_idx:bdIdx,
                html:0
            },
            success:function(response){
                postCtr.editPost(response);
            },
            failure:function(response){
                alert(loc.main.networkProblem);
            }

        });

    },

    onBtnRemoveClick: function(button, e, eOpts) {
        var mainCtr = getController('Main');
        var activeTab = this.getActiveTab();
        if(activeTab.isMessage){
            var selected = this.getSelected();
            if(selected.length === 0){
                Ext.Msg.alert(loc.main.notice, loc.upload.noneSelected);
            }
            else{
                Ext.Msg.confirm('Confirm', loc.message.deleteMessages, function(button){
                    if(button == 'yes'){
                        var idxs;
                        for(var i=0; i<selected.length; i++){
                            if(i === 0){
                                idxs = selected[i].get('idx');
                            }
                            else{
                                idxs += ', ' + selected[i].get('idx');
                            }
                        }
                        Ext.data.JsonP.request({
                            url:domain + '/message/delete',
                            params:{
                                idx:idxs
                            },
                            success:function(response){
                                Ext.getStore('MessageOutStore').load();
                                Ext.getStore('MessageInStore').load();
                            }
                        });
                    }
                });
            }
            return;
        }
        if(!activeTab){
            Ext.toast(loc.upload.noneSelected);
            return;
        }
        if(!getController('Main').hasUserPermission('delete')){//check the permission
            Ext.toast(loc.error.lowerLevelToDelete);
            return;
        }
        var grid;
        if(activeTab.type == 'normal' || activeTab.type == 'text'){
            grid = activeTab;
        }
        else{//gallery mode
            grid = activeTab.down('#galleryView');
        }
        var chks = this.getSelected();
        if(chks.length === 0){
            Ext.MessageBox.alert(loc.main.notice, loc.upload.noneSelected);
            return;
        }
        if(activeTab.cateOption.useColorway && chks.length > 1){
            Ext.toast(activeTab.getTitle() + '는 여러개를 동시에 삭제 할 수 없습니다. 하나만 선택 해 주세요');
            return;
        }
        var htmls = [];
        var bdIdxs = [];
        for(var i=0; i<chks.length; i++){
            var h = chks[i].get('file_height');
            var w = chks[i].get('file_width');
            var bSize;
            var tSize = 100;
            if(w < tSize && h < tSize){
                bSize = 'auto';
            }
            else{
                bSize = 'cover';
            }

            var html = '<table style="border:1px solid #cecece;width:100%"><tr>';
            html    += '<td width=100>';
            html  	+=    '<div style="float:left;width:100px;height:100px;background-image:url(' + chks[i].get('thumb_path');
            html 	+= ');background-size:'+bSize+'" class="div-image"></div>';
            html    += '</td>';
            html    += '<td style="padding-left:15px">';
            html    += '<span style="font-weight:bold">'+loc.main.title+': </span>' + chks[i].get('bd_subject');
            html    += '<br><span style="font-weight:bold">'+loc.main.regDate+': </span>' + chks[i].get('bd_regdate');
            html    += '<br><span style="font-weight:bold">'+loc.main.user+': </span>' + chks[i].get('bd_name');
            html    += '</td>';
            html    += '</tr></table>';
            htmls.push(html);
            bdIdxs.push(chks[i].get('bd_idx'));
        }

        var count = 0;
        var deleted = [];

        var viewer = Ext.getCmp('viewPanel').down('#viewer');
        activeTab.on('alldataremoved', function(){//살리면 에러나는 원인 나중에 파악!!!!!
            //delete viewer in case of viewer showed an information one of the deleted item
            if(bdIdxs.indexOf(viewer.bdIdx) != -1) viewer.destroy();
            grid.getStore().load();
        });
        /* deletedIdx is the deleted bd_idx that return by event */
        activeTab.on('dataremoved', function onDelete(deletedIdx){
            deleted.push(deletedIdx);
            if(viewer){
                if(deletedIdx == viewer.bdIdx){
                    viewer.destroy();
                }
            }
            grid.getStore().load();
            count ++;
            if(count < chks.length){
                mainCtr.deleteItem(chks[count], htmls[count], bdIdxs);
            }
        });
        activeTab.on('dataremovedcanceled', function(){
            //delete viewer if showed item has been deleted
            if(viewer){
                if(deleted.indexOf(viewer.bdIdx) != -1){
                    viewer.destroy();
                }
            }
            count = 0;
        });
        mainCtr.deleteItem(chks[0], htmls[0], bdIdxs);
    },

    onBtnDownloadClick: function(button, e, eOpts) {
        var mainCtr = getController('Main');
        var activeTab = this.getActiveTab();
        var selected = this.getSelected();
        if(!activeTab || selected.length === 0){
            Ext.toast(loc.upload.noneSelected);
            return;
        }
        if(selected.length > 1){
            Ext.toast(loc.main.selectOnlyOne);
            return;
        }

        if(!getController('Main').hasUserPermission('download')){//check the download permission
            Ext.toast(loc.error.lowerLevelToDownload);
            return;
        }
        var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
        var isChrome = !!window.chrome && !isOpera;



        var url = domain + '/binder/copy';

        var viewer = Ext.getCmp('viewPanel').down('#viewer');
        var fileInfo = viewer.info.bd_file;
        if(fileInfo.length > 1 && !isChrome){
            Ext.toast(loc.error.downloadLimit);
        }
        if(fileInfo.length === 0){
            Ext.MessageBox.alert(loc.main.notice, loc.main.noFile);
            return;
        }
        var paths = [];
        for(var i=0; i<fileInfo.length; i++){
            paths.push(fileInfo[i].thumb_path.replace('thumb', 'binder/down'));
        }
        multiDownload(paths);
    },

    onBtnCommentClick: function(button, e, eOpts) {
        Ext.getCmp('commentPanel').getController().newComment();
    },

    onBtnRecentClick: function(button, e, eOpts) {
        var me = this;
        localforage.getItem('viewed', function(err, value){
            if(!value) return;
            var mainCtr = getController('Main');
            var viewer = Ext.getCmp('viewPanel').down('#viewer');
            var store = Ext.create('Ext.data.Store', {
                data:value,
                fields:[
                {name:'bd_regdate'},
                {name:'bd_subject'},
                {name:'ca_id'},
                {name:'formIndex'}
                ]
            });
            var oldIndex = (viewer)? viewer.gridIndex : -1;
            var viewedWin = Ext.create(appName + '.view.ViewedWindow', {
                maxHeight:windowMaxHeight,
                ghost:false,
                lastIndex:oldIndex,//to use when restored
                listeners:{
                    close:function(win){
                        /* restore last content of viewer */
                        var selectedTab = me.getActiveTab().getGrid();
                        var selected = me.getSelected();
                        var record = selected[0];
                        if(!sessionId){
                            alert(loc.error.noSession);
                            return;
                        }
                        mainCtr.viewDocument(record, selectedTab.title, me.getActiveTab().formMode, win.lastIndex);
                    }
                }
            });

            viewedWin.down('#recentViewed').setStore(store);
            viewedWin.show();

        });
    },

    onBtnColorwayClick: function(button, e, eOpts) {
        if(this.getSelected().length === 0 || this.getSelected() === undefined){
            Ext.toast(loc.upload.noneSelected);
            return;
        }
        var selected = this.getSelected()[0];
        var win=Ext.getCmp("color_window");
        if(win===undefined) {
            win=Ext.create(appName + ".view.ColorWindow",{
                width:1024,
                height:900
            });
        }

        win.down("form").loadRecord(selected);
        win.record = selected;
        win.show();


        // if(this.getSelected() === undefined){
        //     Ext.toast(loc.config.noCategorySelect);
        //     return;
        // }
        // var selected = this.getSelected()[0];
        // var image = selected.get('bd_file')[0];
        // if(image === undefined){
        //     Ext.toast(loc.error.noImage);
        //     return;
        // }
        // var imgs = ['jpg', 'gif', 'png', 'jpeg'];
        // var arr = image.file_name.split('.');
        // var ext = arr[arr.length -1];

        // if(imgs.indexOf(ext.toLowerCase()) == -1){
        //     Ext.toast(loc.error.notImageFile);
        // }
        // else{
        //     var cwWin = Ext.create('Ext.window.Window', {
        //         width:'100%',
        //         height:'100%',
        //         layout:'hbox',
        //         scrollable:true,
        //         items:[
        //             {
        //                 xtype:'draw',
        //                 flex:1,
        //                 height:image.file_height,
        //                 sprites:[{
        //                     type:'image'
        //                 }],
        //                 listeners:{
        //                     render:function(dc){
        //                         var img = new Image(image.file_width, image.file_height);
        //                         img.onload = function(){
        //                             var surface = dc.getSurface();
        //                             var intv = setInterval(function(){
        //                                 if(surface.canvases[0] !== undefined){
        //                                     var canvas = surface.canvases[0].dom;
        //                                     clearInterval(intv);
        //                                     var context = canvas.getContext('2d');
        //                                     context.drawImage(img, 0, 0, image.file_width, image.file_height);

        //                                 }
        //                             }, 100);
        //                         };

        //                         img.src = image.file_path;

        //                     }
        //                 }
        //             },
        //             {
        //                 xtype:'container',
        //                 layout:'vbox',
        //                 padding:20,
        //                 width:400,
        //                 items:[
        //                     {
        //                         xtype:'container',
        //                         itemId:'chipCon',
        //                         width:'100%',
        //                         listeners:{
        //                             afterrender:function(comp){
        //                                 var colors = eval(selected.get('idgetColors'));
        //                                 var chips = getController('Config').getColorChips(colors);
        //                                 comp.setHtml(chips);
        //                                 var els = comp.el.select('.colorchip').elements;
        //                                 Ext.Array.each(els, function(entry, index){
        //                                     Ext.get(entry).setStyle({cursor:'pointer'});
        //                                     Ext.get(entry).on('click', function(e){
        //                                         var surface = comp.up('window').down('draw').getSurface();
        //                                         var canvas = surface.canvases[0].dom;
        //                                         var context = canvas.getContext('2d');
        //                                         var imgData = context.getImageData(0, 0, canvas.width, canvas.height);
        //                                         for(var i=0; i<imgData.data.length; i+=4){
        //                                             imgData.data[i]=255-imgData.data[i];
        //                                             imgData.data[i+1]=255-imgData.data[i+1];
        //                                             imgData.data[i+2]=255-imgData.data[i+2];
        //                                             imgData.data[i+3]=255;
        //                                         }
        //                                         context.putImageData(imgData, 0, 0);
        //                                         var chip = e.currentTarget;
        //                                         var hex = chip.getAttribute('hex');

        //                                         var picker = Ext.create('Ext.ux.colorpick.Selector', {
        //                                             value: hex,  // initial selected color
        //                                             listeners: {
        //                                                 change: function (colorselector, color) {
        //                                                     Ext.get(entry).setStyle({'background-color':'#' + color});
        //                                                 }
        //                                             }
        //                                         });
        //                                         //show color picker window
        //                                         Ext.create('Ext.window.Window', {
        //                                             items:[picker],
        //                                             title:'Color picker',
        //                                             modal:true,
        //                                         }).show();
        //                                     });
        //                                 });
        //                             }
        //                         }
        //                     }
        //                 ]
        //             }
        //         ],
        //         dockedItems:[
        //             {
        //                 xtype:'button',
        //                 text:'Get Colors',
        //                 handler:function(btn){
        //                     var dsnWin = Ext.create(appName + '.view.ActorWindow', {
        //                         title:'색정보를 가져올 디자인 선택'
        //                     }).show();
        //                     dsnWin.getGrid().on('itemclick', function(grid, record){
        //                         var colors = record.get('idgetColors');
        //                         if(colors === undefined || colors === null || colors === ''){
        //                             Ext.toast('색 정보가 없는 자료 입니다.');
        //                         }
        //                         else{
        //                         }
        //                     });
        //                 }
        //             }
        //         ]

        //     }).show();
        // }

    },

    onBtnColorwayRender: function(component, eOpts) {
        this.getViewModel().setData({useColorway:false});
    },

    onBtnMappingClick: function(button, e, eOpts) {
        var me = this;
        if(this.getSelected().length === 0 || this.getSelected() === undefined){
            Ext.toast(loc.upload.noneSelected);
            return;
        }
        var selected = this.getSelected()[0];
        var i;
        var mapWin = Ext.create('Ext.window.Window', {
            layout:{
                type:'hbox',
                align:'stretch'
            },
            width:1024,
            height:700,
            ghost:false,
            maximizable:true,
            selectedDesign:selected.get('bd_file')[0].file_name.split('.')[0],
            selectedModel:'model_1',
            maxHeight:windowMaxHeight,
            title:'Simulation',
            padding:15,
            items:[
            {
                xtype:'container',
                width:150,
                layout:{
                    type:'vbox',
                    align:'stretch'
                },
                items:[
                {
                    xtype:'label',
                    text:'모델'
                },
                {
                    xtype:'combo',
                    itemId:'modelCombo',
                    width:150,
                    height:30,
                    store:['전체', '의류', '침장', '인테리어'],
                    value:'전체',
                    getList:function(){
                        var val = this.getValue();
                        var cfgStore = Ext.getStore('ConfigStore');
                        var mapCate = cfgStore.getAt(0).get('mappingModelCategory');
                        var query;
                        if(val == '전체'){
                            query = '';
                        }
                        else{
                            query = 'model=' + val;
                        }
                        Ext.data.JsonP.request({
                            url:getDataListByIdApi(query, true),
                            params:{
                                ca_id:mapCate
                            },
                            success:function(response){
                                var bl = response.binderList;
                                for(i=0; i<bl.length; i++){
                                    var imgStyle = 'background-image:url('+bl[i].bd_file[0].thumb_path+'/T);background-position:center';
                                    imgStyle += 'background-repeat:no-repeat;background-size:cover;margin-bottom:10px;cursor:pointer';
                                    var imgCon = {
                                        xtype:'component',
                                        width:'100%',
                                        height:150,
                                        style:imgStyle,
                                        fileName:bl[i].bd_file[0].file_name.split('.')[0],
                                        listeners:{
                                            render:function(ic){
                                                ic.el.on('click', function(e){
                                                    var modelName = ic.fileName;
                                                    mapWin.selectedModel = modelName;
                                                    var imgStyle = 'background-image:url(';
                                                    imgStyle += 'resources/mapped/'+mapWin.selectedModel+'_'+mapWin.selectedDesign+'.jpg);';
                                                    imgStyle += 'background-repeat:no-repeat;background-size:contain';
                                                    mapWin.down('#mapCon').removeAll();
                                                    mapWin.down('#mapCon').add({
                                                        xtype:'component',
                                                        style:imgStyle

                                                    });
                                                });
                                            }
                                        }
                                    };
                                    mapWin.down('#modelCon').add(imgCon);
                                }
                            }
                        });
                    },
                    listeners:{
                        change:function(combo, newValue){
                            mapWin.down('#modelCon').removeAll();
                            combo.getList();
                        }
                    }
                },
                {
                    xtype:'panel',
                    layout:'vbox',
                    flex:1,
                    itemId:'modelCon',
                    scrollable:true,
                    listeners:{
                        render:function(comp){
                            //최초 서버에서 모델리스트 불러옴
                            comp.up('window').down('#modelCombo').getList();
                        }
                    }
                }
                ]
            },
            {
                xtype:'tbspacer',
                width:7
            },
            {
                xtype:'container',
                layout:{
                    type:'vbox',
                    align:'stretch'
                },
                items:[
                {
                    xtype:'label',
                    text:'디자인'
                },
                {
                    xtype:'combo',
                    itemId:'designCombo',
                    width:150,
                    store:['전체', 'Army Pattern', 'Check', 'Dot', 'Geometric', 'Patch work', 'Small Flower'],
                    value:'전체',
                    getList:function(){
                        var val = this.getValue();
                        var dcStore = getController('Main').getListTab().getActiveTab().getStore();
                        var mapWin = this.up('window');
                        mapWin.down('#designCon').removeAll();
                        dcStore.each(function(record){
                            if(record.get('iddesignType') == val || val == '전체'){
                                var fp = record.get('file_path');
                                var imgStyle = 'background-image:url('+record.get('bd_file')[0].thumb_path+');background-position:center';
                                imgStyle += 'background-repeat:no-repeat;background-size:cover;margin-bottom:10px;cursor:pointer';
                                var imgCon = {
                                    xtype:'component',
                                    width:'100%',
                                    height:150,
                                    style:imgStyle,
                                    fileName:record.get('bd_file')[0].file_name.split('.')[0],
                                    listeners:{
                                        render:function(ic){
                                            ic.el.on('click', function(e){
                                                var designName = ic.fileName;
                                                mapWin.selectedDesign = designName;
                                                var imgStyle = 'background-image:url(';
                                                imgStyle += domain+'/works/resources/mapped/'+mapWin.selectedModel+'_'+mapWin.selectedDesign+'.jpg);';
                                                imgStyle += 'background-repeat:no-repeat;background-size:contain';
                                                mapWin.down('#mapCon').removeAll();
                                                mapWin.down('#mapCon').add({
                                                    xtype:'component',
                                                    style:imgStyle

                                                });

                                            });
                                        }
                                    }
                                };
                                mapWin.down('#designCon').add(imgCon);
                            }
                        });
                    },
                    listeners:{
                        change:function(combo, newValue){
                            combo.getList();
                        }
                    }
                },
                {
                    xtype:'container',
                    layout:'vbox',
                    flex:1,
                    itemId:'designCon',
                    scrollable:true,
                    listeners:{
                        render:function(comp){
                            comp.up('window').down('#designCombo').getList();
                        }
                    }
                }
                ]
            },
            {
                xtype:'tbspacer',
                width:7
            },
            {
                xtype:'container',
                itemId:'mapCon',
                layout:'fit',
                flex:1
            }
            ]
        }).show();


    },

    onBtnMappingAfterRender: function(component, eOpts) {
        component.setText(loc.menu.mapping);
        this.getViewModel().setData({useMapping:false});
    },

    onBtnSearchClick: function(button, e, eOpts) {

        var activeTab = this.getActiveTab();
        if(!activeTab){
            Ext.toast(loc.config.noCategorySelect);
            return;
        }
        if(activeTab.isMessage){
            return;
        }
        var cId = activeTab.categoryId;
        var storeId = 'dStore_' + cId;
        var store = Ext.getStore(storeId);
        var title = activeTab.title;
        var clone = false;
        if(activeTab.cloneCategory !== undefined){
            clone = true;
        }
        getController('Search').openSearchWindow(cId, store, undefined, clone);

    },

    onMainBtnComapreRender: function(component, eOpts) {
        component.setText(loc.main.compareData);
    },

    onMainBtnComapreClick: function(button, e, eOpts) {
        var record = this.getSelected()[0];
        if(this.getSelected().length === 0){
            Ext.toast(loc.upload.noneSelected);
            return;
        }
        var bdIdx;
        var me = this;
        var clCaId;
        if(this.getActiveTab().cateOption.clone){//click the clone soruce category
            clCaId = this.getActiveTab().categoryId;
            bdIdx = record.get('bd_idx');

        }
        else if(this.getActiveTab().cateOption.cloneCategory !== undefined){//clcik a cloned category
            clCaId = this.getActiveTab().cateOption.cloneCategory;
            if(record.get('bd_refer') != 'null' && record.get('bd_refer') !== '' && record.get('bd_refer') !== undefined){
                //has been motified
                bdIdx = record.get('bd_refer');
            }
            else{
                //for never motified
                bdIdx = record.get('bd_idx');
            }
        }
        else{
            return;
        }
        var url =' http://smartdb.kr/json/binderCloneList?ca_id='+clCaId+'&bd_idx=' + bdIdx;
        Ext.data.JsonP.request({
            url:url,
            success:function(response){
                var bList = response.binderList;
                var subjectTitle = (me.getActiveTab().subjectTitle === undefined)? loc.main.title : me.getActiveTab().subjectTitle;
                bList[0].subjectTitle = subjectTitle;
                var compaWin = Ext.create('Ext.window.Window', {
                    height:windowMaxHeight,
                    title:'<i class="fa fa-columns" aria-hidden="true"></i> '+loc.main.compareData,
                    padding:20,
                    ghost:false,
                    layout:{
                        type:'vbox',
                        align:'stretch'
                    },
                    items:[
                    {
                        xtype:'container',
                        scrollable:true,
                        height:'100%',
                        padding:25,
                        listeners:{
                            render:function(comp){
                                var viewer = Ext.create(appName + '.view.Viewer',{
                                    itemId:'cloneViewer',
                                    editable:false
                                });
                                viewer.colsList = me.getActiveTab().categoryColsList;
                                resources.js.forms.CloneViewer.setHtml(bList, viewer);
                                comp.add(viewer);
                            }
                        }
                    }
                    ]
                }).show();
            }
        });

    },

    onBtnMessageClick: function(button, e, eOpts) {
        var activeTab = this.getActiveTab();
        if(!activeTab){
            Ext.toast(loc.config.noCategorySelect);
            return;
        }
        if(activeTab.isMessage){
            getController('Work').selectMember('', 'message');
        }
        else{
            getController('Message').sendMessage();
        }
    },

    onLabelRender: function(component, eOpts) {
        component.setText(loc.menu.layoutType);
    },

    onBtnGallTypeClick: function(button, e, eOpts) {
        var mainCtr = getController('Main');
        var grid = mainCtr.getGrid(this.getActiveTab().categoryId, 'gallery', this.getActiveTab().title);
        getController('Main').setGrid(grid);
    },

    onBtnTxtTypeClick: function(button, e, eOpts) {
        var grid = getController('Main').getGrid(this.getActiveTab().categoryId, 'text', this.getActiveTab().title);
        getController('Main').setGrid(grid);
    },

    onBtnListTypeClick: function(button, e, eOpts) {
        var grid = getController('Main').getGrid(this.getActiveTab().categoryId, 'normal', this.getActiveTab().title);
        getController('Main').setGrid(grid);
    },

    onBtnChipTypeClick: function(button, e, eOpts) {
        var grid = getController('Main').getGrid(this.getActiveTab().categoryId, 'colorChip', this.getActiveTab().title);
        getController('Main').setGrid(grid);
    },

    onMainBtnGroupClick: function(button, e, eOpts) {
        var menuX = Ext.getCmp('westPanel').width + button.x;
        Ext.create('Ext.menu.Menu', {
            width: 170,
            itemId:'groupMenu',
            plain: true,
            alwaysOnTop:true,
            autoShow:true,
            x:menuX,
            y:91,
            renderTo: Ext.getBody(),
            listeners:{
                afterrender:function(menu){
                    var grid = getController('Main').getListTab().getActiveTab();
                    var colsList = grid.categoryColsList;
                    for(var i=0; i<colsList.length; i++){
                        /* filtering for field that code is groupItem */
                        menu.add({
                            xtype:'menuitem',
                            text:colsList[i].cols_name,
                            groupValue:'id'+colsList[i].cols_idx,
                            handler:function(item){
                                /* change grid type for grouping */
                                grid.getStore().setGroupField(item.groupValue);
                            }
                        });
                    }
                    menu.add({
                        xtype:'menuitem',
                        text:loc.main.user,
                        handler:function(item){
                            /* change grid type for grouping */
                            grid.store.setGroupField('bd_name');
                        }
                    });
                    menu.add({//to recover normal grid
                        xtype:'menuitem',
                        text:loc.message.normal,
                        handler:function(){
                            grid.store.setGroupField();
                            grid.store.load();
                        }
                    });
                }
            }
        });
    },

    onMainBtnChartClick: function(button, e, eOpts) {
        var store = getController('Main').getListTab().getActiveTab().getStore();
        getController('Main').showChart(store);
    },

    onMainBtnHistoryClick: function(button, e, eOpts) {
        if(this.getSelected().length === 0){
            Ext.toast(loc.upload.noneSelected);
            return;
        }
        this.showHistory();
    },

    onEditalbeRender: function(component, eOpts) {
        component.setTooltip(loc.menu.editable);
    },

    onEditalbeClick: function(tool, e, owner, eOpts) {
        if(!getController('Main').hasUserPermission('write')){//check the permission
            Ext.toast(loc.error.lowerLevelToWrite);
            return;
        }
        getController('Viewer').editModeToggle(tool);
    },

    onHistoryRender: function(component, eOpts) {
        component.setTooltip(loc.menu.history);
    },

    onPrintRender: function(component, eOpts) {
        component.setTooltip(loc.menu.print);
    },

    onPrintClick: function(tool, e, owner, eOpts) {
        getController('Main').printDocument();
    },

    onChangFormRender: function(component, eOpts) {
        component.setTooltip(loc.menu.changeForm);
    },

    onChangFormClick: function(tool, e, owner, eOpts) {
        var tree = Ext.getCmp('categoryTree');
        var record = tree.getSelectionModel().getSelection()[0];
        getController('Config').changeForm(record);

    },

    onSlideShowRender: function(component, eOpts) {
        component.setTooltip(loc.menu.slideshow);
    },

    onSlideShowClick: function(tool, e, owner, eOpts) {
        if(!getController('Main').hasUserPermission('download')){//check the download permission
            Ext.toast(loc.error.lowerLevelToDownload);
            return;
        }
        var dataInfo = Ext.getCmp('eastPanel').down('#viewer').info;
        var imgData = (dataInfo.bd_file.length !== 0)? dataInfo.bd_file : dataInfo.originalFiles;
        if(imgData.length === 0 || imgData.length === undefined){
            Ext.Msg.alert('Notice', loc.viewer.noShowData);
            return;
        }
        var imgArr = [];
        for(var i=0; i<imgData.length; i++){
            var isImage = getController('Config').isImage(imgData[i]);
            var path = imgData[i].thumb_path.replace('/thumb/', '/file/');
            if(isImage){//add array for only image
                imgArr.push({src:path, width:imgData[i].file_width, height:imgData[i].file_height});
            }
        }
        if(imgArr.length === 0){
            Ext.toast(loc.viewer.noShowData);
            return;
        }
        getController('Viewer').slideShow(imgArr);
    },

    onSendEmailRender: function(component, eOpts) {
        component.setTooltip(loc.menu.sendEmail);
    },

    onSendEmailClick: function(tool, e, owner, eOpts) {
        if(!getController('Main').hasUserPermission('print')){//check the email permission as it's the same with print
            Ext.toast(loc.error.lowerLevelToEmail);
            return;
        }
    },

    onColorwaySmallRender: function(component, eOpts) {
        component.setTooltip(loc.menu.colorway);
    },

    onColorwaySmallClick: function(tool, e, owner, eOpts) {
        Ext.getCmp('btnColorway').fireEvent('click');
    },

    onViewPanelAdd: function(container, component, index, eOpts) {
        if(component.isMessageOnly){
            Ext.getCmp('eastPanel').getHeader().setHidden(true);
        }
        else{
            Ext.getCmp('eastPanel').getHeader().setHidden(false);
        }
    },

    onAddCommentAfterRender: function(component, eOpts) {
        component.setTooltip(loc.main.newComment);
    },

    onAddCommentClick: function(tool, e, owner, eOpts) {
        this.newComment();
    },

    onCommentPanelRender: function(component, eOpts) {
        this.getViewModel().setData({
            commentList:loc.main.commentList
        });
    },

    onMainViewBeforeRender: function(component, eOpts) {
        /* set current language */
        if(localStorage.getItem('baseLanguage')){
            var baseLan = localStorage.getItem('baseLanguage');
            getController('Config').setLanguage(baseLan);
        }
        var baseData = {
            activateChanged:loc.viewer.activateChanged,
            activityList:loc.work.activityList,
            add:loc.main.add,
            addAttachFile:loc.upload.addAttachFile,
            addFile:loc.upload.addFile,
            addRow:loc.upload.addRow,
            apply:loc.config.apply,
            attachedFile:loc.upload.attachedFile,
            attachFile:loc.main.attachFile,
            autoText:loc.upload.autoText,
            byGroup:loc.menu.byGroup,
            cancel:loc.upload.cancel,
            category:loc.main.category,
            cellEditTip:loc.upload.cellEditTip,
            changeForm:loc.menu.changeForm,
            changeShortcut:loc.config.changeShortcut,
            chart:loc.menu.chart,
            checkInterval:loc.message.checkInterval,
            chooseIcon:loc.config.chooseIcon,
            colorChip:loc.menu.colorChip,
            colorway:loc.menu.colorway,
            colortag:loc.main.colortag,
            combineMode:loc.config.combineMode,
            commentList:loc.main.commentList,
            complete:loc.main.complete,
            config:loc.main.config,
            configEditorTitle:loc.config.configEditorTitle,
            configEditorText:loc.config.configEditorText,
            copy:loc.menu.copy,
            datagrpTitle:loc.upload.datagrpTitle,
            delAllRow:loc.upload.delAllRow,
            deleteData:loc.main.deleteData,
            delRow:loc.upload.delRow,
            description:loc.main.description,
            detailMode:loc.config.detailMode,
            detailView:loc.viewer.detailView,
            displayAsImage:loc.config.displayAsImage,
            documentBox:'<i class="fa fa-file-text-o" aria-hidden="true" style="margin-right:5px"></i>' + loc.message.documentBox,
            documentIn:loc.message.documentIn,
            documentOut:loc.message.documentOut,
            download:loc.menu.download,
            dropHere:loc.main.dropHere,
            edit:loc.menu.edit,
            editable:loc.menu.editable,
            editLabel:loc.upload.edit,
            entry:loc.upload.entry,
            fileName:loc.upload.fileName,
            fieldSetting:loc.config.fieldSetting,
            galleryMode:loc.config.galleryMode,
            gridTitle:loc.main.gridTitle,
            getRecordTitle:loc.config.getRecordTitle,
            getValueTitle:loc.config.getValueTitle,
            hexField:loc.config.hexField,
            hexTitle:loc.config.hexTitle,
            hide:loc.config.hide,
            hideField:loc.config.hideField,
            history:loc.menu.history,
            historyList:loc.main.historyList,
            imageWithURL:loc.config.imageWithURL,
            initShortcut:loc.login.initShortcut,
            itemListNum:loc.config.itemListNum,
            linkWinTitle:loc.upload.linkWindowTitle,
            listDisplay:loc.config.listDisplay,
            login:loc.login.login,
            logout:loc.login.logout,
            menu:loc.menu.menu,
            maxHeight:800,
            message:'<i class="fa fa-sticky-note-o" aria-hidden="true" style="margin-right:5px"></i>' + loc.message.messageBox,
            messageIn:loc.message.messageIn,
            messageOut:loc.message.messageOut,
            needRestart:loc.config.needRestart,
            newComment:loc.main.newComment,
            newPost:loc.menu.newPost,
            notice:loc.menu.notice,
            noUse:loc.message.noUse,
            numberFormatTitle:loc.config.numberFormat,
            ok:loc.main.ok,
            onlyViewOwners:loc.config.onlyViewOwners,
            option1:loc.upload.option1,
            option2:loc.upload.option2,
            password:loc.login.password,
            viewDocument:loc.viewer.viewDocument,
            percentField:loc.config.percentField,
            percentTitle:loc.config.percentTitle,
            printInfo:loc.menu.printInfo,
            printIt:loc.main.printIt,
            printSelected:loc.menu.print,
            recentItem:loc.menu.recentItem,
            recentlyViewed:loc.viewer.recentlyViewed,
            referenceCategory:loc.main.referenceCategory,
            refresh:loc.main.refresh,
            remove:loc.menu.remove,
            reset:loc.main.reset,
            save:loc.config.save,
            saveClose:loc.main.saveClose,
            search:loc.search.search,
            seeActContent:loc.work.seeActContent,
            select:loc.upload.select,
            selectField:loc.config.selectField,
            selectForm:loc.config.selectForm,
            sendingDoc:loc.message.sendingDoc,
            setIcon:loc.config.setIcon,
            setShortcut:loc.config.setShortcut,
            setting:loc.menu.setting,
            settingCategory:loc.config.settingCategory,
            settingForm:loc.config.settingForm,
            show:loc.config.show,
            showApprovalBox:loc.config.showApprovalBox,
            showAsSchedule:loc.config.showAsSchedule,
            showImageTitle:loc.config.showImageTitle,
            showSum:loc.config.showSum,
            showSumTitle:loc.config.showSumTitle,
            simpleMode:loc.config.simpleMode,
            submit:loc.upload.submit,
            textMode:loc.config.textMode,
            time30:loc.message.time30,
            time5m:loc.message.time5m,
            time30m:loc.message.time30m,
            time60m:loc.message.time60m,
            title:loc.main.title,
            update:loc.menu.update,
            uploading:loc.upload.uploading,
            uploadTitle:loc.upload.uploadTitle,
            use:loc.config.use,
            useAsUserList:loc.config.useAsUserList,
            userId:loc.login.userId,
            userInfo:loc.config.userInfo,
            userList:loc.config.userList,
            viewCategory:loc.config.viewCategory,
            viewedListNum:loc.config.viewedListNum,
            viewInformation:loc.config.viewInformation
        };
        component.getViewModel().setData(baseData);
        getController('Login').sessionCheck();

        //setting for splitter
        var splitters = component.query('splitter');
        for(var i=0; i<splitters.length; i++){
            splitters[i].on('render', function(comp){
                if(comp.vertical) {
                    comp.setWidth(2);
                    //             comp.setStyle('background', 'transparent');
                    var clpBtn = Ext.get(comp.getEl().dom.children[0]);
                    if(clpBtn){
                        if(clpBtn.id == 'eastPanel-splitter-collapseEl'){
                            clpBtn.setStyle({left:'-10px'});
                        }
                        clpBtn.setStyle({
                            width:'10px',
                            'z-index':200
                        });
                    }
                }
            });
        }

        //making a function replaceAt()
        String.prototype.replaceAt=function(index, replacement) {
            return this.substr(0, index) + replacement+ this.substr(index + replacement.length);
        };
        //load basic setting in json file
        var configStore = Ext.create('Ext.data.Store', {
            fields:[
            {name:'colorchipCategory'},
            {name:'designSourceCategory'}
            ],
            autoLoad:true,
            storeId:'ConfigStore',
            proxy: {
                type: 'ajax',
                url : 'actor.json',
                reader: {
                    type: 'json'
                }
            }
        });

        //to use corrent number format when it needs summery of render:graph
        Ext.define('column.CustomNumberColumn',
        {
            extend: 'Ext.grid.column.Number',
            alias: 'widget.customnumbercolumn',
            initComponent: function() {
                // set scope property to this, so in renderer this will refers to column itself
                this.scope = this;

                this.callParent();
            }
        });
    },

    onMainViewResize: function(component, width, height, oldWidth, oldHeight, eOpts) {
        windowMaxWidth = width - 20;
        windowMaxHeight = height - 20;
    }

});
