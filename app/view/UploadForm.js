/*
 * File: app/view/UploadForm.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.UploadForm', {
    extend: 'Ext.form.Panel',
    alias: 'widget.uploadform',

    requires: [
        'Actor.view.UploadFormViewModel',
        'Actor.view.UploadFormViewController',
        'Actor.view.ExtendHtmlEditor',
        'Ext.form.field.ComboBox',
        'Ext.view.BoundList',
        'Ext.XTemplate',
        'Ext.form.Label',
        'Ext.form.field.HtmlEditor',
        'Ext.form.field.Hidden'
    ],

    controller: 'uploadform',
    viewModel: {
        type: 'uploadform'
    },
    cls: 'upload-form',
    itemId: 'myform',
    scrollable: true,
    bodyPadding: 25,
    standardSubmit: true,
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'container',
            layout: 'hbox',
            items: [
                {
                    xtype: 'textfield',
                    flex: 1,
                    cls: 'requestform-space',
                    itemId: 'fdSubject',
                    labelAlign: 'top',
                    name: 'bd_subject',
                    listeners: {
                        render: {
                            fn: 'onFdSubjectRender',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    itemId: 'fdColortag',
                    margin: '0 0 0 15',
                    width: 200,
                    labelAlign: 'top',
                    labelWidth: 70,
                    name: 'bd_colortag',
                    displayField: 'submitvalue',
                    valueField: 'colorcode',
                    bind: {
                        fieldLabel: '{colortag}'
                    },
                    listeners: {
                        render: {
                            fn: 'onFdColortagRender',
                            scope: 'controller'
                        }
                    },
                    listConfig: {
                        xtype: 'boundlist',
                        itemSelector: 'div',
                        itemTpl: [
                            '<tpl for=\'.\'>',
                            '    <div style=\'background-color:{colorcode};width:100%;height:100%;font-size:12px\'>{colorname}</div>',
                            '</tpl>'
                        ]
                    }
                }
            ]
        },
        {
            xtype: 'container',
            hidden: true,
            itemId: 'attachCon',
            margin: '10 0 0 0',
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'label',
                    cls: 'x-form-item-label-default',
                    hidden: true,
                    itemId: 'titleExistFile',
                    bind: {
                        text: '{attachedFile}'
                    }
                },
                {
                    xtype: 'container',
                    delEntry: [
                        
                    ],
                    itemId: 'existFilesCon'
                },
                {
                    xtype: 'container',
                    itemId: 'attachboxHeader',
                    items: [
                        {
                            xtype: 'label',
                            cls: 'x-form-item-label-default',
                            hidden: true,
                            itemId: 'lbNewFileAdded',
                            bind: {
                                text: '{addAttachFile}'
                            }
                        }
                    ]
                },
                {
                    xtype: 'container',
                    cls: 'requestform_space',
                    itemId: 'fileList',
                    margin: '10 0 0 0',
                    width: '100%',
                    layout: 'column'
                },
                {
                    xtype: 'label',
                    hidden: true,
                    itemId: 'howToRemove',
                    style: 'color:#5FA2DD !important'
                }
            ]
        },
        {
            xtype: 'container',
            cls: 'requestform_space',
            itemId: 'customFieldCon',
            layout: {
                type: 'vbox',
                align: 'stretch'
            }
        },
        {
            xtype: 'extendhtmleditor',
            height: 200,
            itemId: 'fdContent',
            labelAlign: 'top',
            name: 'bd_content',
            enableFont: false,
            flex: 1,
            listeners: {
                afterrender: 'onHtmleditorAfterRender'
            }
        },
        {
            xtype: 'hiddenfield',
            itemId: 'fdRefer',
            name: 'bd_refer'
        },
        {
            xtype: 'hiddenfield',
            itemId: 'fdReceiver',
            fieldLabel: 'Receiver',
            name: 'bd_receiver'
        },
        {
            xtype: 'hiddenfield',
            itemId: 'fdReader',
            fieldLabel: 'Reader',
            name: 'bd_reader'
        },
        {
            xtype: 'hiddenfield',
            itemId: 'bdIdx',
            name: 'bd_idx'
        }
    ],

    onHtmleditorAfterRender: function(component, eOpts) {
        component.setFieldLabel(loc.main.description);
    },

    setSubject: function(value) {
        this.down('#fdSubject').setValue(value);
    },

    setRemark: function(value) {
        this.down('#fdContent').setValue(value);
    },

    setColortag: function(value) {
        this.down('#fdColortag').setValue(value);
    },

    setRefer: function(value) {
        this.down('#fdRefer').setValue(value);
    },

    setReceiver: function(value) {
        this.down('#fdReceiver').setValue(value);
    },

    setReader: function(value) {
        this.down('#fdReader').setValue(value);
    },

    hideBasicField: function() {
        this.down('#fdSubject').setHidden(true);
        this.down('#fdContent').setHidden(true);
        this.down('#fdColortag').setHidden(true);
    }

});