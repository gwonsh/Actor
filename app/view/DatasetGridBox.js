/*
 * File: app/view/DatasetGridBox.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.DatasetGridBox', {
    extend: 'Ext.container.Container',
    alias: 'widget.datasetgridbox',

    requires: [
        'Actor.view.DatasetGridBoxViewModel',
        'Actor.view.DatasetGridBoxViewController',
        'Ext.container.Container',
        'Ext.form.Label',
        'Ext.toolbar.Spacer',
        'Ext.button.Button'
    ],

    controller: 'datasetgridbox',
    viewModel: {
        type: 'datasetgridbox'
    },

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'container',
            height: 27,
            itemId: 'datasetHeader',
            width: '100%',
            layout: {
                type: 'hbox',
                align: 'middle'
            },
            items: [
                {
                    xtype: 'label',
                    cls: 'x-form-item-label-default',
                    itemId: 'title'
                },
                {
                    xtype: 'tbspacer',
                    flex: 1
                },
                {
                    xtype: 'button',
                    height: 24,
                    itemId: 'btnAddColumn',
                    margin: '0 2 0 0',
                    ui: 'plain-toolbar-small',
                    width: 24,
                    glyph: 'xf0fe@FontAwesome',
                    bind: {
                        tooltip: '{addRow}'
                    },
                    listeners: {
                        click: 'onBtnAddColumnClick'
                    }
                },
                {
                    xtype: 'button',
                    height: 24,
                    itemId: 'btnDelColumn',
                    margin: '0 2 0 0',
                    ui: 'plain-toolbar-small',
                    width: 24,
                    glyph: 'xf146@FontAwesome',
                    bind: {
                        tooltip: '{delRow}'
                    },
                    listeners: {
                        click: 'onBtnDelColumnClick'
                    }
                },
                {
                    xtype: 'button',
                    height: 24,
                    itemId: 'btnDelAllColumn',
                    ui: 'plain-toolbar-small',
                    width: 24,
                    glyph: 'xf1f8@FontAwesome',
                    bind: {
                        tooltip: '{delAllRow}'
                    },
                    listeners: {
                        click: 'onBtnDelAllColumnClick'
                    }
                }
            ]
        }
    ],

    getGrid: function() {
        return this.down('#datasetGrid');
    },

    setGrid: function(needSummary) {
        var grid = {
            xtype: 'gridpanel',
            dataIdx: '',
            colsInfo: [

            ],
            itemId: 'datasetGrid',
            style: {
                border: '1px solid #cecece'
            },
            bodyBorder: true,
            header: false,
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'string',
                    text: 'String'
                }
            ],
            plugins: [
                {
                    ptype: 'cellediting',
                    clicksToEdit: 1
                }
            ],
            selModel: {
                selType: 'checkboxmodel',
                checkOnly: true,
                showHeaderCheckbox: true
            },
            listeners: {
                afterlayout: function(container, component){
                    // get the summary row
                    var sumRows = container.el.select('.x-grid-row-summary').elements;
                    if(sumRows.length === 0) return;
                    // all of td elements in summary row
                    var tds = Ext.get(sumRows[0]).select('td').elements;
                    if(component.layoutCount == 1){
                        //save the number of td before it removed
                        container.tdLen = tds.length;
                    }
                    for(var i=0; i<2; i++){
                        if(i === 0){
                            tds[i].style.textAlign = 'center';
                            tds[i].setAttribute('colspan', 2);
                            tds[i].style.color = '#7792A9';
                            tds[i].style.verticalAlign = 'middle';
                            tds[i].textContent = loc.main.total;
                        }
                        else{
                            //remove td as many as combined by colspan to write '합계' in tr elements
                            if(tds.length == container.tdLen) Ext.get(tds[i]).destroy();
                        }
                    }
                }
            }
        };
        if(needSummary){
            grid.features = [{ftype: 'summary'}];
        }
        this.add(grid);
    },

    addTitle: function(title) {
        var lb = this.down('#title');
        lb.setText(title);
    }

});