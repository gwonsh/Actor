/*
 * File: app/view/CategorySetWindowViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.CategorySetWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.categorysetwindow',

    onCTreeItemClick: function(dataview, record, item, index, e, eOpts) {
        if(Ext.getCmp('categoryFirst')){//필드설정을 위한 카테고리 선택 일 경우(by getRecord or getValue)
            var fstWin = Ext.getCmp('categoryFirst');//왼쪽 카테고리를 선택해 주세요 창이 떠있는 여부로 왜 클릭 했는지 판단
            var cId = record.get('id');
            var info = {};//선택한 카테고리의 필드 정보들
            var srcConf  = {};//기본 정보외에 필요한 정보들
            Ext.getCmp('categoryFirst').down('label').setText(loc.config.selectField);
            Ext.data.JsonP.request({
                url:getDataListByIdApi('ca_id=' + cId),
                success:function(response){
                    var colsList = response.categoryColsList;
                    info.bd_subject = 'bd_subject';
                    srcConf.bd_subject = {
                        displayName:loc.main.title,//실제 화면에 표시되는 이름
                        idx:'bd_subejct'
                    };
                    info.bd_content = 'bd_content';
                    srcConf.bd_content = {
                        displayName:loc.main.description,
                        idx:'bd_content'
                    };
                    info.bd_ip = 'bd_ip';
                    srcConf.bd_ip = {
                        displayName:'IP address',
                        idx:'bd_ip'
                    };
                    info.bd_regdate = 'bd_regdate';
                    srcConf.bd_regdate = {
                        displayName:loc.main.regDate,
                        idx:'bd_regdate'
                    };
                    info.bd_file = 'bd_file';
                    srcConf.bd_file = {
                        displayName:loc.main.attachFile,
                        idx:'bd_file'
                    };
                    info.bd_name = 'bd_name';
                    srcConf.bd_name = {
                        displayName:loc.main.user,
                        idx:'bd_name'
                    };
                    Ext.Array.each(colsList, function(entry){
                        info[entry.cols_name] = entry.cols_type + '(' + entry.cols_idx + ')';
                        srcConf[entry.cols_name] = {
                            colsType: entry.cols_type,
                            idx:entry.cols_idx,
                            colsCode:entry.cols_code,
                            colsUnit:entry.cols_unit
                        };
                    });
                    var pg = Ext.create('Ext.grid.property.Grid', {
                        title: loc.main.selectValue,
                        width: 300,
                        source:info,
                        sourceConfig:srcConf,
                        listeners:{
                            itemclick:function(grid, record, item, index, e, eOpts){
                                var conf = srcConf[record.get('name')];
                                if(fstWin.target.colsType == 'datagrp' || fstWin.target.colsType == 'dataset' || fstWin.target.colsType == 'link'){
                                    if(fstWin.target.colsType != conf.colsType){
                                        Ext.Msg.alert('Caution', loc.error.typeNotMatch);
                                    }
                                }
                                else{
                                    var value = cId + '>' + conf.idx;
                                    fstWin.target.setValue(value);
                                    pgWin.close();
                                    fstWin.close();
                                }
                            },
                            beforeedit:function(){//disable editing
                                return false;
                            }
                        }
                    });
                    var pgWin = Ext.create('Ext.window.Window', {
                        scrollable:'vertical',
                        maxHeight:windowMaxHeight,
                        padding:20,
                        items:[
                        pg
                        ],
                        listeners:{
                            afterlayout:function(comp){
                                comp.center();
                            }
                        }
                    }).show();
                }
            });
            return;
        }

        if(Ext.getCmp('categoryFirst2')){//in case of configuration for uploading files at htmleditor
            dataview.fireEvent('tempcategoryselected', record.get('id'));
            return;
        }

        var opt = record.get('option');
        opt = getOption(opt);
        var title,
            fieldOnly,
            showApval = false,
            hideDefaultField = false,
            toSchedule = false,
            asMember = false,
            isSimpleList = false,
            useColorTag,
            isDataset,
            ownerDataOnly,
            categoryForEditor,
            cloneCategoryId,
            selectFirstItem,
            dpContentName = loc.main.description,
            cloneFile,
            formName = defaultFormName;
        if(opt.categoryName !== undefined){
            if(opt.categoryName.trim() === ''){
                title = record.get('title');
            }
            else{
                title = opt.categoryName;
            }
        }
        else{
            title = record.get('title');
        }

        if(opt.formMode !== undefined){
            formName = opt.formMode;
        }
        if(opt.displayApproval !== undefined){
            showApval = (opt.displayApproval)? true : false;
        }
        if(opt.fieldOnly !== undefined){
            hideDefaultField = (opt.fieldOnly)? true : false;
        }
        if(opt.simpleList !== undefined){
            isSimpleList = (opt.simpleList)? true : false;
        }
        if(opt.schedule !== undefined){
            toSchedule = (opt.schedule)? true : false;
        }
        if(opt.categoryCode !== undefined){
            asMember = (opt.categoryCode == 'member')? true : false;
        }
        if(opt.cloneCategory !== undefined){
            cloneCategoryId = opt.cloneCategory;
        }
        else{
            cloneCategoryId = '';
        }
        cloneFile = (opt.cloneFile)? true : false;
        if(opt.displayNameContent !== undefined) {
            dpContentName = opt.displayNameContent;
        }
        if(opt.colorTag){
            useColorTag = true;
        }
        if(!opt.colorTag){
            useColorTag = false;
        }
        if(opt.onlyOwner){
            ownerDataOnly = true;
        }
        if(opt.selectFirst === undefined) opt.selectFirst = true;
        if(opt.selectFirst){
            selectFirstItem = true;
        }
        else{
            selectFirstItem = false;
        }
        if(record.get('data').type == 4){

        }
        categoryForEditor = (opt.categoryForEditor === undefined)? '' : opt.categoryForEditor;

        var obj = {
            categoryName:title,//updata viewmodel data to bind the category name
            isSelected:true,//updata viewmodel data to bind the disable[false] after select a category
            isFieldSelected:false,
            option:opt,
            displayApproval:showApval,
            fieldOnly:hideDefaultField,
            isSchedule:toSchedule,
            isMember:asMember,
            colorTag:useColorTag,
            ownerDataOnly:ownerDataOnly,
            isSimpleList:isSimpleList,
            formMode:formName,
            selectedCategory:record.get('id'),
            isTextField:false,
            isNumberField:false,
            isImageField:false,
            isPrecentField:false,
            categoryForEditor:categoryForEditor,
            dpContentName:dpContentName,
            cloneCategoryId:cloneCategoryId,
            isCloneFile:cloneFile ,
            autoSelectFirst:selectFirstItem
            //     isDataset:true
        };
        dataview.up('window').getViewModel().setData(obj);
        //initialize hiding option checkbox
        var ht = dataview.up('window').down('#hideToggle');
        if(!opt.actor){
            ht.setValue(true);
        }
        if(opt.actor || opt.actor === undefined){
            ht.setValue(false);
        }
        var ast = dataview.up('window').down('#autoSelectToggle');
        ast.value = (selectFirstItem)? true : false;

        // share field store to make use it at field setting
        var me = this;
        var fStore = Ext.getStore('fStore_' + record.get('id'));
        if(fStore === undefined){
            Ext.data.JsonP.request({
                url:getDataWriteApi(),
                params:{
                    ca_id:record.get('id'),
                    html:0
                },
                success:function(response){
                    var colsList = response.categoryColsList;
                    fStore = Ext.create(appName + '.store.FieldStore',{
                        storeId:'fStore_' + record.get('id'),
                        data:colsList,
                        defaultValues:[]
                    });
                    fStore.each(function(records){
                        fStore.defaultValues.push(records.get('data_val'));
                    });
                    me.getViewModel().setData({fStore:fStore});
                }
            });
        }
        else{
            me.getViewModel().setData({fStore:fStore});
        }

    },

    onTextfieldRender: function(component, eOpts) {
        //preparing for bind to set disable at first time
        component.up('window').getViewModel().setData({isSelected:false});
        var tree = component.up('window').down('#cTree');
        component.el.on('keyup', function(e){
            if(e.keyCode == 13){
                var ctrl = getController('Config');
                var tRec = tree.getSelectionModel().getSelection()[0];
                ctrl.editCategoryOption(tRec, 'categoryName', encodeURIComponent(component.getValue()));
                //to simulate the changed directly
                var selEl = tree.el.select('.x-grid-item-selected .x-tree-node-text .tree-title').elements[0];
                selEl.textContent = component.getValue();
                //to not to change when click the expanding node icon
                tRec.set('title', component.getValue());
            }
        });
    },

    onLabelAfterRender: function(component, eOpts) {
        component.setText(loc.categorySet.changeContentName);
    },

    ondNameContentRender: function(component, eOpts) {
        //preparing for bind to set disable at first time
        var tree = component.up('window').down('#cTree');
        component.el.on('keyup', function(e){
            if(e.keyCode == 13){
                var ctrl = getController('Config');
                var tRec = tree.getSelectionModel().getSelection()[0];
                ctrl.editCategoryOption(tRec, 'displayNameContent', encodeURIComponent(component.getValue()));
            }
        });
    },

    onfdCloneRender: function(component, eOpts) {
        //preparing for bind to set disable at first time
        var tree = component.up('window').down('#cTree');
        component.el.on('keyup', function(e){
            if(e.keyCode == 13){
                var ctrl = getController('Config');
                var tRec = tree.getSelectionModel().getSelection()[0];
                ctrl.editCategoryOption(tRec, 'cloneCategory', component.getValue());
            }
        });
    },

    onCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var tree = field.up('window').down('#cTree');
        var ctrl = getController('Config');
        var tRec = tree.getSelectionModel().getSelection()[0];
        var val = (newValue)? 1:0;
        ctrl.editCategoryOption(tRec, 'cloneFile', val);
    },

    onSelectFirstDataRender: function(component, eOpts) {
        component.setText(loc.categorySet.autoSelectFirstData);
    },

    onUseColorTagRender: function(component, eOpts) {
        component.setText(loc.config.useColorTag);
    },

    onTextfieldRender1: function(component, eOpts) {
        //preparing for bind to set disable at first time
        component.up('window').getViewModel().setData({isSelected:false});
        var tree = component.up('window').down('#cTree');
        component.el.on('keyup', function(e){
            if(e.keyCode == 13){
                var ctrl = getController('Config');
                var tRec = tree.getSelectionModel().getSelection()[0];
                ctrl.editCategoryOption(tRec, 'categoryName', encodeURIComponent(component.getValue()));
                //to simulate the changed directly
                var selEl = tree.el.select('.x-grid-item-selected .x-tree-node-text .tree-title').elements[0];
                selEl.textContent = component.getValue();
                //not to change when click the expanding node icon
                tRec.set('title', component.getValue());
            }
        });
    },

    onLbShowApprovalAfterRender: function(component, eOpts) {
        component.setText(loc.config.needApprovalSetting);
    },

    onButtonClick: function(button, e, eOpts) {

        var tree = button.up('window').down('#cTree');
        var inputField = button.up('container').down('#fdCategoryId');
        var value = inputField.getValue();
        if(value.trim()===''){
            value = null;
            inputField.selectedRecord = tree.getSelectionModel().getSelection()[0];
        }
        getController('Config').editCategoryOption(inputField.selectedRecord, 'categoryForEditor', value);
    },

    onLabelBeforeRender: function(component, eOpts) {
        component.setText(loc.config.hideDefaultField);
    },

    onlbUseSimpleListRender: function(component, eOpts) {
        component.setText(loc.config.useSimpleList);
    },

    onLbShowScheduleAfterRender: function(component, eOpts) {
        component.setText(loc.config.needToFrom);
    },

    onLbuserAsUserListAfterRender: function(component, eOpts) {
        component.setText(loc.config.needMemberFields);
    },

    onDataviewItemClick: function(dataview, record, item, index, e, eOpts) {
        var ctrl = getController('Config');
        var tree = dataview.up('window').down('#cTree');
        var tRec = tree.getSelectionModel().getSelection()[0];
        ctrl.editCategoryOption(tRec, 'icon', record.get('id'));
    },

    onGridpanelRender: function(component, eOpts) {
        //loaded store binding to field grid
        component.setBind({store:'{fStore}'});
    },

    onGridpanelItemClick: function(dataview, record, item, index, e, eOpts) {
        var me = this;
        if(Ext.getCmp('fieldFirst')){
            var autoIdxRefer = record.get('cols_idx');
            Ext.getCmp('fieldFirst').target.setValue(autoIdxRefer);
            Ext.getCmp('fieldFirst').close();
            e.preventDefault();
            return;
        }
        if(record.get('cols_share')){//check if it is shared field
            dataview.up('#configTab').down('#fieldCon').setHidden(true);
            Ext.toast('<i class="fa fa-share-alt-square" aria-hidden="true"></i> ' + loc.config.unavailableShared);
            return;
        }
        else{
            dataview.up('#configTab').down('#fieldCon').setHidden(false);
        }

        var option = record.data.option;
        var colsType =record.data.cols_type;
        var isSelect = (colsType == 'select' || colsType == 'radio' || colsType == 'check')? true : false;
        var isNum = (colsType == 'number')? true : false;
        var hasImage = (option.render == 'image')? true : false;
        var hasPercent = (option.render == 'percent')? true : false;
        var hasHex = (option.render == 'colorHex')? true : false;
        var getRec = (option.getRecord !== undefined)? option.getRecord : '';
        var getVal = (option.getValue !== undefined)? option.getValue : '';
        var needSumOption = (option.needSum)? option.needSum : false;
        var defalutNumberFormat = '0.#####';

        this.getViewModel().setData({
            fieldOption:option,
            isFieldSelected:true,
            fieldRecord:record,
            isTextField:(colsType == 'text' || colsType == 'textarea' || colsType == 'dbtext')? true : false,
            isSelectField:isSelect,
            isNumberField:isNum,
            hasImageOption:hasImage,
            hasPercentOption:hasPercent,
            hasHexOption:hasHex,
            getRecord:getRec,
            getValue:getVal,
            needSum:needSumOption,
            numberFormat:(option.numberFormat)? option.numberFormat : defalutNumberFormat //defalut 0.#####
        });

        // show and hide fields for auto numbering
        var fieldCon = dataview.up('#fieldConfigContainer').down('#fieldCon');
        if(fieldCon.down('#idxCon')) fieldCon.down('#idxCon').destroy();
        if(colsType == 'idx'){
            var autoNumLen = option.size;
            if(autoNumLen === '' || autoNumLen === undefined) autoNumLen = '6';
            var titleLbl = {
                xtype: 'label',
                cls: 'form-title-label',
                text:loc.categorySet.autoIdxFormat,
                itemId:'idxTitle'
            };
            var titleText = {
                xtype:'label',
                itemId:'idxText',
                html:'<b>' + record.get('cols_unit') + '</b> + ' + autoNumLen + '' + loc.config.digitNumber
            };
            var titleSelectPrefix = {
                xtype: 'label',
                cls: 'form-title-label',
                text:loc.config.selectIdxPrefixField,
                itemId:'idxSelectTitle'
            };
            var titleSelectPreFixText = {
                margin:'20 0 0 0',
                xtype:'label',
                style: 'float:left',
                width:'100%',
                text:loc.config.selectIdxText
            };
            var idxSelectCon = {
                xtype: 'container',
                cls: 'form-section',
                width: '100%',
                bind: {
                    disabled: '{!isFieldSelected}'
                },
                items: [
                {
                    xtype: 'container',
                    width: '100%',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                    {
                        xtype: 'textfield',
                        flex: 1,
                        itemId: 'fdIdxRefer',
                        fieldLabel: 'Label',
                        hideLabel: true
                    },
                    //select button
                    {
                        xtype: 'button',
                        handler: function(button, e) {
                            var treeCon = button.up('window').down('#treeCon');
                            fieldCon.setDisabled(true);
                            treeCon.setDisabled(true);
                            var targetField = button.up('container').down('#fdIdxRefer');
                            Ext.create('Ext.window.Window', {
                                id:'fieldFirst',
                                padding:30,
                                scrollable:true,
                                alwaysOnTop:true,
                                target:targetField,
                                items:[
                                {
                                    xtype:'label',
                                    text:loc.config.selectField
                                }
                                ],
                                listeners:{
                                    afterlayout:function(comp){
                                        comp.center();
                                    },
                                    close:function(){
                                        treeCon.setDisabled(false);
                                        fieldCon.setDisabled(false);
                                    }
                                }
                            }).show();
                        },
                        itemId: 'btnSelect',
                        iconCls: 'fa fa-folder-o'
                    },
                    //save button
                    {
                        xtype: 'button',
                        itemId: 'btnSelectField',
                        style: 'float:left',
                        ui: 'default-toolbar-small',
                        bind: {
                            text: '{save}'
                        },
                        listeners: {
                            click:function(button){
                                var targetField = fieldCon.down('#fdIdxRefer');
                                var value = targetField.getValue();
                                var fdGetRec = button.up('tabpanel').down('#getRecordField').down('#fdCopied');
                                var rec = me.getViewModel().getData().fieldRecord;
                                getController('Config').editFieldOption(rec, 'autoNumberNameField', value);
                            }
                        }
                    }
                    ]
                }
                ]
            };
            var idxCon = {
                xtype:'container',
                layout:'vbox',
                width:'100%',
                itemId:'idxCon',
                items:[titleLbl, titleText, titleSelectPrefix, titleSelectPreFixText, idxSelectCon]
            };

            fieldCon.add(idxCon);
        }
        if(option.numberFormat !== undefined && option.numberFormat !== null && option.numberFormat !== ''){
            dataview.up('#fieldConfigContainer').down('#selectNumberFormat').setFieldLabel(Ext.util.Format.number(123456.789, option.numberFormat));
        }
        else{
            dataview.up('#fieldConfigContainer').down('#selectNumberFormat').setFieldLabel(Ext.util.Format.number(123456.789, defalutNumberFormat));
        }

    },

    onBtnHideClick: function(button, e, eOpts) {
        var rec = this.getViewModel().getData().fieldRecord;
        var value = button.up('container').down('#hideToggle').getValue();
        getController('Config').editFieldOption(rec, 'hidden', value);
    },

    onBtnImageClick: function(button, e, eOpts) {
        var rec = this.getViewModel().getData().fieldRecord;
        var value = button.up('container').down('#imageToggle').getValue();
        var val = (value)? 'image' : false;
        getController('Config').editFieldOption(rec, 'render', val);
    },

    onBtnNeedSumClick: function(button, e, eOpts) {
        var rec = this.getViewModel().getData().fieldRecord;
        var value = button.up('container').down('#needSumToggle').getValue();
        getController('Config').editFieldOption(rec, 'needSum', value);
    },

    onSelectNumberFormatRender: function(component, eOpts) {
        var store = Ext.create('Ext.data.Store', {
            field:[
            {name:'text'},
            {name:'value'}
            ],
            data:[
            {text:'0', value:'1234567'},
            {text:'0.00', value:'123456.79'},
            {text:'0.000', value:'123456.789'},
            {text:'0,000', value:'123,457'},
            {text:'0,000.0', value:'123,456.8'},
            {text:'0,000.00', value:'123,456.79'},
            {text:'0.0000', value:'123456.7890'},
            {text:'0.#####', value:'123456.789'},
            {text:'0,000.###', value:'123,456.789'}
            ]
        });
        component.setStore(store);
        component.el.on('keyup', function(e){
            if(e.keyCode == 13){
                var fVal = component.getValue();
                if(fVal === undefined) fVal = '0.#####';
                component.setFieldLabel(Ext.util.Format.number(123456.789, fVal));
            }
        });

    },

    onSelectNumberFormatSelect: function(combo, record, eOpts) {
        var val;
        if(combo.getSelection() === null){
            var fVal = combo.getValue();
            if(fVal === undefined) fVal = '0.#####';
            if(combo.getValue() === undefined)
            val = Ext.util.Format.number(123456.789, fVal);
        }
        else{
            val = record.get('value');
        }
        combo.setFieldLabel(val);
    },

    onBtnSaveformatClick: function(button, e, eOpts) {
        var rec = this.getViewModel().getData().fieldRecord;
        var value = button.up('container').down('#selectNumberFormat').getValue();
        getController('Config').editFieldOption(rec, 'numberFormat', value);
    },

    onBtnPercentClick: function(button, e, eOpts) {
        var rec = this.getViewModel().getData().fieldRecord;
        var value = button.up('container').down('#percentToggle').getValue();
        var val = (value)? 'percent' : false;
        getController('Config').editFieldOption(rec, 'render', val);
    },

    onBtnHexClick: function(button, e, eOpts) {
        var rec = this.getViewModel().getData().fieldRecord;
        var value = button.up('container').down('#hexToggle').getValue();
        var val = (value)? 'colorHex' : false;
        getController('Config').editFieldOption(rec, 'render', val);
    },

    onLabelRender: function(component, eOpts) {
        component.setText(loc.config.getRecordExp);
    },

    onBtnGetRecClick: function(button, e, eOpts) {
        var fdValRec = button.up('tabpanel').down('#getValueField').down('#fdCopied');
        var value = button.up('container').down('#fdCopied').getValue();
        if(fdValRec.value !== '' && value !== ''){//옵션을 삭제하려는 짓 이외에 getValue 값을 입력하려 할때
            Ext.Msg.alert('CAUTION', loc.error.removeGetRecord);
            return;
        }
        var rec = this.getViewModel().getData().fieldRecord;
        getController('Config').editFieldOption(rec, 'getRecord', value);
    },

    onBtnGetValClick: function(button, e, eOpts) {
        var value = button.up('container').down('#fdCopied').getValue();
        var fdGetRec = button.up('tabpanel').down('#getRecordField').down('#fdCopied');
        if(fdGetRec.value !== '' && value !== ''){//옵션을 삭제하려는 짓 이외에 getRecord 값을 입력하려 할때
            Ext.Msg.alert('CAUTION', loc.error.removeGetValue);
            return;
        }
        var rec = this.getViewModel().getData().fieldRecord;
        getController('Config').editFieldOption(rec, 'getValue', value);
    },

    onCateSetWinBeforeRender: function(component, eOpts) {
        languageSet.Korean.categorySet = {};
        languageSet.English.categorySet = {};

        languageSet.English.categorySet = {
            adminExcept:'Supervisor will not be unaffectted',
            autoSelectFirstData:'Select the first item of category when click the category',
            autoIdxFormat:'Current auto numbering value',
            categoryId:'Id of category that will be cloned',
            changeCategoryName:'Change the displayed name of category in list',
            changeContentName:'Change the displayed name instead of "Content" that one of the basic information',
            cloneCategory:'Clone category',
            cloneFile:'Clone files as well',
            hideCategory:'Hide category'

        };
        languageSet.Korean.categorySet = {
            adminExcept:'최고 관리자는 영향 받지 않습니다.',
            autoIdxFormat:'설정된 자동 증가 ID',
            autoSelectFirstData:'카레고리 이동시 첫번째 자료 자동 선택',
            categoryId:'복제 할 카테고리 ID',
            changeCategoryName:'목록에 보여질 카테고리 이름 변경',
            changeContentName:'기본정보중 "내용"을 다른 말로 변경',
            cloneCategory:'카테고리 복제',
            cloneFile:'파일도 함께 복제',
            hideCategory:'일반 사용자들에게 카테고리 숨김'
        };

        this.getViewModel().setData({
            adminExcept:loc.categorySet.adminExcept,
            categoryId:loc.categorySet.categoryId,
            changeCategoryName:loc.categorySet.changeCategoryName,
            cloneCategory:loc.categorySet.cloneCategory,
            hideCategory:loc.categorySet.hideCategory,
            cloneFile:loc.categorySet.cloneFile
        });
    },

    onCateSetWinAfterRender: function(component, eOpts) {
        component.setHeight(windowMaxHeight);
    }

});
