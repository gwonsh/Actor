/*
 * File: app/view/ColorWindowViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.ColorWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.colorwindow',

    initialize: function(colorways) {
        //generate the default colorways in design
        //         for(var i=0; i<defaultColorway.color.length; i++){
        //             response.color[i].name = defaultColorway.color[i].name;
        //         }
        var me = this;
        var cWin = this.getView();
        var rec = cWin.down('#designForm').getRecord();
        var i;
        var cwStore = cWin.getViewModel().getStore('ColorwayStore');

        // build symbol list in the hbox
        var behalfUnit = {
            xtype:'label',
            style:'border:1px solid #cecece;margin-right:3px;padding:3px;text-align:center;cursor:pointer;background-color:white',
            width:40,
            height:30,
            overItemCls:'x-column-header-over',
            listeners:{
                afterrender:function(label){
                    label.el.on('click', function(){
                        //change behalf
                        me.getColorSymbolList(label);
                    });
                }
            }
        };

        //set number of colors in design
        var dosu = parseInt(rec.get('idnumberOfColors'));
        if(dosu === 0 || dosu === ''){//in case no data in dosu field
            Ext.toast('도수를 알수가 없습니다. 디자인정보에 도수를 입력해 주시고 다시 실행 하세요');
            return;
        }
        for(i=0; i<dosu; i++){
            behalfUnit.index = i;
            cWin.down('#behalfCon').add(behalfUnit);
        }

        var dataview = cWin.down('#colorGrid');
        dataview.setStore(cwStore);
        cwStore.sort('group');

        var combo = cWin.down('#cbChasu');
        var setChasuStore = function(chaData){
            ///////////////////////////////////
            // Store for 차수Store#cbChasu   ///
            ///////////////////////////////////
            var chaStore = Ext.create('Ext.data.Store', {
                field:['chasu'],
                data:chaData
            });
            combo.setStore(chaStore);
            chaStore.on('load',function loadChasu(sto){
                sto.un('load',loadChasu);
                var selectFirst = function(comb){//첫번째 차수 자동 선택
                    combo.select(chaStore.getAt(0));
                    combo.fireEvent('select', combo, chaStore.getAt(0));
                };
                setTimeout(selectFirst, 200);
            });
            chaStore.load();
        };

        if(colorways !== undefined && colorways.length !== 0){
            //add basic(default) colorway to [0]
            cwStore.add(colorways);
            if(cwStore.findRecord('chasu', 1) !== null){
                var firstRecord = cwStore.findRecord('chasu', 1).copy();
                cWin.firstRecord = firstRecord;
            }
            var maxCha = cwStore.max('chasu');
            var toCha = [];
            for(var i=1; i<maxCha+1; i++){
                if(toCha.indexOf({chasu:i}) == -1){
                    toCha.push({chasu:parseInt(i)});
                }
            }
            setChasuStore(toCha);


        // temporary //////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            var sto = cWin.down('#colorGrid').getStore();
            var vs = [];
            var cs = [];
            var rl = [];
            var dlTmp = [];
            var dl = [];
            var i;
            var count = 0;

            for(i=0; i<toCha.length; i++){
                var sq = sto.findBy(function(record){
                    if(record.get('group') === 0 && record.get('chasu') == i+1){
                        if(cs.indexOf(record.get('group').toString() + ':' + record.get('chasu').toString()) == -1){
                            //차수당 디자인 디폴트를 배열에
                            cs.push(record.get('group').toString() + ':' + record.get('chasu').toString());
                        }
                        else{
                            rl.push(record);//차수당 디자인디폴트가 두개 이상 되면 지울준비
                        }
                        vs.push({chasu:record.get('chasu'), r:record});

                    }
                });
            }
            for(i=0; i<rl.length; i++){
                sto.remove(rl[i]);
            }
            sto.findBy(function(record){
                if(dlTmp.indexOf(record.get('color_name').toString() + ':' + record.get('chasu').toString()) == -1){
                    dlTmp.push(record.get('color_name').toString() + ':' + record.get('chasu').toString());
                }
                else{
                    dl.push(record);//차수당 똑같은 칼라이름을 가진 배색이 두개 이상 되면 지울 준비
                }
            });

            for(i=0; i<dl.length; i++){
                sto.remove(dl[i]);
            }

            for(i=0; i<toCha.length; i++){
                if(i, cs.indexOf('0:'+ (i+1).toString()) == -1){//디자인디폴트가 없는 차수에만 디자인디폴트 강제 추가
                    var copyCol = getController('Util').copyObject(cWin.down('#designForm').originalColor);
                    copyCol.chasu = i +1;
                    sto.add(copyCol);
                }
            }
            cWin.down('#colorGrid').refresh();

            var dQuery = '?';
            for(var i=0; i<rl.length; i++){
                if(i===0){
                    dQuery += 'bd_idx=' + rl[i].get('bd_idx');
                }
                else{
                    dQuery += '&bd_idx=' + rl[i].get('bd_idx');
                }
            }
            if(dQuery != '?'){//중복 디폴트 삭제
                Ext.data.JsonP.request({
                    url:getDeleteDataApi() + dQuery,
                    success:function(response){
                    }
                });
            }

            var query = '?';
            for(var i=0; i<dl.length; i++){//중복 배색 삭제
                if(i===0){
                    query += 'bd_idx=' + dl[i].get('bd_idx');
                }
                else{
                    query += '&bd_idx=' + dl[i].get('bd_idx');
                }
            }
            if(query != '?'){
                Ext.data.JsonP.request({
                    url:getDeleteDataApi() + query,
                    success:function(response){
                    }
                });
            }


        }
        // temporary //////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////






        //Getting chasu from ERP, show it if it's not the same in system
        Ext.data.JsonP.request({
            url:cWin.erpDomain + '/getDesign',
            params:{
                design:rec.get('bd_subject')
            },
            success:function(res){
                var curMaxCha = cWin.down('#cbChasu').getStore().getCount();
                var erpMaxCha = res.length;
                if(curMaxCha != erpMaxCha){
                    cWin.down('#chasuFieldSet').setTitle('차수 ' + '<span style="color:red">ERP('+res.length+')<span>');
        //             cWin.down('#btnUpdateChasu').setHidden(false);
                    //save new chasu to update in case
                    cWin.down('#btnUpdateChasu').newChasu = res;
                }
                else{
                    cWin.down('#chasuFieldSet').setTitle('차수');
        //             cWin.down('#btnUpdateChasu').setHidden(true);
                }
            }
        });

    },

    setImage: function(zoom) {
        var form= this.getView().down('#designForm');
        var canvas= form.canvas;
        var ctx;
        var dpWidth, dpHeight;
        var canvW = canvas.width;
        var canvH = canvas.height;
        var oW = form.getRecord().get('file_width');
        var oH = form.getRecord().get('file_height');
        var cloneCvs = form.cloneCanvas(canvas);
        if(zoom == 'fit'){
            dpWidth = form.getWidth() - 20;
            dpHeight = form.getHeight() - 20;
            canvas.scale = 1;
        }
        if(zoom == 'actual'){
            dpWidth  = oW;
            dpHeight = oH;
            canvas.scale = 1;
        }
        if(zoom == 'plus'){
            dpWidth = oW * canvas.scale * 1.1;
            dpHeight = oH * canvas.scale * 1.1;
            if(canvas.scale * 1.1 > 1){
                dpWidth = oW;
                dpHeight = oH;
            }
        }
        if(zoom == 'minus'){
            dpWidth = oW * canvas.scale / 1.1;
            dpHeight = oH * canvas.scale / 1.1;
        }
        // if(oW <= dpWidth && oH <= dpHeight){
        //     dpWidth = oW;
        //     dpHeight = oH;
        // }
        var ratio = Math.min(dpWidth/oW, dpHeight/oH);
        ctx = canvas.getContext('2d'); // Get the drawing context of your canvas element.
        ctx.oImageSmoothingEnabled = false;
        ctx.mozImageSmoothingEnabled = false;
        ctx.webkitImageSmoothingEnabled = false;
        ctx.msImageSmoothingEnabled = false;
        ctx.imageSmoothingEnabled = false;

        if(form.initialized){
            canvas.width = oW * ratio;
            canvas.height = oH * ratio;
            ctx.clearRect(0, 0, oW, oH);
            ctx.scale(ratio, ratio);
            canvas.scale = ratio;
            ctx.drawImage(form.cloneCanvas(form.baseCanvas), 0, 0);
        }
        else{
            var drawing = new Image();
            form.mask(loc.main.loadingImage);
            drawing.crossOrigin="anonymous";
            drawing.src = form.getRecord().get('bd_file')[0].file_path;
            drawing.onload=function() {
                ctx.scale(ratio, ratio);
                ctx.drawImage(drawing, 0, 0);
                if(form.orginalCanvas === undefined){
                    form.originalCanvas = form.cloneCanvas(canvas);
                }
                form.baseCanvas = form.cloneCanvas(canvas);
                form.initialized = true;
                form.unmask();
                form.fireEvent('imageready');
            };
        }

    },

    getStore: function() {
        return this.getView().down('#colorGrid').getStore();
    },

    getHexByCode: function(rec, colors, grid) {
        ///////////////////////////////////////////////////
        // get hex color from color code library by code //
        ///////////////////////////////////////////////////
        var count = 0;
        var me = this;
        var cfgStore = Ext.getStore('ConfigStore');
        var getHex = function(r, count){
            if(grid.getItemId() == 'colorGrid'){//ERP 업데이트에서 가져와 colorGrid에 적용된 배색의 자동 채색 경우
                grid.mask('색을 생성하고 있는 중입니다.');
            }
            //show default design library that configured
            var colorCate = cfgStore.getAt(0).get('colorchipCategory');
            var code = r.get('color')[count].name;
            var chk3 = r.get('color')[count].cchk3;
            var method="equal";
            var prmts = {
                ca_id:colorCate,//칼라코드
                colorCode:code,
                colorCode_method:'equal',//칼라코드 검색조건 equal
                range1:chk3,//시작값
                range1_method:'gt',//시작값 검색 코드 <
                range2:chk3,//끝값
                range2_method:'lt'//끝값 검색 코드 >
            };
            Ext.data.JsonP.request({
                url:getDataListByIdApi('', true),
                params:prmts,
                success:function(res){//흡수칼라목록 부터 뒤짐
                    if(res.binderList[0] !== undefined){
                        var bdData = res.binderList[0].bd_data;
                        for(var i=0; i<bdData.length; i++){
                            if(bdData[i].cols_code == 'colorHex'){
                                var hex = bdData[i].data_val;
                                if(hex.indexOf('#') == -1) hex = '#' + hex;
                                r.get('color')[count].color = hex;
                                r.get('color')[count].findHex = 'limegreen';
                                r.get('color')[count].isExist = true;
                            }
                        }
                    }
                    else{//흡수칼라목록에 없으면 칼라코드관리에서 직접 검색
                        prmts.ca_id = 91;
                        recount = count;
                        var query = '&ca_id=91&se_subject='+ code +'&se_subject_method='+method;
                        Ext.data.JsonP.request({
                            url:getDataListByIdApi(query, true),
                            success:function(reres){
                                if(reres.binderList[0] !== undefined){
                                    var bdData = reres.binderList[0].bd_data;
                                    for(var i=0; i<bdData.length; i++){
                                        if(bdData[i].cols_code == 'colorHex'){
                                            var hex = bdData[i].data_val;
                                            if(hex.indexOf('#') == -1) hex = '#' + hex;
                                            r.get('color')[recount].color = hex;
                                            r.get('color')[recount].findHex = 'deepskyblue';
                                        }
                                    }
                                }
                                else{
                                    r.get('color')[recount].findHex = 'orangered';
                                }
                                if(grid.getItemId() == 'colorGrid'){//ERP 업데이트에서 가져와 colorGrid에 적용된 배색의 자동 채색
                                    r.get('color')[recount].isExist = false;
                                    grid.refresh();
                                    grid.unmask();
                                }
                                else{
                                    grid.getStore().load();
                                }
                            }
                        });
                    }
                    if(count < colors.length - 1){
                        count ++;
                        getHex(rec, count);
                    }
                    else{
                        me.getView().fireEvent('colorwayloadcomplete');
                        count = 0;
                        if(grid.getItemId() == 'colorGrid'){
                            grid.refresh();
                            grid.unmask();
                        }
                        else{
                            grid.getStore().load();
                        }
                    }
                }
            });
        };
        getHex(rec, count);
    },

    getChasuListFromERP: function(designNo) {
        ///////////////
        // 차수 Grid  //
        ///////////////
        var chaGrid = Ext.create('Ext.grid.Panel', {
            width:600,
            bodyStyle:'background-color:#cccccc',
            columns: [
                {
                    text:'차수',
                    dataIndex:'CHASU',
                    width:50,
                },
                {
                    text:'작업자',
                    dataIndex:'JSSANO'
                },
                {
                    text:'도수',
                    dataIndex:'DOSU',
                    width:50,
                },
                {
                    text:'거래처',
                    dataIndex:'SITE'
                },
                {
                    text:'원단',
                    flex:1,
                    dataIndex:'FABRIC'
                }
            ]
        });
        var url = this.getView().erpDomain + '/getDesign?design=' + designNo ;
        var myStore = Ext.create('Ext.data.Store', {
            storeId:'ChaStore',
            autoLoad:true,
            proxy: {
                type: 'jsonp',
                api: {
                    read: url
                },
                reader: {
                    type: 'json',
                }
            },
            fields:[
                {name:'거래처', mapping:'SITE'},
                {name:'원단', mapping:'FABRIC'},
                {name:'작업자', mapping:'JSSANO'},
                {name:'도수', mapping:'DOSU'},
                {name:'차수', mapping:'CHASU'}
            ],
            listeners:{
                load:function(st){
                    if(st.getCount() === 0){
                        Ext.toast(loc.colorway.noChasuInfoInERP);
                        return;
                    }
                    st.sort('CHASU', 'ASC');
                    ///////////////////////
                    // 칼라웨이 목록 윈도우 //
                    ///////////////////////
                    var chaWin = Ext.create('Ext.window.Window', {
                        padding:15,
                        title:'차수 선택',
                        scrollable:true,
                        maxHeight:windowMaxHeight,
                        items:[
                            chaGrid
                        ]
                    }).show();
                }
            }
        });
        chaGrid.reconfigure(myStore);
        return chaGrid;
    },

    /* 추천칼라웨이 윈도 오른쪽 그리드 */
    getColorwayByChasuFromERP: function(rec, target) {
        var me = this;
        var cha = rec.get('CHASU');//차수
        var dosu = rec.get('DOSU');//도수
        var besu = parseInt(rec.get('JSSU'));//배색수
        var designNo = rec.get('DESIGN');
        var url = this.getView().erpDomain + '/getColorList?design='+designNo+'&chasu='+cha+'&cno=1';
        var colors = [{num:''}];
        Ext.data.JsonP.request({
            url:url,
            success:function(response){
                var colorways=[];
                var i, j;
                for(i=0; i< besu.length; i++){
                    colorways[i] = [];
                }
                Ext.Array.each(response, function(entry, z){
                    var cwNo = entry.CNO - 1;
                    var jssu = entry.JSSU - 9;
                    if(colorways[jssu] === undefined){
                        colorways[jssu] = {color:[]};
                    }

                    var c = (entry.DCOLOR === null)? entry.COLOR : entry.DCOLOR;
                    var isExist=false;
                    for (var i = 0; i < colorways[jssu].color.length; i++) {
                        if ((colorways[jssu].color[i].cno === cwNo + 1) && (colorways[jssu].color[i].name == c)) isExist=true;

                    }
                    if(c == '.') {
                        c = colorways[jssu - 1].color[cwNo-1].name;
                    }

                    if(isExist === false) colorways[jssu].color.push({name:c, cno:cwNo + 1, cchk3:entry.CCHK3, findHex:'#cecece'});
                });
                ////////////////////
                // Colorway store //
                ////////////////////
                var colorStore = Ext.create('Ext.data.Store', {
                    storeId:'ERPColorwayStore',
                    fields:[
                        {
                            name:'칼라코드',
                            mapping:'color'
                        }
                    ],
                    data:colorways
                });
                var grid = {
                    ///////////////////
                    // Colorway grid //
                    ///////////////////
                    xtype:'gridpanel',
                    flex:1,
                    itemId:'recommColorGrid',
                    columns:[
                        {
                            xtype:'rownumberer'
                        },
                        {
                            text: 'Color',
                            dataIndex:'color',
                            flex:1,
                            renderer:function(v){
                                var val = '';
                                var test = '';
                                for(var i=0; i<v.length; i++){
                                    var bgColor = (v[i].color === undefined)? 'white':v[i].color;
                                    val += '<div style="background-color:'+bgColor+';float:left;font-size:12px;padding:2px 5px 2px 5px;';
                                    val += 'border:1px solid '+v[i].findHex+';margin-right:3px; width:50px;text-align:center">';
                                    val += v[i].name+'<br><sapn style="font-size:10px">('+v[i].cchk3+')</span></div>';
                                }
                                return val;
                            }
                        },
                        {
                            xtype: 'actioncolumn',
                            width:45,
                            text:'색',
                            style:'font-size:12px',
                            align:'center',
                            items:[
                                {
                                    ////////////////////
                                    // 한건씩 칼라 매칭 //
                                    ////////////////////
        //                             glyph:'xf1fb@FontAwesome',
                                    iconCls:'colorway-small',
                                    tooltip:'색불러오기',
                                    handler:function(grid, rowIndex, colIndex){
                                        var rec = grid.getStore().getAt(rowIndex);
                                        var colors = rec.get('color');
                                        var cfgStore = Ext.getStore('ConfigStore');
                                        var count = 0;
                                        var recount;
                                        me.getHexByCode(rec, colors, grid);
                                    }
                                }

                            ]
                        },
                        {
                            xtype:'actioncolumn',
                            text:'보기',
                            width:50,
                            align:'center',
                            items:[
                                {
                                    glyph:'xf06e@FontAwesome',
                                    tooltip:'미리보기',
                                    handler:function(grid, rowIndex, colIndex){
                                        if(!me.checkSymbols()) return;
                                        var form = Ext.getCmp('color_window').down('#designForm');
                                        form.mask('디자인의 배색을 변경중입니다.');
                                        var rec = grid.getStore().getAt(rowIndex);

                                        ///////////////////////////////////////////////////////////////
                                        //색깔과 디자인기호와 순서를 맞추어 표시하여 디자인에 연결될 칼라 저장 //
                                        ///////////////////////////////////////////////////////////////
                                        var chasu = Ext.getCmp('color_window').down('#cbChasu').getValue();
                                        var symbolOrder = Ext.getCmp('color_window').symbolOrder[chasu]; //checkSymbols()에서 저장한것
                                        var newColors = [];
                                        for(var i=0; i<rec.get('color').length; i++){
                                            newColors[i] = rec.get('color')[symbolOrder[i]];
                                        }
                                        setTimeout(form.setAllChangeColor, 300, form.originalColor.color, newColors);
                                    }
                                }
                            ]
                        },
                        {
                            xtype:'actioncolumn',
                            text:'추가',
                            align:'center',
                            width:50,
                            items:[
                                {
                                    toolTip:'디자인에 배색 추가',
                                    glyph:'xf058@FontAwesome'
                                }
                            ],
                            handler:function(grid, rowIndex, colIndex){
                                 me.insertColorway(grid.getStore().getAt(rowIndex).get('color'));
                            }
                        }

                    ],
                    store:colorStore
                };

                if(target !== undefined){
                    target.removeAll();
                    target.add(grid);
                    return;
                }

                /////////////////////////////////
                // Colorway list in ERP window //
                /////////////////////////////////
                var colorWin = Ext.create('Ext.window.Window', {
                    width:600,
                    padding:20,
                    title:'Colorways',
                    scrollable:true,
                    layout:'fit',
                    maxHeight:windowMaxHeight,
                    items:[grid]

                }).show();
                colorStore.load();
            }
        });
    },

    /* 추천칼라웨이 윈도 오른쪽 그리드 */
    getColorwayByChasuFromERP1: function(rec, target) {
        var me = this;
        var cha = rec.get('CHASU');//차수
        var dosu = rec.get('DOSU');//도수
        var besu = parseInt(rec.get('JSSU'));//배색수
        var designNo = rec.get('DESIGN');
        var url = this.getView().erpDomain + '/getColorList?design='+designNo+'&chasu='+cha+'&cno=1';
        var colors = [{num:''}];
        Ext.data.JsonP.request({
            url:url,
            success:function(response){
                var colorways=[];
                var i, j;
                for(i=0; i< besu.length; i++){
                    colorways[i] = [];
                }
                Ext.Array.each(response, function(entry, z){
                    var cwNo = entry.CNO - 1;
                    var jssu = entry.JSSU - 9;
                    if(colorways[jssu] === undefined){
                        colorways[jssu] = {colors:[]};
                    }

                    var c = (entry.DCOLOR === null)? entry.COLOR : entry.DCOLOR;
                    var isExist=false;
                    for (var i = 0; i < colorways[jssu].colors.length; i++) {
                        if ((colorways[jssu].colors[i].cno === cwNo + 1) && (colorways[jssu].colors[i].name == c)) isExist=true;

                    }
                    if(c == '.') {
                        c = colorways[jssu - 1].colors[cwNo-1].name;
                    }

                    if(isExist === false) colorways[jssu].colors.push({name:c, cno:cwNo + 1, cchk3:entry.CCHK3, findHex:'#cecece'});
                });
                ////////////////////
                // Colorway store //
                ////////////////////
                var colorStore = Ext.create('Ext.data.Store', {
                    storeId:'ERPColorwayStore',
                    fields:[
                        {
                            name:'칼라코드',
                            mapping:'colors'
                        }
                    ],
                    data:colorways
                });

                var grid = {
                    ///////////////////
                    // Colorway grid //
                    ///////////////////
                    xtype:'gridpanel',
                    flex:1,
                    itemId:'recommColorGrid',
                    columns:[
                        {
                            xtype:'rownumberer'
                        },
                        {
                            text: 'Color',
                            dataIndex:'colors',
                            flex:1,
                            renderer:function(v){
                                var val = '';
                                var test = '';
                                for(var i=0; i<v.length; i++){
                                    var bgColor = (v[i].color === undefined)? 'white':v[i].color;
                                    val += '<div style="background-color:'+bgColor+';float:left;font-size:12px;padding:2px 5px 2px 5px;';
                                    val += 'border:1px solid '+v[i].findHex+';margin-right:3px; width:50px;text-align:center">';
                                    val += v[i].name+'<br><sapn style="font-size:10px">('+v[i].cchk3+')</span></div>';
                                }
                                return val;
                            }
                        },
                        {
                            xtype: 'actioncolumn',
                            width:45,
                            text:'색',
                            style:'font-size:12px',
                            align:'center',
                            items:[
                                {
                                    ////////////////////
                                    // 한건씩 칼라 매칭 //
                                    ////////////////////
        //                             glyph:'xf1fb@FontAwesome',
                                    iconCls:'colorway-small',
                                    tooltip:'색불러오기',
                                    handler:function(grid, rowIndex, colIndex){
                                        var rec = grid.getStore().getAt(rowIndex);
                                        var colors = rec.get('colors');
                                        var cfgStore = Ext.getStore('ConfigStore');
                                        var count = 0;
                                        var recount;
                                        me.getHexByCode(rec, colors, grid);
                                    }
                                }

                            ]
                        },
                        {
                            xtype:'actioncolumn',
                            text:'보기',
                            width:50,
                            align:'center',
                            items:[
                                {
                                    glyph:'xf06e@FontAwesome',
                                    tooltip:'미리보기',
                                    handler:function(grid, rowIndex, colIndex){
                                        if(!me.checkSymbols()) return;
                                        var form = Ext.getCmp('color_window').down('#designForm');
                                        form.mask('디자인의 배색을 변경중입니다.');
                                        var rec = grid.getStore().getAt(rowIndex);

                                        ///////////////////////////////////////////////////////////////
                                        //색깔과 디자인기호와 순서를 맞추어 표시하여 디자인에 연결될 칼라 저장 //
                                        ///////////////////////////////////////////////////////////////
                                        var chasu = Ext.getCmp('color_window').down('#cbChasu').getValue();
                                        var symbolOrder = Ext.getCmp('color_window').symbolOrder[chasu]; //checkSymbols()에서 저장한것
                                        var newColors = [];
                                        for(var i=0; i<rec.get('colors').length; i++){
                                            newColors[i] = rec.get('colors')[symbolOrder[i]];
                                        }
                                        setTimeout(form.setAllChangeColor, 300, form.originalColor.color, newColors);
                                        //                                 form.setAllChangeColor(form.originalColor.color, newColors);
                                    }
                                }
                            ]
                        },
                        {
                            xtype:'actioncolumn',
                            text:'추가',
                            align:'center',
                            width:50,
                            items:[
                                {
                                    toolTip:'디자인에 배색 추가',
                                    glyph:'xf058@FontAwesome'
                                }
                            ],
                            handler:function(grid, rowIndex, colIndex){
                                 me.insertColorway(grid.getStore().getAt(rowIndex).get('colors'));
                            }
                        }

                    ],
                    store:colorStore
                };

                if(target !== undefined){
                    target.removeAll();
                    target.add(grid);
                    return;
                }

                /////////////////////////////////
                // Colorway list in ERP window //
                /////////////////////////////////
                var colorWin = Ext.create('Ext.window.Window', {
                    width:600,
                    padding:20,
                    title:'Colorways',
                    scrollable:true,
                    layout:'fit',
                    maxHeight:windowMaxHeight,
                    items:[grid]

                }).show();
                colorStore.load();
            }
        });
    },

    getColorSymbol: function(designNo, chasu) {
        if(chasu === undefined) chasu = 1;
        var url = this.getView().erpDomain + '/getColorTitle?design=' + designNo + '&chasu=' + chasu;
        var store = Ext.create('Ext.data.Store', {
            fields:['color'],
            storeId:'behalf_' + designNo + '_' + chasu,
            autoLoad:true,
            params:{
                design:designNo,
                chasu:chasu
            },
            proxy: {
                url:url,
                type: 'jsonp',
                reader: {
                    type: 'json'
                }
            }
        });
        return store;
    },

    getColorSymbolList: function(target) {
        ////////////////////////////////////
        // selecting a behalf from the list //
        ////////////////////////////////////
        var me = this;
        var cWin = this.getView();
        var bhWin = Ext.create('Ext.window.Window', {
            width:370,
            maxHeight:windowMaxHeight,
            height:910,
            layout:'fit',
            padding:12,
            modal:true,
            alwaysOnTop:true,
            title:'디자인 기호',
            items:[
                {
                    xtype:'dataview',
                    itemSelector:'div.behalf-unit',
                    scrollable:true,
                    overItemCls:'x-column-header-over',
                    store:Ext.create('Ext.data.Store', {
                        fields:['color'],
                        data:[
                            {
                                color:'가-1'
                            },
                            {
                                color:'가-2'
                            },
                            {
                                color:'가-3'
                            },
                            {
                                color:'가-4'
                            },
                            {
                                color:'가-5'
                            },
                            {
                                color:'나-1'
                            },
                            {
                                color:'나-2'
                            },
                            {
                                color:'나-3'
                            },
                            {
                                color:'나-4'
                            },
                            {
                                color:'나-5'
                            },
                            {
                                color:'다-1'
                            },
                            {
                                color:'다-2'
                            },
                            {
                                color:'다-3'
                            },
                            {
                                color:'다-4'
                            },
                            {
                                color:'다-5'
                            },
                            {
                                color:'라-1'
                            },
                            {
                                color:'라-2'
                            },
                            {
                                color:'라-3'
                            },
                            {
                                color:'라-4'
                            },
                            {
                                color:'라-5'
                            },
                            {
                                color:'마-1'
                            },
                            {
                                color:'마-2'
                            },
                            {
                                color:'마-3'
                            },
                            {
                                color:'마-4'
                            },
                            {
                                color:'마-5'
                            },
                            {
                                color:'바-1'
                            },
                            {
                                color:'바-2'
                            },
                            {
                                color:'바-3'
                            },
                            {
                                color:'바-4'
                            },
                            {
                                color:'바-5'
                            },
                            {
                                color:'사-1'
                            },
                            {
                                color:'사-2'
                            },
                            {
                                color:'사-3'
                            },
                            {
                                color:'사-4'
                            },
                            {
                                color:'사-5'
                            },
                            {
                                color:'아-1'
                            },
                            {
                                color:'아-2'
                            },
                            {
                                color:'아-3'
                            },
                            {
                                color:'아-4'
                            },
                            {
                                color:'아-5'
                            },
                            {
                                color:'자-1'
                            },
                            {
                                color:'자-2'
                            },
                            {
                                color:'자-3'
                            },
                            {
                                color:'자-4'
                            },
                            {
                                color:'자-5'
                            },
                            {
                                color:'차-1'
                            },
                            {
                                color:'차-2'
                            },
                            {
                                color:'차-3'
                            },
                            {
                                color:'차-4'
                            },
                            {
                                color:'차-5'
                            },
                            {
                                color:'카-1'
                            },
                            {
                                color:'카-2'
                            },
                            {
                                color:'카-3'
                            },
                            {
                                color:'카-4'
                            },
                            {
                                color:'카-5'
                            },
                            {
                                color:'타-1'
                            },
                            {
                                color:'타-2'
                            },
                            {
                                color:'타-3'
                            },
                            {
                                color:'타-4'
                            },
                            {
                                color:'타-5'
                            },
                            {
                                color:'파-1'
                            },
                            {
                                color:'파-2'
                            },
                            {
                                color:'파-3'
                            },
                            {
                                color:'파-4'
                            },
                            {
                                color:'파-5'
                            },
                            {
                                color:'하-1'
                            },
                            {
                                color:'하-2'
                            },
                            {
                                color:'하-3'
                            },
                            {
                                color:'하-4'
                            },
                            {
                                color:'하-5'
                            },
                            {
                                color:'G'
                            },
                            {
                                color:'G-1'
                            },
                            {
                                color:'G-2'
                            },
                            {
                                color:'G-3'
                            },
                            {
                                color:'3'
                            },
                            {
                                color:'L'
                            },
                            {
                                color:'L-1'
                            },
                            {
                                color:'L-2'
                            },
                            {
                                color:'L-3'
                            },
                            {
                                color:''
                            },
                            {
                                color:'N'
                            },
                            {
                                color:''
                            },
                            {
                                color:''
                            },
                            {
                                color:''
                            },
                            {
                                color:''
                            },
                            {
                                color:'잎-1'
                            },
                            {
                                color:'잎-2'
                            },
                            {
                                color:'잎-3'
                            },
                            {
                                color:'잎-4'
                            },
                            {
                                color:'잎-5'
                            },
                            {
                                color:'연-1'
                            },
                            {
                                color:'연-2'
                            },
                            {
                                color:'연-3'
                            },
                            {
                                color:'연-4'
                            },
                            {
                                color:'연-5'
                            }
                        ]
                    }),
                    tpl:new Ext.XTemplate(
                        '<tpl for=".">',
                            '<div style="display:inline-block;overflow:hidden;cursor:pointer;margin-right:5px">',
                                '<div class="behalf-unit" style="width:60px;height:40px;padding:5px;border:1px solid #cecece;">{color}</div>',
                            '</div>',
                        '</tpl>'
                    ),
                    listeners:{
                        select:function(dataview, record, index){
                            var className = Ext.getClass(target).superclass.$className;
                            if(className == 'Ext.Component'){//기본 자동배색 윈도우
                                target.setText(record.get('color'));
                                var chasu = cWin.down('#cbChasu').getValue();
                                //write color behalfs to store in case saving to server
                                var symbolCon = cWin.down('#behalfCon');
                                var cStore = cWin.getViewModel().getStore('ColorwayStore');
                                var symbols = cStore.getAt(0).get('behalf');
                                symbolCon.symbols[target.index] = record.get('color');
                                cStore.getAt(0).set('behalf', symbols);
                                cWin.down('#colorGrid').refresh();
                            }
                            else if(className == 'Ext.data.Model'){//추천칼라웨이 검색조건에서 디자인 기호 변경하려는 경우
                                target.set('name', record.get('color'));
                            }
                            else if(className == 'Ext.data.ProxyStore'){//추천칼라웨이 검색조건에서 디자인 기호를 추가하려는 경우
                                target.add({name:record.get('color'), check:false});
                            }
                            bhWin.close();
                        }
                    }
                }
            ]
        }).show();
    },

    /* 추천칼라웨이 윈도 왼쪽 그리드 */
    getRecommended: function(parameters, target) {
        // target : #recomColorwayCon in onBtnGetERPDataClick
        var url = this.getView().erpDomain + '/getDesignList';
        var me = this;
        var form = this.getView().down('form');
        var record = form.getRecord();
        var recommGrid, recommStore;
        if(!target.down('#recommandedGrid')){
            recommStore = Ext.create('Ext.data.Store', {
                storeId:'ChaStore',
                proxy: {
                    type: 'jsonp',
                    api: {
                        read: url
                    },
                    reader: {
                        type: 'json',
                    }
                },
                fields:[
                    {name:'거래처', mapping:'SITE'},
                    {name:'디자인', mapping:'DESIGN'},
                    {name:'배색수', mapping:'JSSU', type:'int'},
                    {name:'도수', mapping:'DOSU', type:'int'},
                    {anme:'차수', mapping:'CHASU', type:'int'}
                ],

            });

            recommGrid = Ext.create('Ext.grid.Panel', {
                store:recommStore,
                flex:1,
                scrollable:true,
                itemId:'recommandedGrid',
                bodyStyle:'background-color:white',
                columns: [
                    {
                        text:'거래처',
                        dataIndex:'SITE',
                        width:130
                    },
                    {
                        text:'디자인',
                        dataIndex:'DESIGN',
                        width:100
                    },
                    {
                        text:'배색수',
                        dataIndex:'JSSU',
                        width:60
                    },
                    {
                        text:'도수',
                        dataIndex:'DOSU',
                        width:48,
                    },
                    {
                        text:'차수',
                        dataIndex:'CHASU',
                        width:48
                    }
                ],
                listeners:{
                    itemclick:function(dataview, rec){
                        me.getColorwayByChasuFromERP(rec, target.up('panel').down('#recomColorwayCon'));
                    }
                }
            });

            target.add(recommGrid);
        }
        else{
            recommGrid = target.down('#recommandedGrid');
            recommStore = recommGrid.getStore();
        }

        recommStore.load({
            params:parameters
        });

    },

    /* ERP 색순서와 시스템 색순서 매칭 */
    checkSymbols: function() {
        var cWin = this.getView();
        var sColors = cWin.down('#colorGrid').getStore().getAt(0).get('color');
        var inputs = cWin.down('#colorGrid').el.select('.defalut-color').elements;
        var chasu = cWin.down('#cbChasu').getValue();
        var mapCheck = true;
        cWin.symbolOrder[chasu] = [];
        var defaultSymbols = cWin.down('#behalfCon').symbols;
        var systemSymbols = [];
        for(i=0; i<sColors.length; i++){
            //디자인기호의 적용여부 확인
            if(inputs[i].value.trim() === ''){
                mapCheck = false;
            }
            else{
                systemSymbols.push(inputs[i].value.trim());
            }

        }
        if(!mapCheck){//디자인 디폴트에 칼라순서 매칭 했는지 확인
            Ext.toast('먼저 디자인 디폴트에 색순서의 재배치가 필요합니다. 각각의 색에 맞는 디자인 기호를 입력해 주세요');
            cWin[chasu] = undefined;
        }
        else{
            for(i=0; i<sColors.length; i++){//시스템에 ERP의 디자인기호 순서를 매핑시키기 위해 바뀔 순서를 Array에 저장
                cWin.symbolOrder[chasu][i] = systemSymbols.indexOf(defaultSymbols[i]);
            }
        }
        return mapCheck;
    },

    insertColorway: function(colors, chasu) {
        if(!this.checkSymbols()) return;
        var cWin = this.getView();
        var allRecords = this.getAllRecords();
        var numOfColors = this.getStore().getAt(0).get('color').length;
        var newColors = [];
        if(chasu === undefined) chasu = cWin.down('#cbChasu').getValue();
        var i;

        var symbolOrder = cWin.symbolOrder[chasu]; //checkSymbols()에서 저장한것
        var reColors = [];

        //서버에 칼라가 없는경우 랜덤 Gray로 대체
        for(i=0; i<colors.length; i++){
            var obj = {};
            if(colors[i].color === undefined){ //색이 지정 안됐으면
                colors[i].color = chroma.scale(['#777777', '#eeeeee']).colors(colors.length)[i];
                obj.color = colors[i].color;
                obj.isExist = false;
            }
            else{
                obj.isExist = true;
            }
            obj.color = colors[i].color;
            obj.name = colors[i].name;
            obj.cno = colors[i].cno;
            newColors.push(obj);
            reColors.push(getController('Util').copyObject(obj));
        }
        ///////////////////////////////////////////////////////////////
        //색깔과 디자인기호와 순서를 맞추어 표시하여 디자인에 연결될 칼라 저장 //
        ///////////////////////////////////////////////////////////////
        for(i=0; i<newColors.length; i++){
            reColors[i] = colors[symbolOrder[i]];
        }
        var recObj = {
            group:this.getStore().getCount(),
            check:false,
            color:newColors,
            reorderColors:reColors,
            color_name:'New_' + chasu +'-'+ this.getStore().getCount(),
            user:userInfo.nv_name,
            chasu:chasu
        };
        this.getStore().add(recObj);
        if(this.getStore().filters) this.getStore().filters.clear();
        this.getStore().filterBy(function(record){
            if(record.get('chasu') === 0 || record.get('chasu') === chasu && record.get('color').length > 0){
                return record;
            }
        });
        cWin.down('#colorGrid').refresh();
        Ext.toast('추가 됐습니다.');
    },

    getAllRecords: function() {
        var allRecords = (this.getStore().getData().getSource() || this.getStore().getData()).getRange();
        return allRecords;
    },

    findSimilarColor: function(cId, hex) {
        if(Ext.getCmp('colorFinder')) {Ext.getCmp('colorFinder').show(); return;}
        var me = this;
        var rgbs;
        if(hex){
            if(hex.charAt(0) != '#') hex = '#' + hex;
            rgbs = chroma(hex).rgb();
        }

        var win = Ext.create('Ext.window.Window', {
            layout:{
                type:'vbox',
                align:'stretch'
            },
            title:'Color Finder',
            ghost:false,
            id:'colorFinder',
            alwaysOnTop:true,
            padding:40,
            items:[
                {
                    xtype:'container',//color preview container
                    itemId:'colorBox',
                    height:50,
                    style:'background-color:#000000;cursor:pointer',
                    listeners:{
                        afterrender:function(comp){
                            if(hex) {
                                //                         comp.setStyle({'background-color':hex});//if hex has value, set conlor in colorBox
                                comp.up('window').down('#searchBtn').setDisabled(false);//maker serach button enabled
                            }
                            comp.el.on('click', function(){
                                if(Ext.getCmp('colorPicker') !== undefined) return;
                                var picker = Ext.create('Ext.ux.colorpick.Selector', {
                                    value: hex,  // initial selected color,]
                                    listeners: {
                                        change: function (colorselector, color) {
                                            win.down('#color').setValue('#' + color);
                                        }
                                    }
                                });
                                //show color picker window
                                Ext.create('Ext.window.Window', {
                                    items:[picker],
                                    title:'Color picker',
                                    modal:true,
                                    id:'colorPicker',
                                    alwaysOnTop:true,
                                }).show();
                            });
                        }
                    }
                },
                {
                    xtype:'container',
                    layout:'hbox',
                    items:[
                        {
                            xtype:'textfield',//input for hex value
                            itemId:'color',
                            fieldLabel:'Hex',
                            height:63,
                            width:156,
                            labelAlign:'top',
                            listeners:{
                                change:function (field){
                                    var value = field.getValue().trim();
                                    if(value.charAt(0) != '#'){
                                        value = '#' + value;
                                    }
                                    var isHex = getController('Util').isHex(value);
                                    var rawVal = value.replace('#' , '');
                                    if(rawVal.length < 6){
                                        return;
                                    }
                                    //check if number of length is over than 6
                                    if(rawVal.length > 6) value = field.setValue(value.replace(value.charAt(value.length - 1), ''));
                                    if(!isHex && rawVal !== ''){//check if hex value is valid
                                        Ext.toast(loc.error.unknwonColor + ' "' + value + '"');
                                        field.focus();
                                        return;
                                    }

                                    var rgbs = chroma(value).rgb();
                                    var fr = field.up('window').down('#colorR');
                                    var fg = field.up('window').down('#colorG');
                                    var fb = field.up('window').down('#colorB');
                                    fr.setValue(rgbs[0]);
                                    fg.setValue(rgbs[1]);
                                    fb.setValue(rgbs[2]);
                                    field.up('window').down('#colorBox').setStyle('background-color', value);
                                    field.up('window').down('#searchBtn').setDisabled(false);
                                },
                                afterrender:function(field){
                                    if(hex) field.setValue(hex);
                                }
                            }
                        },
                        {
                            xtype:'numberfield',//range of searching tollerance
                            itemId:'range',
                            fieldLabel:'Range',
                            width:75,
                            maxValue:50,
                            minValue:0,
                            margin:'0 0 0 10',
                            labelAlign:'top',
                            value:25
                        }
                    ]
                },
                {
                    xtype:'container',
                    layout:'hbox',
                    items:[
                        {
                            xtype:'numberfield',//input Red
                            itemId:'colorR',
                            fieldLabel:'R',
                            width:80,
                            labelAlign:'top',
                            maxValue:255,
                            minValue:0,
                            listeners:{
                                blur:function(field){
                                    var rVal = field.getValue();
                                    var gVal = field.up('container').down('#colorG').getValue();
                                    var bVal = field.up('container').down('#colorB').getValue();
                                    if(rVal !== null && gVal !== null & bVal !== null ){
                                        var hex = chroma([rVal, gVal, bVal]);
                                        field.up('window').down('#color').setValue(hex);
                                        field.up('window').down('#colorBox').setStyle('background-color', hex);
                                        field.up('window').down('#searchBtn').setDisabled(false);
                                    }

                                }
                            }
                        },
                        {
                            xtype:'numberfield',//input Green
                            itemId:'colorG',
                            fieldLabel:'G',
                            width:80,
                            labelAlign:'top',
                            maxValue:255,
                            minValue:0,
                            listeners:{
                                blur:function(field){
                                    var gVal = field.getValue();
                                    var rVal = field.up('container').down('#colorR').getValue();
                                    var bVal = field.up('container').down('#colorB').getValue();
                                    if(rVal !== null && gVal !== null & bVal !== null ){
                                        var hex = chroma([rVal, gVal, bVal]);
                                        field.up('window').down('#color').setValue(hex);
                                        field.up('window').down('#colorBox').setStyle('background-color', hex);
                                        field.up('window').down('#searchBtn').setDisabled(false);
                                    }

                                },
                                render:function(field){

                                }
                            }
                        },
                        {
                            xtype:'numberfield',//input Blue
                            itemId:'colorB',
                            fieldLabel:'B',
                            width:80,
                            labelAlign:'top',
                            maxValue:255,
                            minValue:0,
                            listeners:{
                                blur:function(field){
                                    var bVal = field.getValue();
                                    var gVal = field.up('container').down('#colorG').getValue();
                                    var rVal = field.up('container').down('#colorR').getValue();
                                    if(rVal !== null && gVal !== null & bVal !== null ){
                                        var hex = chroma([rVal, gVal, bVal]);
                                        field.up('window').down('#color').setValue(hex);
                                        field.up('window').down('#colorBox').setStyle('background-color', hex);
                                        field.up('window').down('#searchBtn').setDisabled(false);
                                    }

                                }
                            }
                        }
                    ]

                },
                /////////////
                // 검색버튼 //
                /////////////
                {
                    xtype:'container',
                    layout:{
                        type:'hbox',
                        pack:'center'
                    },
                    padding:'25, 0 0 0',
                    items:[
                        {
                            xtype:'button',//Search button
                            text:loc.search.search,
                            width:115,
                            disabled:true,
                            itemId:'searchBtn',
                            listeners:{
                                click:function(btn){
                                    var cId = Ext.getCmp('colorChipWin').categoryId;
                                    var cVal = btn.up('window').down('#color').getValue();
                                    var cArr = chroma(cVal.trim()).rgb();
                                    var ranVal = btn.up('window').down('#range').getValue();
                                    var query = 'rgb_r='+cArr[0]+'&rgb_r_method=intbet:' + ranVal;
                                    query += '&rgb_g='+cArr[1]+'&rgb_g_method=intbet:' + ranVal;
                                    query += '&rgb_b='+cArr[2]+'&rgb_b_method=intbet:' + ranVal;
                                    query += '&ca_id=' + cId;
                                    //Base on params define if keep the paramesters
                                    var me = this;
                                    var dataUrl = getDataListByIdApi(query);
                                    var store = Ext.getCmp('colorChipWin').getGrid().getStore();
                                    store.getProxy().setUrl(dataUrl);
                                    store.getProxy().extraParams = {};
                                    store.load();
                                }
                            }
                        },
                        {
                            xtype:'tbspacer',
                            width:10
                        },
                        {
                            xtype:'button',//close button
                            text:loc.menu.close,
                            width:115,
                            handler:function(button){
                                win.close();
                            }
                        }
                    ]
                }
            ]

        }).show();
    },

    onBtnFitClick: function(button, e, eOpts) {
        this.setImage('fit');
    },

    onBtnActualClick: function(button, e, eOpts) {
        this.setImage('actual');
    },

    onBtnPlusClick: function(button, e, eOpts) {
        this.setImage('plus');
    },

    onBtnMinusClick: function(button, e, eOpts) {
        this.setImage('minus');
    },

    onFormAfterRender: function(component, eOpts) {
        var record=component.getRecord();

        if(record.get('bd_file').length === 0) {
            cWin.close();
            return;
        }
        var cWin = component.up('window');
        var me = this;
        var file_path="";
        cWin.currentDesign = record.get('bd_subject');

        //최초 캔버스 크기 지정
        component.canvas.width = record.get('file_width');
        component.canvas.height = record.get('file_height');
        component.canvas.scale = 1;

        /////////////////////////////////////////
        // Actor에 저장된 해당 디자인 칼라웨이 로드 //
        /////////////////////////////////////////
        var scSto = cWin.getViewModel().getStore('SavedColorway');
        var cfgStore = Ext.getStore('ConfigStore');
        var query = 'ca_id=' + cfgStore.getAt(0).get('colorwayCategory') + '&se_refer=' + record.get('bd_idx') + '&page_size=' + 10000;
        cWin.firstIdxs = []; // ERP로 부터 업데이트 된경우 초기화를 위해 칼라웨이 카테고리의 해당 디자인의 칼라웨이를 모두 삭제 준비
        scSto.getProxy().setUrl(getDataListByIdApi(query));
        scSto.load({
            callback:function(records, operation){
                if(scSto.getCount() > 0){
                    var colorways = [];
                    scSto.each(function(record, index){
                        //디자인디폴트 자료를 제외한 모든 칼라웨이 자료를 담아서 삭제 대비
                        //이 경우 업데이트하고 저장할 경우 기존 자료를 수정 처리하므로 남아 있게 된다.
                        //                 if(record.get('group') !== 0) cWin.firstIdxs.push(record.get('bd_idx'));
                        cWin.firstIdxs.push(record.get('bd_idx'));
                        var obj = {};
                        obj.color = record.data.color;
                        obj.color_name = record.data.color_name;
                        obj.user = record.data.user;
                        obj.chasu = record.data.chasu;
                        obj.group = record.data.group;
                        obj.behalf = record.data.behalf;
                        obj.check = record.data.check;
                        obj.bd_idx = record.data.bd_idx; //스토어 수정이나 삭제를 위해서 저장
                        colorways.push(obj);
                        if(record.get('group') === 0){
                            component.originalColor=JSON.parse(JSON.stringify(obj));
                        }
                        cWin.fireEvent('orginalColorloaded');
                    });
                    cWin.sourceOrigin = 'actor';
                    cWin.getController().initialize(colorways);
                }
                else{//서버에 저장된 칼라웨이 정보가 없으면 디자인 기본칼라를 불러 새로운 칼라웨이 시작
                    component.getDefaultColorList(record);
                }
                file_path=record.get('bd_file')[0].file_path;
                me.setImage('actual');
            }
        });

        // me.setImage('fit');
        cWin.setTitle(cWin.getTitle() + '[' + record.get('bd_subject') + ']');

        component.canvas.onclick = function(e, eOpt){
            var colorRec = component.selectedColorRecord;
            if(colorRec === undefined || colorRec.get('group') === 0){
                Ext.toast(loc.colorway.noDefaultChange);
                return;
            }
            var canvas = component.canvas;
            var ctx = canvas.getContext('2d');
            var p = ctx.getImageData(e.x, e.y, 1, 1).data;
            var color = chroma([p[0], p[1], p[2]]).hex();
            console.log(color);
            for(var i=0; i<colorRec.get('color').length; i++){
                if(colorRec.get('color')[i].color == color){
                    colorRec.get('color')[i].color = '#ffcc00';
                }
            }
            component.up('window').down('#colorGrid').refresh();
            return;

            var cWin = Ext.create(appName + '.view.ActorWindow',{
                id:'colorChipWin',
                listeners:{
                    render:function(win){
                        win.disableEvent();
                    },
                    pagingtoolbarcomplete:function(toolbar){
                        var rangeFinder = {
                            xtype: 'button',
                            height:35,
                            width:23,
                            itemId:'btnFindByColorRange',
                            glyph: 'xf00e@FontAwesome',

                            listeners:{
                                render:function(button){
                                    button.el.select('.x-btn-icon-el').elements[0].style.color = '#FFC017';
                                    button.setTooltip(loc.search.findSimilar);
                                }
                            },
                            handler:function(button){
                                me.findSimilarColor(91, color);
                            }
                        };
                        toolbar.insert(toolbar.items.items.length - 2, rangeFinder);
                    }
                }
            }).show();

            var tree = cWin.down('#tree');
            tree.on('itemclick', function(cateTree, rec){
                if(rec && rec.data){
                    var opt = getOption(rec.data.data.ca_option);
                    if(opt.colorChip){
                        cWin.getGrid().categoryId = rec.get("id");
                        cWin.getGrid().numOfItem = 100;
                        getController('Main').getServerData(rec.get("id"), 'ca_id=' + rec.get("id"), cWin.getGrid());
                    }
                    else{
                        Ext.toast(loc.error.noColorchipCategory);
                    }
                }
            });
            var treeStore = tree.getStore();
            treeStore.on('load', function(tStore){
                var ccCate = 91;
                cWin.categoryId = ccCate;
                var node = treeStore.getNodeById(ccCate);
                tree.getSelectionModel().select(node);
                //show category that configured at actor.json at the first time
                tree.fireEvent('itemclick', tree, node, tree.el, '', event);
            });
            //when click one of color code list
            cWin.getGrid().on('itemclick', function(inDataview, inRecord){
                var hex = inRecord.get('idcolorHex');
                var name=inRecord.get('bd_subject');
                if(hex.indexOf('#') == -1) hex = '#'+ hex;
                tempColor.color=hex;
                tempColor.name=name;
                color[idx]=tempColor;
                record.set("color",color);
                dataview.refresh();
                cWin.close();
                if(record.get('check')) {
                    form.setChangeColor(tempColor2, hex, form.cloneCanvas(form.originalCanvas), canvas);
                }
            });

        };
    },

    onFormBeforeRender: function(component, eOpts) {
        var canvas_box=new Ext.create({
            xtype:'box',
            itemId:'myCanvas',
            autoEl:{
                tag:'canvas'
            },
            listeners: {
                render:function(componet) {
                    var canvas=componet.el.dom;
                    componet.up("form").canvas=canvas;

                }
            }
        });

        component.add(canvas_box);
    },

    onCbChasuSelect: function(combo, record, eOpts) {
        var me = this;
        var chasu = combo.getValue();
        var behalfCon = combo.up('#eastCon').down('#behalfCon');
        // initialize filters
        if(this.getStore().filters) this.getStore().filters.clear();
        //전체 store에서 차수에 맞게 sort
        this.getStore().filterBy(function(rec){
            var rc = rec.get('chasu');
            if(rc == chasu && rec.get('color').length > 0){
                if(rc == chasu){
                    //give title of labels in #behalfCon
                    behalfCon.setBehalfs(rec, me.getStore());
                }
                return rec;
            }
        });

        //선택된 칼라웨이를 디자인에 적용
        var cWin = combo.up('window');
        var allRecords = me.getAllRecords();
        var selRec;
        for(var i=0; i<allRecords.length; i++){
            if(allRecords[i].get('check') && allRecords[i].get('chasu') == chasu){
                selRec = allRecords[i];
            }
        }
        if(!selRec) return;
        var applyColor = function(){
            cWin.down('#designForm').selectedColorRecord = selRec;
            if(!me.checkSymbols()) return;
            var chasu = Ext.getCmp('color_window').down('#cbChasu').getValue();
            var symbolOrder = Ext.getCmp('color_window').symbolOrder[chasu]; //checkSymbols()에서 저장한것
            var newColors = [];
            for(var i=0; i<selRec.get('color').length; i++){
                newColors[i] = selRec.get('color')[symbolOrder[i]];
            }
            var sourceColor = (selRec.get('group') === 0)? selRec.get('color') : newColors;
            //     Ext.getCmp('color_window').mask('칼라웨이를 적용하고 있습니다.');
            //     setTimeout(form.setAllChangeColor, 500, form.originalColor.color, sourceColor);


            var appliedGroup = selRec.get('group');
            if(appliedGroup === 0 && cWin.down('#designForm').appliedGroup === 0){//이미 적용된 칼라를 다시 적용하려하면 생햑
                cWin.down('#designForm').unmask();
                return;
            };
            cWin.down('#designForm').appliedGroup = selRec.get('group');
            if(cWin.down('#designForm').originalColor === undefined){//서버에서 추출칼라 정보가 덜 불러와졌을때 대비
                cWin.on('orginalColorloaded', function(){
                    cWin.down('#designForm').setAllChangeColor(cWin.down('#designForm').originalColor.color, sourceColor);
                });
            }
            else{
                cWin.down('#designForm').setAllChangeColor(cWin.down('#designForm').originalColor.color, sourceColor);
            }
        };
        if(cWin.down('#designForm').originalCanvas === undefined){
            cWin.down('#designForm').on('imageready', function(){//이미지가 완전 로드된 후
                setTimeout(applyColor, 500);
            });
        }
        else{
            cWin.down('#designForm').mask('초기화 중입니다.');
            setTimeout(applyColor, 500);
        }
    },

    onBtnChasuInfoClick: function(button, e, eOpts) {
        var me = this;
        var designNo = button.up('window').down('form').getRecord().get('bd_subject');
        var chasuGrid = this.getChasuListFromERP(designNo);
        chasuGrid.on('itemclick', function(dataview, record){
            me.getColorwayByChasuFromERP(record);
        });
    },

    onBtnChasuInfoAfterRender: function(component, eOpts) {
        component.setTooltip(loc.colorway.getChasulistFromERP);

    },

    onButtonAfterRender: function(component, eOpts) {
        component.setTooltip(loc.colorway.addChasu);
    },

    onBtnAddChasuClick: function(button, e, eOpts) {
        var combo = button.up('container').down('#cbChasu');
        var store = combo.getStore();
        combo.onTriggerClick();//to make effect click on combo so chasu can list loaded
        combo.getStore().add({chasu:store.getCount() + 1});

        var cwStore = button.up('window').getController().getStore();
        var allRecords = this.getAllRecords();
        var defaultRec;
        for(var i=0; i<allRecords.length; i++){
            if(allRecords[i].get('group') === 0 && allRecords[i].get('chasu') == 1){
                defaultRec = allRecords[i];
            }
        }
        var newRec = Ext.data.Record.create({});
        var defaultObj = {} ;
        Ext.Object.each(Ext.clone(defaultRec.data), function(key, item){
            newRec.set(key, item);
        });
        newRec.set('chasu', store.getCount());
        newRec.set('id', 'default_' + store.getCount());
        newRec.set('check', true);
        cwStore.add(newRec.data);
        this.getView().down('#colorGrid').refresh();

    },

    onBtnUpdateChasuRender: function(component, eOpts) {
        component.setTooltip(loc.colorway.updateChasu);
    },

    onBtnUpdateChasuClick: function(button, e, eOpts) {
        var me = this;
        var toConf = Ext.Msg.confirm('ERP DATA 업데이트', "업데이트하면 현재 디자인의 칼라웨이가 모두 지워집니다. 괜찮으시겠습니까?", function(toggle, value){
            if(toggle == 'yes'){
                var cWin = button.up('window');
                var url = cWin.erpDomain + '/getColorList';
                var i;
                ///////////////////////////////////////////
                // 칼라순서 1 이상 조색 2 이상 모두 긁어 옴   //
                // jssu=1은 뭔지 모르고 jssu=2는 차수별 조색 //
                // Array로 디자인기호가 포함되어 출력        //
                // jssu=9 이상증감함에 따라 배색 순번 별 칼라 //
                // 웨이								    //
                ///////////////////////////////////////////

                var sSyms = cWin.down('#behalfCon').symbols; //ERP에 저장된 디자인기호들
                var mSyms = []; //재배치 된 디자인 기호들
                var sColors = cWin.down('#colorGrid').getStore().getAt(0).get('color');
                var inputs = cWin.down('#colorGrid').el.select('.defalut-color').elements;

                if(!me.checkSymbols()){//디자인 디폴트에 칼라순서 매칭 했는지 확인
                    return;
                }

                var params = {
                    cno:1,
                    jssu:2,
                    design:cWin.currentDesign
                };
                Ext.data.JsonP.request({
                    url:url,
                    params:params,
                    success:function(res){
                        var colorways=[], j;
                        var jssus = [];
                        var chasus = [];
                        var colorInfo = [];
                        cWin.updated = true; // 저장할때 업데이트 여부 확인하여 기존 칼라웨이 삭제를 위해
                        for(i=0; i<res.length; i++){
                            var index = res[i].CHASU - 1;
                            if(res[i].JSSU == 2){
                                if(jssus[index] === undefined) jssus[index] = [];
                                jssus[index].push(res[i]); // 배색 Array
                                if(chasus.indexOf(res[i].CHASU) == -1){
                                    chasus.push(res[i].CHASU);//차수 Array
                                }
                            }
                            else{
                                var color = (res[i].DCOLOR !== '' && res[i].DCOLOR !== 'null')? res[i].DCOLOR : res[i].COLOR;
                                colorInfo.push(res[i]);
                            }
                        }
                        for(i=0; i<chasus.length; i++){
                            chasus[i] = {chasu:chasus[i]};
                        }
                        var combo = button.up('#chasuFieldSet').down('#cbChasu');
                        var comboStore = combo.getStore();
                        combo.onTriggerClick();
                        comboStore.setData(chasus);
                        comboStore.sort('chasu', 'ASC');
                        combo.collapse();
                        Ext.Array.each(colorInfo, function(entry, z){
                            var chasu = entry.CHASU;
                            var cwNo = entry.CNO - 1;
                            var jssu = entry.JSSU - 9;

                            var c = (entry.DCOLOR === null)? entry.COLOR : entry.DCOLOR;

                            /*-----------------------------------------------------------------------*/
                            var c2=c;
                            var isExist=false;

                            if(colorways[chasu] === undefined) {
                                colorways[chasu]=[];
                            }
                            if(colorways[chasu][jssu] === undefined) {
                                colorways[chasu][jssu] = {color:[]};

                            }

                            for (var i = 0; i < colorways[chasu][jssu].color.length; i++) {

                                if ((colorways[chasu][jssu].color[i].cno === cwNo) && (colorways[chasu][jssu].color[i].name == c2)){
                                    isExist=true;
                                }
                            }


                            if(c2 == '.') {
                                c2 = colorways[chasu][jssu - 1].color[cwNo-1].name;
                            }
                            colorways[chasu][jssu].chasu = chasu;
                            colorways[chasu][jssu].group = jssu + 1;
                            colorways[chasu][jssu].check = false;
                            colorways[chasu][jssu].bd_idx = '';
                            colorways[chasu][jssu].behalf = [];
                            colorways[chasu][jssu].color_name = 'Colorway ' + chasu + '-' + (jssu + 1);
                            if(isExist === false) {
                                colorways[chasu][jssu].color.push({color:chroma.random().hex(), name:c, cno:cwNo, chasu:entry.CHASU, cchk3:entry.CCHK3});
                            }

                        });
                        var colorways3 = [];
                        for(i=0; i<colorways.length; i++) {
                            if(colorways[i]!==undefined) {
                                for(var jj=0; jj<colorways[i].length; jj++) {//도수만큼 돌려서 Array 합침
                                    colorways3.push(colorways[i][jj]);
                                }
                            }

                        }
                        //////////////////////////////////////////////
                        // 차수별 첫번째 Array에 기본 축출칼라 UNIT 추가 //
                        //////////////////////////////////////////////
                        var cwStore = button.up('window').getController().getStore();
                        var allRecords = me.getAllRecords();
                        var fstObjs = [];
                        for(i=0; i<allRecords.length; i++){
                            if(allRecords[i].get('group') === 0){
                                var obj = Ext.clone(allRecords[i].data);
                                if(obj.chasu === 1) { //차수1 그룹0 데이터를 기준으로 삼기위해 항상 Array[0]에 위치
                                    fstObjs.unshift(obj);
                                }
                                else{
                                    fstObjs.push(obj);
                                }
                            }
                        }
                        for(i=0; i<chasus.length; i++){
                            if(fstObjs[i] === undefined) fstObjs[i] = Ext.clone(fstObjs[0]);// 새로 추가된 차수에 대해서 첫번째 디자인기호 복사
                            fstObjs[i].group = 0;
                            fstObjs[i].chasu = i + 1;
                            fstObjs[i].id = 'defalut_' + (i + 1);
                            colorways3.unshift(fstObjs[i]);
                        }
                        cwStore.setData(colorways3);
                        cWin.down('#colorGrid').refresh();
                    }
                });
            }
            else{
                return false;
            }
        });
        toConf.alwaysOnTop = true;
    },

    onBtnNewColorwayClick: function(button, e, eOpts) {
        if(!this.checkSymbols()) return;
        var len = this.getStore().getAt(0).get('color').length;
        var arr = [];
        for(var i=0; i<len; i++){
            arr.push({name:undefined, color:undefined});
        }
        this.insertColorway(arr);

    },

    onBtnNewColorwayRender: function(component, eOpts) {
        component.setTooltip(loc.menu.newColorway);
    },

    onBtnCopyColorwayRender: function(component, eOpts) {
        component.setTooltip(loc.menu.fromAnotherDesign);
    },

    onBtnCopyColorwayClick: function(button, e, eOpts) {
        var me = this;
        var store = this.getStore();
        var cSto = button.up('#eastCon').down('#cbChasu').getStore();
        var chasu = button.up('#eastCon').down('#cbChasu').getValue();

        var win = Ext.create('Ext.window.Window', {
            layout:{
                type:'vbox',
                align:'stretch'
            },
            width:700,
            padding:15,
            y:150,
            maxHeight:windowMaxHeight,
            title:'다른 차수에서 복사',
            items:[
            {
                xtype:'container',
                items:[
                {
                    xtype:'radiogroup',
                    itemId:'rg',
                    listeners:{
                        render:function(rg){
                            for(var i=0; i<cSto.getCount(); i++){
                                var unit = {
                                    boxLabel: (i+1).toString()+'차',
                                    name: 'rb',
                                    inputValue: i+1,
                                    padding:'0 10 0 0'
                                };
                                if(chasu == i + 1){
                                    unit.disabled = true;
                                }
                                rg.add(unit);
                            }
                        },
                        change:function(rg, value, oldValue){
                            var cData = [];
                            Ext.Array.each(me.getAllRecords(), function(record){
                                if(record.get('group') !== 0){
                                    if(record.get('chasu') == value.rb){
                                        cData.push(getController('Util').copyObject(record.data));
                                    }
                                }
                            });
                            rg.up('window').down('gridpanel').getStore().setData(cData);
                        }
                    }
                },
                ]
            },
            {
                xtype:'gridpanel',
                scrollalbe:true,
                columns: [
                { text: loc.main.name, dataIndex: 'color_name' },
                { text: loc.colorway.colorway, dataIndex: 'color', flex: 1 , renderer:function(v){
                    var unit = '<div style="width:100%">';
                    for(var i=0; i<v.length; i++){
                        var css = 'display:inline-block;width:30px;height:30px;background-color:'+v[i].color;
                        unit += '<div style="'+css+'"></div>';
                    }
                    unit += '</div>';
                    return unit;
                }}
                ],
                store:Ext.create('Ext.data.Store',{
                    fields:['name', 'color']
                }),
                selModel: {
                    selType: 'checkboxmodel'
                }
            },
            ],
            dockedItems:[
            {
                xtype:'container',
                items:[
                {
                    xtype:'button',
                    text:loc.main.add,
                    handler:function(button){
                        var grid = button.up('window').down('gridpanel');
                        var selected = grid.getSelectionModel().getSelection();
                        if(selected.length === 0){
                            Ext.toast(loc.main.noneSelected);
                        }
                        else{
                            for(var i=0; i<selected.length; i++){
                                var rec = selected[i].clone();
                                rec.set('chasu', chasu);
                                rec.set('color_name',  selected[i].get('color_name')+'_clone');
                                store.add(rec);
                            }
                        }

                    }
                }
                ]
            }
            ]
        }).show();
    },

    onBtnCopyColorwayRender1: function(component, eOpts) {
        component.setTooltip(loc.menu.fromAnotherDesign);
    },

    onBtnGetERPDataRender: function(component, eOpts) {
        component.setTooltip(loc.menu.getERPData);
    },

    onBtnGetERPDataClick: function(button, e, eOpts) {
        var me = this, i;
        if(!this.checkSymbols()){
            return;
        }
        var symbols = me.getView().down('#behalfCon').symbols;
        var sbStoData = [];
        var westSize = 417;

        var formRec = Ext.getCmp('color_window').down('#designForm').getRecord();
        var fStore = Ext.getStore('fStore_' + formRec.get('ca_id'));
        var dsnTypes = fStore.findRecord('cols_code', 'designType').get('cols_data');
        var findFrom =  '<div style="float:right;display:inline-block;width:220px">';
        findFrom    +=  '		<i class="fa fa-square" aria-hidden="true" style="color:limegreen"></i>';
        findFrom    +=  '		흡수칼라&nbsp;&nbsp;';
        findFrom    +=  '		<i class="fa fa-square" aria-hidden="true" style="color:deepskyblue"></i>';
        findFrom    +=  '		대표칼라&nbsp;&nbsp;';
        findFrom    +=  '		<i class="fa fa-square" aria-hidden="true" style="color:orangered"></i>';
        findFrom    +=  '		칼라없음';
        findFrom    +=  '</div>';

        if(dsnTypes.indexOf(loc.upload.select) == -1)dsnTypes.unshift(loc.upload.select);
        for(i=0; i<symbols.length; i++){
            sbStoData[i] = {name:symbols[i]};
        }
        Ext.create('Ext.window.Window', {
            width:1100,
            maxWidth:windowMaxWidth,
            alwaysOnTop:true,
            ghost:false,
            layout:{
                type:'vbox',
                align:'stretch'
            },
            padding:15,
            height:800,
            maxHeight:windowMaxHeight,
            title:'추천 배색 검색',
            tools:[
            {
                glyph:'xf066@FontAwesome',
                callback:function(window, icon){
                    if(icon.getGlyph().glyphConfig == 'xf066@FontAwesome'){
                        if(!Ext.getCmp('color_window').maximized)
                        Ext.getCmp('color_window').setX((windowMaxWidth - 1457)/2);//두창을 나란히 중앙에 표시
                        window.setWidth(705);
                        window.setX(Ext.getCmp('color_window').getX() + 700);
                        icon.setGlyph('xf065@FontAwesome');
                    }
                    else{
                        window.setWidth(1100);
                        window.center();
                        icon.setGlyph('xf066@FontAwesome');
                    }
                }
            }
            ],
            items:[
            {
                xtype:'container',
                layout:'hbox',
                items:[
                {
                    xtype:'label',
                    text:'검색 조건',
                    cls:'form-title-label',
                    width:westSize,
                },
                {
                    xtype:'label',
                    text:'디자인 기호',
                    cls:'form-title-label'
                }
                ]
            },
            {
                xtype:'container',
                layout:'hbox',
                height:140,
                style:'border-bottom:1px solid #eeeeee',
                items:[
                {
                    xtype:'container',
                    layout:'vbox',
                    width:westSize,
                    padding:'15 0 15 0',
                    items:[
                    {
                        xtype:'container',
                        width:'100%',
                        layout:'hbox',
                        items:[
                        {
                            xtype:'datefield',
                            width:180,
                            labelWidth:60,
                            format:'Y-m-d',
                            itemId:'startDate',
                            fieldLabel:'시작날짜',
                            submitFormat:'Y-m-d'
                        },
                        {
                            xtype:'tbspacer',
                            width:15
                        },
                        {
                            xtype:'datefield',
                            width:180,
                            format:'Y-m-d',
                            itemId:'endDate',
                            labelWidth:60,
                            fieldLabel:'끝 날짜',
                            submitFormat:'Y-m-d',
                            listeners:{
                                afterrender:function(field){
                                    field.setValue(new Date());
                                }
                            }
                        },
                        {
                            xtype:'tbspacer',
                            width:15
                        }
                        ]
                    },
                    {
                        xtype:'tbspacer',
                        height:5
                    },
                    {
                        xtype:'container',
                        layout:'hbox',
                        items:[
                        {
                            xtype:'numberfield',
                            width:132,
                            fieldLabel:'도수',
                            labelWidth:60,
                            itemId:'fdDosu',
                            listeners:{
                                afterrender:function(field){
                                    field.setValue(formRec.get('idnumberOfColors'));
                                }
                            }
                        },
                        {
                            xtype:'tbspacer',
                            width:15
                        },
                        {
                            xtype:'combo',
                            fieldLabel:'디자인종류',
                            labelWidth:80,
                            itemId:'fdDesignType',
                            store:dsnTypes,
                            listeners:{
                                afterrender:function(combo){
                                    var dt = formRec.get('iddesignType');
                                    if(dt === undefined || dt === '') dt = loc.upload.select;
                                    combo.setValue(dt);
                                }
                            }
                        }
                        ]
                    },
                    {
                        xtype:'tbspacer',
                        height:5
                    },
                    {
                        xtype:'container',
                        layout:'hbox',
                        items:[
                        {
                            xtype:'textfield',
                            width:152,
                            fieldLabel:'거래처',
                            labelWidth:60,
                            itemId:'fdCustomer'
                        },
                        {
                            xtype:'tbspacer',
                            width:15
                        },
                        {
                            xtype:'textfield',
                            fieldLabel:'원단',
                            labelWidth:60,
                            itemId:'fdFabric'
                        }
                        ]
                    }
                    ]
                },
                {
                    xtype:'container',
                    layout:'column',
                    padding:'20 0 0 0',
                    scrollable:true,
                    flex:1,
                    items:[
                    {
                        //////////////
                        // 디자인기호 //
                        //////////////
                        xtype:'dataview',
                        layout:'column',
                        width:'100%',
                        height:139,
                        itemId:'symbolCon',
                        itemSelector:'.symbol_unit',
                        store:Ext.create('Ext.data.Store', {
                            fields:['name', 'check'],
                            data:sbStoData
                        }),
                        listeners:{
                            itemclick:function( dataview, record, item, index, e, eOpts){
                                if(e.target.localName == 'div'){
                                    me.getColorSymbolList(record);
                                }
                                if(e.target.localName == 'input'){
                                    record.set('check', true);
                                }
                            }
                        },
                        tpl:new Ext.XTemplate(
                        '<tpl for=".">',
                        '<div class="symbol_unit" style="display:inline-block;width:40px;height:30px;border:1px solid #cecece;margin-right:3px;padding:3px;text-align:center;cursor:pointer;">',
                        '<div style="margin-top:-22px;color:#678fcd">{[xindex]}</div>',
                        '<div style="margin-top:8px">{name}</div>',
                        '<input name="symbol" type="radio" style="margin-top:8px">',
                        '</div>',
                        '</tpl>'
                        )
                    }

                    ]
                },
                {
                    xtype:'container',
                    layout:{
                        type:'vbox',
                        align:'right'
                    },
                    height:'100%',
                    items:[
                    {
                        xtype:'tbspacer',
                        flex:1
                    },
                    {
                        xtype:'container',
                        layout:'hbox',
                        items:[
                        ////////////////////////
                        // 디자인 기호 추가 버튼 //
                        ////////////////////////
                        {
                            xtype:'button',
                            iconCls:'fa fa-plus',
                            width:30,
                            ui:'plain-toolbar-small',
                            height:30,
                            listeners:{
                                click:function(button){
                                    me.getColorSymbolList(button.up('window').down('#symbolCon').getStore());
                                }
                            }
                        },
                        ////////////////////////
                        // 디자인 기호 삭제 버튼 //
                        ////////////////////////
                        {
                            xtype:'tbspacer',
                            width:5
                        },
                        {
                            xtype:'button',
                            iconCls:'fa fa-minus',
                            width:30,
                            ui:'plain-toolbar-small',
                            height:30,
                            listeners:{
                                click:function(button){
                                    var sto = button.up('winndow').down('#symbolCon').getStore();
                                    var count = 0;
                                    sto.each(function(record, index){
                                        if(record.get('check')) {
                                            sto.remove(record);
                                            count ++;
                                        }
                                    });
                                    if(count === 0) Ext.toast('선택된 디자인기호가 없는데요?');
                                }
                            }
                        }
                        ]
                    },
                    ////////////
                    // 검색버튼 //
                    ////////////
                    {
                        xtype:'button',
                        text:loc.search.search,
                        width:100,
                        height:50,
                        itemId:'btnSearch',
                        listeners:{
                            click:function(button){
                                var rWin = button.up('window');
                                var count = 0;
                                var dt = button.up('window').down('#fdDesignType').getValue();
                                if(dt == loc.upload.select) dt = '';
                                var params = {
                                    //&site =
                                    //&fabirc =
                                    //&dkind =

                                    sdate:button.up('window').down('#startDate').getSubmitValue() || '0000-00-00',
                                    edate:button.up('window').down('#endDate').getSubmitValue(),
                                    dosu:button.up('window').down('#fdDosu').getValue(),
                                    fabric:button.up('window').down('#fdFabric').getValue(),
                                    dkind:dt,
                                    site:button.up('window').down('#fdCustomer').getValue()
                                };
                                var sto = button.up('window').down('#symbolCon').getStore();
                                sto.each(function(rec){
                                    count ++;
                                    params['nm'+count] = rec.get('name');
                                });
                                //현재 윈도우에 추천 목록 추가
                                me.getRecommended(params, button.up('window').down('#recomGroupCon'));
                            }
                        }
                    },
                    {
                        xtype:'tbspacer',
                        height:10
                    },
                    //////////////
                    // 전체색표시 //
                    //////////////
                    {
                        xtype:'button',
                        icon:'resources/images/ico_colorwheel.png',
                        ui:'plain-toolbar-small',
                        toolTip:'전체 색 표시',
                        handler:function(button){
                            var recommGrid = button.up('window').down('#recommColorGrid');
                            if(recommGrid){
                                /////////////////////////////////////////////////////////
                                // Automatically fill color by hex to colorways in ERP //
                                /////////////////////////////////////////////////////////
                                var count = 0;
                                var store = recommGrid.getStore(); //store for colorways in ERP
                                var getColorways = function(rec, colors){
                                    recommGrid.up('window').mask('추천배색을 불러오고 있는 중입니다.');
                                    Ext.getCmp('color_window').getController().getHexByCode(rec, colors, recommGrid);
                                };
                                Ext.getCmp('color_window').on('colorwayloadcomplete', function (win){
                                    if(count < store.getCount() ){
                                        getColorways(store.getAt(count), store.getAt(count).get('color'));
                                        count ++;
                                    }
                                    else{
                                        if(recommGrid.up('window')) recommGrid.up('window').unmask();
                                    }
                                });
                                getColorways(store.getAt(count), store.getAt(count).get('color'));
                            }
                        }
                    }
                    ]
                }
                ]
            },
            /////////////////////////////
            // 추천 칼라웨이 그룹 컨테이너 //
            /////////////////////////////
            {
                xtype:'panel',
                flex:1,
                layout:{
                    type:'hbox',
                    align:'stretch'
                },
                style:'border:1px solid #cecece',
                bodyStyle:'background-color:white;',
                items:[
                {
                    xtype:'container',
                    itemId:'recomGroupCon',
                    layout:{
                        type:'hbox',
                        align:'stretch'
                    },
                    style:'border-right:1px solid #cecece',
                    width:westSize,
                    listeners:{
                        afterrender:function(container){
                            container.up('window').down('#btnSearch').fireEvent('click', container.up('window').down('#btnSearch'));

                        }
                    }
                },
                {
                    xtype:'container',
                    itemId:'recomColorwayCon',
                    layout:{
                        type:'hbox',
                    },
                    scrollable:true,
                    flex:1
                }
                ]
            },
            {
                xtype:'tbspacer',
                height:5
            },
            {
                xtype:'component',
                width:'100%',
                html:findFrom

            }
            ]
        }).show();
    },

    onBtnRemoveRender: function(component, eOpts) {
        component.setTooltip('마지막차 배색 모두 제거');
    },

    onBtnRemoveClick: function(button, e, eOpts) {

        var store = button.up('window').down('#colorGrid').getStore();
        var cSto = button.up('#eastCon').down('#cbChasu').getStore();
        var chasu = button.up('#eastCon').down('#cbChasu').getValue();
        if(chasu != cSto.getCount()) {
            Ext.toast(chasu + '차 배색입니다. 마지막 차수 외에는 삭제할 수 없습니다.');
            return;
        }
        if(chasu == 1){
            Ext.toast('첫번째차 배색은 삭제 할 수 없습니다.');
            return;
        }
        store.each(function(record){
            if(record.get('chasu') == chasu){
                store.remove(record);
            }
        });
        cSto.each(function(record){
            if(record.get('chasu') == chasu){
                cSto.remove(record);
                button.up('#eastCon').down('#cbChasu').setValue(chasu - 1);
                button.up('#eastCon').down('#cbChasu').fireEvent('select', button.up('#eastCon').down('#cbChasu'), cSto.getAt(chasu-1));
            }
        });

        // var desWin = Ext.create('Ext.window.Window', {
        //     width:700,
        //     height:700,
        //     items:[
        //         {
        //             xtype:'draw',
        //             sprites: [
        //                 {
        //                     type:'image',
        //                     src:'http://hanyoung.dipol.co.kr:8080/thumb/28105/0',
        //                     id:'canvasda'
        //                 },
        //                 {
        //                     type:'image',
        //                     src:'http://hanyoung.dipol.co.kr:8080/thumb/28105/0',
        //                     x:200
        //                 }
        //             ],
        //             height:700,
        //             width:700
        //         }
        //     ]
        // }).show();
    },

    onBtnRestore: function(button, e, eOpts) {
        var form=button.up('window').down('form');
        var dataview=button.up('window').down('dataview');
        var orignal_source=form.originalCanvas;
        var canvas=form.canvas;
        var ctx = canvas.getContext('2d');
        ctx.drawImage(orignal_source, 0, 0);


        var cStore = button.up('#eastCon').down('#colorGrid').getStore();
        var firstRecord=cStore.getAt(0);
        cStore.each(function(rec) {
            if(rec.get("check")===true) rec.set("check",false);
        });
        Ext.apply(firstRecord.data, form.originalColor);
        dataview.refresh();

        button.setDisabled(true);

    },

    onRecoverybtnRender: function(component, eOpts) {
        component.setTooltip(loc.menu.restore);
    },

    onBtnSaveClick: function(button, e, eOpts) {
        var me = this;
        var saveWin = Ext.create('Ext.window.Window', {
            padding:15,
            layout:'hbox',
            title:loc.main.saveDesign,
            x:e.pageX-168,
            y:e.pageY,
            items:[
            {//update colors
                xtype:'button',
                text:loc.config.save,
                handler:function(button){
                    var cWin = Ext.getCmp('color_window');
                    var canvas = cWin.down('form').canvas;
                    cWin.mask(loc.main.saving);
                    var store = cWin.down('#colorGrid').getStore();
                    var recCount = 0;
                    var currentRecord = getController('Main').getMainView().getViewModel().get('currentRecord');
                    var allRecords = me.getAllRecords();
                    var removeList = [];
                    var saveColorway = function(record){
                        var cfgStore = Ext.getStore('ConfigStore');
                        var fd = new FormData();
                        //                     if(record.data.bd_idx !== 0 && record.data.bd_idx !== undefined && record.data.bd_idx !== '' ){ // 같은 디자인을 저장할 경우
                        //                         fd.append('bd_idx', record.data.bd_idx);
                        //                     }
                        fd.append('id', record.data.id);
                        fd.append('ca_id', cfgStore.getAt(0).get('colorwayCategory'));
                        fd.append('uploadType', 'form');
                        fd.append('bd_group', 1);
                        fd.append('bd_subject', me.getView().currentDesign);
                        fd.append('bd_refer', currentRecord.get('bd_idx'));//현재 작업중인 디자인의 refer에 bd_idx 기록하여 검색에 활용

                        var colors = JSON.stringify(record.data.color);
                        var symbols = JSON.stringify(record.data.behalf);
                        fd.append('selectedcheck', record.data.check);
                        fd.append('colorway', colors); //color
                        fd.append('colorwaytitle', record.data.color_name); //color_name
                        fd.append('chasu', record.data.chasu);
                        if(record.data.group === 0){//디폴트 디자인만 디자인기호저장, behalf
                            fd.append('symbols', symbols);
                        }
                        fd.append('colorgroup', record.data.group); //ggrup

                        var url = domain + '/binder/addUpdate2';
                        var request = new XMLHttpRequest();
                        request.open('POST', url);
                        request.onload = function(a){
                            if(request.status == 200){
                                recCount ++;
                                if(recCount < store.data.autoSource.length){//뺑뺑이
                                    saveColorway(store.data.autoSource.getAt(recCount));
                                }
                                else{
                                    //Store에서 삭제된것과 업데이트되어서 지워야하는 칼라웨이 삭제
                                    //                                 var removeList = (cWin.updated)? cWin.firstIdxs : cWin.removedRecord;
                                    var query = '?';
                                    var delFd = new FormData();
                                    if(cWin.firstIdxs.length > 0){
                                        for(var i=0; i<cWin.firstIdxs.length; i++){
                                            delFd.append('bd_idx', cWin.firstIdxs[i]);
                                            if(i===0){
                                                query += 'bd_idx=' + cWin.firstIdxs[i];
                                            }
                                            else{
                                                query += '&bd_idx=' + cWin.firstIdxs[i];
                                            }
                                        }
                                    }
                                    Ext.data.JsonP.request({
                                        url:getDeleteDataApi() + query,
                                        success:function(response){
                                            //                                         if(count == cWin.firstIdxs.length -1){
                                            Ext.toast(loc.upload.saved);
                                            cWin.unmask();
                                            store = null;
                                            saveWin.close();
                                            cWin.close();
                                            //                                             setTimeout(Ext.getCmp('btnColorway').fireEvent, 500, 'click');
                                            //                                         }
                                            //                                         count += 1;
                                        }
                                    });

                                    //                                 var delReq = new XMLHttpRequest();
                                    //                                 delReq.open('POST', getDeleteDataApi());
                                    //                                 delReq.send(delFd);

                                }
                            }
                            else{
                                alert('Error " + oReq.status + " occurred when trying to upload your file.<br \/>');
                            }
                        };
                        request.send(fd);
                    };
                    saveColorway(allRecords[recCount]);
                },
            },
            {//save as new design
                xtype:'button',
                margin:'0 0 0 10',
                text:loc.menu.saveAsNew,
                handler:function(btnSaveAs){
                    Ext.Msg.confirm('', loc.main.saveByNewDesign, function(re){
                        if(re == 'yes'){//when click save
                            var form=button.up('window').down('form');
                            var canvas=form.canvas;
                            button.up('window').mask(loc.main.saving);
                            if (canvas.toBlob) {
                                canvas.toBlob(
                                function (blob) {
                                    var store = button.up('window').down('dataview').getStore();
                                    var sd = [];
                                    //get colorways except checked that is used to main colors
                                    store.each(function(record, index){
                                        var obj = {};
                                        obj.color = record.data.color;
                                        obj.color_name = record.data.color_name;
                                        if(!record.data.check){
                                            sd.push(obj);
                                        }
                                        else{//add selected color to the first at array
                                            sd.unshift(obj);
                                        }
                                    });
                                    //convert to string to save into server
                                    var colorwayData = JSON.stringify(sd);
                                    var record=form.getRecord();
                                    var url=domain+"/json/addUpdate";
                                    var ca_id=record.get("ca_id");
                                    //새 파일명
                                    var newName = record.get('bd_file')[0].file_name.split('.')[0] + '_1.png';

                                    var formData = new FormData();
                                    formData.append('data_3131', colorwayData);
                                    formData.append('ca_id', ca_id);
                                    formData.append('file_0', blob, newName);
                                    formData.append('uploadType', "form");

                                    xhr = new XMLHttpRequest();
                                    xhr.open('POST', url, true);
                                    xhr.onload = function() {
                                        if (xhr.status === 200) {
                                            Ext.toast(loc.upload.saved);
                                            button.up('window').unmask();
                                            button.up('window').close();
                                            getController('Main').getListTab().getActiveTab().getGrid().getStore().load();

                                        } else {
                                            alert('An error occurred!');
                                        }
                                    };
                                    xhr.send(formData);

                                },
                                'image/png'
                                );
                                btnSaveAs.up('window').close();
                            }
                        }
                        else{
                            btnSaveAs.up('window').close();
                        }
                    });
                },
            }
            ]
        }).show();


    },

    onBtnSaveAsRender: function(component, eOpts) {
        component.setTooltip(loc.config.save);
    },

    onComponentRender: function(component, eOpts) {
        component.setHtml('<strong><span style="cursor:pointer;line-height:18px;title:기본 디자인기호 적용">가</span></strong>');
        component.el.on('click', function(e){
            var store = component.up('#eastCon').down('#colorGrid').getStore();
            if(store.getCount() > 1){
                Ext.toast('이미 디자인기호가 설정되어 있어서 자동 설정 할 수 없습니다.');
                return;
            }
            Ext.Msg.confirm('자동 디자인기호 적용', '디자인 기호의 순서를 기본순서로 업데이트 합니다, 저장하면 이전 설정이 변경됩니다.', function(button){
                if(button == 'yes'){
                    var defaultSymbols = component.up('#eastCon').down('#behalfCon').symbols;
                    if(defaultSymbols.length === 0){
                        Ext.toast('기본 디자인기호가 설정되어 있지 않습니다.');
                    }
                    else{
                        store.getAt(0).set('behalf', defaultSymbols);
                        component.up('#eastCon').down('#colorGrid').refresh();
                    }

                }
            });
        });
    },

    onFillAllColorRender: function(component, eOpts) {
        var me = this;
        component.el.on('click', function(e){
            var sto = component.up('window').down('#colorGrid').getStore();
            sto.each(function(records){
                if(records.data.group !== 0){
                    me.getHexByCode(records, records.get('color'), component.up('window').down('#colorGrid'));
                }
            });
        });
    },

    onDataviewItemClick: function(dataview, record, item, index, e, eOpts) {
        var me = this;
        var form=dataview.up('window').down('#designForm');
        var idx = parseInt(Ext.get(e.target).getAttribute("idx")) - 1;
        var selectGroup = function(){
            if(!me.checkSymbols()) return;
            if(record.get('check')) return;
            var store=dataview.getStore();
            store.each(function(rec) {
                if(rec.get("check")===true) rec.set("check",false);
            });
            record.set("check",true);
            var chasu = Ext.getCmp('color_window').down('#cbChasu').getValue();
            var symbolOrder = Ext.getCmp('color_window').symbolOrder[chasu]; //checkSymbols()에서 저장한것
            var newColors = [];
            for(var i=0; i<record.get('color').length; i++){
                newColors[i] = record.get('color')[symbolOrder[i]];
            }
            var sourceColor = (record.get('group') === 0)? record.get('color') : newColors;
            Ext.getCmp('color_window').mask('칼라웨이를 적용하고 있습니다.');
            setTimeout(form.setAllChangeColor, 500, form.originalColor.color, sourceColor);
            form.selectedColorRecord = record;
        };
        //icon for changing color by color picker
        if(Ext.get(e.target).dom.className==="color-button") {
            var pickerWin=Ext.getCmp("color_picker");
            if(pickerWin === undefined) {
                pickerWin=Ext.create(appName + ".view.ColorPickerWindow",{
                    width:600,
                    height:428,
                    alwaysOnTop:true,
                    title:'Change Color'
                });
            }
            var oriColors = [];
            for(var i=0; i<record.get('color').length; i++){
                var obj = {};
                obj.color = record.get('color')[i].color;
                obj.name = record.get('color')[i].name;
                oriColors.push(obj);
            }
            pickerWin.setRecord(record);
            //save origincal colors for restoring
            pickerWin.originalColors = oriColors;
            pickerWin.setIdx(idx);
            pickerWin.show();
            var colorSelector = pickerWin.down('colorselector');
            colorSelector.on('change', function(picker, newColor, previousColor, eOpts){
                var form=Ext.getCmp("color_window").down("form");
                var canvas=form.canvas;

                var window=picker.up('window');
                var idx=window.getIdx();
                var record=window.getRecord();
                var colors=record.get("color");
                var colorpickerwindow=window.down('colorpickerwindow');
                var ori_color=colors[idx].color;
                newColor = "#" + newColor;
                colors[idx].color=newColor;
                record.set('color', colors);
                var dataview=Ext.getCmp("color_window").down("dataview");
                if(record.get('check')===true) form.setChangeColor(ori_color, newColor, form.baseCanvas, canvas);
                dataview.refresh();

            });
            selectGroup();


        } else if(Ext.get(e.target).dom.className==="color-chk" ||Ext.get(e.target).dom.className==="colorway-name") {
            selectGroup();
            //icon for move up
        } else if(Ext.get(e.target).dom.className==="fa fa-chevron-up color-button-up") {
            var color=record.get("color");
            var tempColor=color[idx];
            if(idx>0) {
                color[idx]=color[idx-1];
                color[idx-1]=tempColor;
            }
            record.set("color",color);
            dataview.refresh();
            //icon for move down
        } else if(Ext.get(e.target).dom.className==="fa fa-chevron-down color-button-down") {
            var color=record.get("color");
            var tempColor=color[idx];
            if(color.length-1>=idx) {
                color[idx]=color[idx+1];
                color[idx+1]=tempColor;
            }
            record.set("color",color);
            dataview.refresh();
            //icon for load colorchip category
        }else if(Ext.get(e.target).dom.className==="fa fa-th colorchip") {
            if(Ext.getCmp('colorChipWin') !== undefined) {Ext.getCmp('colorChipWin').close();}
            var form=dataview.up("window").down("form");
            var canvas=form.canvas;
            var cWin = Ext.create(appName + '.view.ActorWindow',{
                id:'colorChipWin',
                height:windowMaxHeight,
                record:record,
                alwaysOnTop:true,
                modal:false,
                width:600,
                idx:idx,
                x:Ext.getBody().getViewSize().width-385-550,
                listeners:{
                    render:function(win){
                        win.disableEvent();
                        win.down('#tree').setHidden(true);
                        var colors = win.record.get('color');
                        setTimeout(me.findSimilarColor, 1000, win.categoryId, colors[win.idx].color);
                    },
                    pagingtoolbarcomplete:function(toolbar, win){
                        var rangeFinder = {
                            xtype: 'button',
                            height:35,
                            width:23,
                            itemId:'btnFindByColorRange',
                            glyph: 'xf00e@FontAwesome',

                            listeners:{
                                render:function(button){
                                    button.el.select('.x-btn-icon-el').elements[0].style.color = '#FFC017';
                                    button.setTooltip(loc.search.findSimilar);
                                }
                            },
                            handler:function(button){
                                var colors = win.record.get('color');
                                me.findSimilarColor(win.categoryId, colors[win.idx].color);
                            }
                        };
                        toolbar.insert(toolbar.items.items.length - 2, rangeFinder);
                    },
                    close:function(){
                        if(Ext.getCmp('colorFinder')){
                            Ext.getCmp('colorFinder').close();
                        }
                    }
                }
            }).show();
            cWin.setColorChipGrid();
            var tree = cWin.down('#tree');
            tree.on('itemclick', function(cateTree, rec){
                if(rec && rec.data){
                    var opt = getOption(rec.data.data.ca_option);
                    if(opt.colorChip){
                        cWin.getGrid().categoryId = rec.get("id");
                        cWin.getGrid().numOfItem = 100;
                        getController('Main').getServerData(rec.get("id"), 'ca_id=' + rec.get("id"), cWin.down('#list'));
                        cWin.down('#list').on('listcomplete', function(cId, grid){
                            var cSto = cWin.down('#list').down('#galleryView').getStore();
                            cSto.setPageSize(100);
                            cSto.load();
                        });
                    }
                    else{
                        Ext.toast(loc.error.noColorchipCategory);
                    }
                }
            });
            var treeStore = tree.getStore();
            treeStore.on('load', function(tStore){
                var ccCate = 91;
                cWin.categoryId = ccCate;
                var node = treeStore.getNodeById(ccCate);
                tree.getSelectionModel().select(node);
                //show category that configured at actor.json at the first time
                tree.fireEvent('itemclick', tree, node, tree.el, '', event);
            });
            //when click one of color code list
            cWin.getGrid().on('itemclick', function(inDataview, inRecord){
                var record = cWin.record;
                var id = cWin.idx;
                var colors = record.get('color');
                var ori_color = colors[idx].color;
                var newColor = inRecord.get('idcolorHex');
                if(newColor.indexOf('#') == -1) newColor = '#'+ newColor;
                colors[idx].color = newColor;
                record.set('color', colors);
                if(record.get('check')===true) form.setChangeColor(ori_color, newColor, form.baseCanvas, canvas);
                dataview.refresh();
            });

            //icon for changing name of the colorway
        }else if(Ext.get(e.target).dom.className == 'fa fa-pencil edit-title'){    var titleWin = Ext.create('Ext.window.Window', {
            layout:'hbox',
            padding:15,
            alwaysOnTop:true,
            items:[
            {
                xtype:'textfield',
                fieldLabel:loc.main.name,
                labelWidth:60,
                listeners:{
                    render:function(field){
                        field.el.on('keyup', function(e, field){
                            if(e.keyCode == 13){
                                titleWin.down('button').fireEvent('click');
                            }
                        });
                    }
                },
                value:Ext.get(e.target).dom.getAttribute('oldname')
            },
            {
                xtype:'button',
                text:loc.menu.edit,
                listeners:{
                    click:function(button){
                        //change title of colorway
                        record.set('color_name', titleWin.down('textfield').getValue());
                        titleWin.close();
                    }
                }
            }
            ]
        }).show();
        //icon for removing colorway
    }else if(Ext.get(e.target).dom.className == 'fa fa-trash remove-record'){
        if(dataview.getStore().getAt(index).get('bd_idx') !== 0){//서버에 저장된(bd_idx값이 있는) 자료에 대해
            me.getView().removedRecord.push(dataview.getStore().getAt(index).get('bd_idx')); // save removed colorway
        }
        dataview.getStore().removeAt(index);
        dataview.refresh();
        //icon for when click outside of textfield
    }else if(Ext.get(e.target).dom.className == 'color-name'){
        Ext.get(e.target).on('blur', function(){
            record.get('color')[idx].name = Ext.get(e.target).getValue();
        });
    }
    //click to connect a design symbol to each colorway
    else if(Ext.get(e.target).dom.className == 'btn-setsymbol'){
        var symbols = dataview.up('#eastCon').down('#behalfCon').symbols;
        if(symbols.length === 0){//새로시작하는 칼라웨이의 경우 Erp에도 해당 새 차수가 없을때
            var allRecords = me.getAllRecords();
            for(var i=0; i<allRecords.length; i++){
                if(allRecords[i].data.chasu == 1 && allRecords[i].data.group === 0){//첫번째 차수 디폴트 선택
                    symbols = allRecords[i].get('behalf');
                }
            }

            if(symbols.length === 0){//그래도 symbol이 없으면
                Ext.toast('디자인에 적용된 디자인기호가 없습니다.');
                return;
            }
        }
        var sWin = Ext.create('Ext.window.Window', {
            width:400,
            height:130,
            layout:column,
            padding:15,
            title:'디자인기호 연결',
            alwaysOnTop:true
        }).show();

        var sbUnit = {
            xtype:'button',
            ui:'plain-toolbar-small',
            style:'border:1px solid #cecece;cursor:pointer',
            overItemCls:'x-column-header-over',
            width:50,
            height:30,
            listeners:{
                afterrender:function(sLab){
                    sLab.el.on('click', function(){
                        var target = dataview.getStore().getAt(0).get('behalf');
                        target[idx] = sLab.text;
                        dataview.refresh();
                        sWin.close();
                    });

                }
            }
        };
        for(var i=0; i<symbols.length; i++){
            sbUnit.text = symbols[i];
            sWin.add(sbUnit);
        }
    }

    },

    onColor_windowRender: function(component, eOpts) {
        component.setMaxHeight(windowMaxHeight);

    },

    onColor_windowBeforeRender: function(component, eOpts) {
        languageSet.Korean.colorway = {};
        languageSet.English.colorway = {};

        languageSet.English.colorway = {
            addChasu:'Add new group of coloryway',
            colorway:'Colorway',
            noDefaultChange:'Default colorway cannot be changed.',
            getChasulistFromERP:'Getting colorway infomation by each time',
            noChasuInfoInERP:'Nothing was found in ERP',
            noNumberOfColorInfo:'As no number of colors updated, it will be extracted automatically',
            updateChasu:'Update the colorways order base on ERP',
        };
        languageSet.Korean.colorway = {
            addChasu:'칼라웨이 차수 추가',
            colorway:'칼라웨이',
            noDefaultChange:'디폴트 칼라웨이는 바꿀수 없습니다.',
            getChasulistFromERP:'ERP에서 Colorway 차수 정보 가져오기',
            noChasuInfoInERP:'ERP에서 해당 정보를 발견할 수 없습니다.',
            noNumberOfColorInfo:'입력된 도수 정보가 없어 자동으로 추출된 값을 사용합니다.',
            updateChasu:'ERP로부터 차수 업데이트'
        };

    },

    onColor_windowClose: function(panel, eOpts) {
        if(Ext.getCmp('colorFinder')){
            Ext.getCmp('colorFinder').close();
        }
        if(Ext.getCmp('colorChipWin')){
            Ext.getCmp('colorChipWin').close();
        }
    }

});
