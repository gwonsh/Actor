/*
 * File: app/view/SelectRecordField.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.SelectRecordField', {
    extend: 'Ext.container.Container',
    alias: 'widget.selectrecordfield',

    requires: [
        'Actor.view.SelectRecordFieldViewModel',
        'Actor.view.SelectRecordFieldViewController',
        'Ext.container.Container',
        'Ext.form.Label',
        'Ext.Img',
        'Ext.toolbar.Spacer',
        'Ext.button.Button'
    ],

    controller: 'selectrecordfield',
    viewModel: {
        type: 'selectrecordfield'
    },
    width: '100%',

    layout: {
        type: 'hbox',
        align: 'bottom'
    },
    items: [
        {
            xtype: 'container',
            flex: 1,
            hidden: true,
            itemId: 'imageCon',
            width: '100%',
            layout: {
                type: 'hbox',
                padding: '10 0 0 0'
            },
            items: [
                {
                    xtype: 'label',
                    cls: 'x-form-item-label-default',
                    itemId: 'imageLabel'
                },
                {
                    xtype: 'image',
                    margin: '0 0 0 10',
                    width: 60
                },
                {
                    xtype: 'tbspacer',
                    flex: 1,
                    itemId: 'spacer'
                }
            ]
        },
        {
            xtype: 'button',
            itemId: 'btnSelect',
            style: {
                'border-radius': '0'
            },
            iconCls: 'fa fa-folder-o',
            listeners: {
                click: 'onBtnSelectClick'
            }
        }
    ],

    setRecordInfo: function(categoryId, fieldId, field) {
        this.down('#btnSelect').fieldId = fieldId;
        this.down('#btnSelect').connectCategory = categoryId;
        var finder = '';

        if(basicItems.indexOf(fieldId) != -1){//기본정보를 불러오는경우
            finder = '{record_'+categoryId+'.' + fieldId + '}';
        }
        else{//필드정보를 불러오는 경우
            finder = '{record_'+categoryId+'.id' + fieldId + '}';
        }
        if(fieldId == 'bd_file'){
            finder = '{file_' + categoryId + '}';
        }
        field.bind = {
            value:finder
        };

        this.insert(0, field);//받아온 필드를 첫번째 배치
        if(fieldId == 'bd_file'){//파일을 선택하면 이미지로 표시하기 위해 textfield 숨김
            this.setConfig({align:'top'});
            this.align = 'top';
            this.down('textfield').setHidden(true);
            this.down('#imageCon').setHidden(false);
            this.down('#imageLabel').setText(field.fieldLabel);
        }
        if(field.xtype == 'htmleditor'){
            this.setConfig({align:'top'});
        }

    },

    getButtonColor: function(index) {
        var colors = ['#4a635f', '#62623d', '#635d4a', '#634f4a', '#A5A8AB'];
        return colors[index];
    }

});