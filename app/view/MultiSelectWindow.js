/*
 * File: app/view/MultiSelectWindow.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.MultiSelectWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.multiselectwindow',

    requires: [
        'Actor.view.MultiSelectWindowViewModel',
        'Actor.view.MultiSelectWindowViewController',
        'Ext.form.field.ComboBox',
        'Ext.container.Container',
        'Ext.button.Button',
        'Ext.form.field.TextArea'
    ],

    controller: 'multiselectwindow',
    viewModel: {
        type: 'multiselectwindow'
    },
    width: 400,
    ghost: true,
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'center',
        padding: 35
    },
    items: [
        {
            xtype: 'combobox',
            itemId: 'firstOption',
            width: '100%',
            labelWidth: 70,
            displayField: 'name',
            valueField: 'name',
            bind: {
                fieldLabel: '{option1}'
            },
            listeners: {
                select: 'onFirstOptionSelect'
            }
        },
        {
            xtype: 'combobox',
            disabled: true,
            itemId: 'secondOption',
            width: '100%',
            labelWidth: 70,
            displayField: 'name',
            queryMode: 'local',
            valueField: 'name',
            bind: {
                fieldLabel: '{option2}'
            }
        },
        {
            xtype: 'container',
            cls: 'add-multiselcted-box',
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'button',
                            focusCls: 'btn-grey-focus',
                            cls: 'btn-grey',
                            height: 30,
                            itemId: 'btnAdd',
                            overCls: 'btn-grey-over',
                            width: 70,
                            text: 'Add',
                            listeners: {
                                click: {
                                    fn: 'onBtnAddClick',
                                    scope: 'controller'
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            focusCls: 'btn-grey-focus',
                            cls: 'btn-grey',
                            height: 30,
                            itemId: 'btnClear',
                            margin: '4 0 0 0',
                            overCls: 'btn-grey-over',
                            width: 70,
                            text: 'CLEAR',
                            listeners: {
                                click: {
                                    fn: 'onBtnClearClick',
                                    scope: 'controller'
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'textareafield',
                    itemId: 'valueField',
                    margin: '0 0 0 4',
                    width: 256,
                    fieldLabel: 'Label',
                    hideLabel: true,
                    readOnly: true
                }
            ]
        },
        {
            xtype: 'container',
            flex: 1,
            margin: '16 0 0 0',
            layout: {
                type: 'hbox',
                align: 'middle',
                pack: 'center'
            },
            items: [
                {
                    xtype: 'button',
                    itemId: 'btnOK',
                    glyph: 'xf05d@FontAwesome',
                    bind: {
                        text: '{entry}'
                    },
                    listeners: {
                        click: {
                            fn: 'onBtnOKClick',
                            scope: 'controller'
                        }
                    }
                },
                {
                    xtype: 'button',
                    itemId: 'btnCancel',
                    margin: '0 0 0 10',
                    glyph: 'xf00d@FontAwesome',
                    bind: {
                        text: '{cancel}'
                    },
                    listeners: {
                        click: {
                            fn: 'onBtnCancelClick',
                            scope: 'controller'
                        }
                    }
                }
            ]
        }
    ],

    onFirstOptionSelect: function(combo, record, eOpts) {
        var sbDt = record.data.subData;
        var sndOpt = this.down('#secondOption');
        sndOpt.setDisabled(false);
        sndOpt.value = '';
        var sData = [];
        Ext.Array.each(sbDt, function(item){
            sData.push({name:item});
        });
        var store = Ext.create('Ext.data.Store', {
            fields:['name'],
            data:sData
        });
        sndOpt.setStore(store);
    },

    setFirstStore: function(store) {
        var fstOpt = this.down('#firstOption');
        fstOpt.setStore(store);
    }

});