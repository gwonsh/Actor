/*
 * File: app/view/CategorySetWindow.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.CategorySetWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.categorysetwindow',

    requires: [
        'Actor.view.CategorySetWindowViewModel',
        'Actor.view.CategorySetWindowViewController',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.tree.Column',
        'Ext.tab.Panel',
        'Ext.form.Label',
        'Ext.toolbar.Spacer',
        'Ext.tab.Tab',
        'Ext.XTemplate',
        'Ext.grid.Panel',
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio',
        'Ext.form.field.ComboBox'
    ],

    controller: 'categorysetwindow',
    viewModel: {
        type: 'categorysetwindow'
    },
    id: 'cateSetWindow',
    itemId: 'cateSetWin',
    width: 830,

    layout: {
        type: 'hbox',
        align: 'stretch',
        padding: 15
    },
    bind: {
        title: '{settingCategory}'
    },
    items: [
        {
            xtype: 'container',
            itemId: 'treeCon',
            width: 220,
            layout: 'accordion',
            items: [
                {
                    xtype: 'treepanel',
                    cls: 'config-tree',
                    height: 500,
                    itemId: 'cTree',
                    scrollable: true,
                    width: 220,
                    frameHeader: false,
                    header: {
                        hidden: true
                    },
                    hideHeaders: true,
                    animate: false,
                    rootVisible: false,
                    columns: [
                        {
                            xtype: 'treecolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var gridType = '';
                                if(record.get('data').layout === 0 ||  record.get('data').layout == 2){
                                    gridType = 'normal';
                                }
                                else{
                                    gridType = 'gallery';
                                }
                                var caOpt = getOption(record.get('option'));
                                if(caOpt.schedule){//for schedule category that configrured --shedule:1 at category option
                                    gridType = 'schedule';
                                }
                                var cIcon = caOpt.icon;
                                //in case no icon, set default
                                if(!cIcon) cIcon = 'folder-o';
                                var css = 'style="float:right;cursor:pointer;opacity:0.4"';
                                var val = '';
                                val    += 	'<i class="fa fa-'+cIcon+'" aria-hidden="true"></i>' + ' <span class="tree-title">' + record.get('title') + '</span>';
                                return val;

                            },
                            width: '100%'
                        }
                    ],
                    listeners: {
                        itemclick: 'onCTreeItemClick'
                    }
                }
            ]
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            cls: 'config-tab',
            itemId: 'configTab',
            activeTab: 0,
            items: [
                {
                    xtype: 'panel',
                    itemId: 'configCon',
                    padding: '10 10 10 0',
                    scrollable: 'y',
                    width: '100%',
                    layout: 'vbox',
                    bind: {
                        title: '{setting}'
                    },
                    items: [
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            bind: {
                                text: '{changeCategoryName}'
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            height: 3
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'nameCon',
                            items: [
                                {
                                    xtype: 'label',
                                    style: ' float:left',
                                    width: '100%',
                                    bind: {
                                        text: '{cellEditTip}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    reference: 'fdCname',
                                    itemId: 'fdCategoryName',
                                    style: ' float:left',
                                    width: 250,
                                    hideLabel: true,
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{categoryName}'
                                    },
                                    listeners: {
                                        render: 'onTextfieldRender'
                                    }
                                },
                                {
                                    xtype: 'tbspacer',
                                    style: ' float:left',
                                    width: 30
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        /* call the original name of category */
                                        var tree = button.up('window').down('#cTree');
                                        var tRec = tree.getSelectionModel().getSelection()[0];
                                        var fdCname = button.up('window').lookupReference('fdCname');
                                        fdCname.setValue(tRec.get('text'));
                                        fdCname.focus();
                                    },
                                    itemId: 'btnReset',
                                    style: {
                                        float: 'left',
                                        'background-color': 'transparent',
                                        border: 'none'
                                    },
                                    ui: 'plain-toolbar-small',
                                    iconCls: 'fa fa-refresh',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        tooltip: '{reset}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            itemId: 'changeNameContent',
                            listeners: {
                                afterrender: 'onLabelAfterRender'
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            height: 3
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'displayNameContentCon',
                            items: [
                                {
                                    xtype: 'label',
                                    style: ' float:left',
                                    width: '100%',
                                    bind: {
                                        text: '{cellEditTip}'
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    itemId: 'fdNameContent',
                                    style: ' float:left',
                                    width: 250,
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{dpContentName}'
                                    },
                                    listeners: {
                                        render: 'ondNameContentRender'
                                    }
                                },
                                {
                                    xtype: 'tbspacer',
                                    style: ' float:left',
                                    width: 30
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            itemId: 'filteringLabel',
                            listeners: {
                                afterrender: 'onfilteringLabel'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'filteringCon',
                            items: [
                                {
                                    xtype: 'label',
                                    style: ' float:left',
                                    width: '100%',
                                    bind: {
                                        text: '{filteringInfo}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    width: '100%',
                                    layout: {
                                        type: 'hbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            itemId: 'fdFilterValue',
                                            width: 350,
                                            fieldLabel: 'Label',
                                            hideLabel: true,
                                            readOnly: true,
                                            bind: {
                                                disabled: '{!isSelected}',
                                                value: '{filter}'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            handler: function(button, e) {
                                                var tree = button.up('window').down('#cTree');
                                                var me =this;
                                                //original record
                                                var inputField = button.up('container').down('#fdFilterValue');
                                                //save the original record into inputField to use when the configuration saved
                                                inputField.selectedRecord = tree.getSelectionModel().getSelection()[0];
                                                var setWin = button.up('window');
                                                var fStore = Ext.getStore('fStore_' + inputField.selectedRecord.get('id'));
                                                var fWin = Ext.create('Ext.window.Window', {
                                                    modal:true,
                                                    minHeight:650,
                                                    title:loc.categorySet.selectField,
                                                    layout:'hbox',
                                                    padding:20,
                                                    items:[
                                                    {
                                                        xtype: 'gridpanel',
                                                        itemId: 'fields',
                                                        scrollable:'y',
                                                        width: 300,
                                                        height:'100%',
                                                        bind: {
                                                            title: '{selectField}'
                                                        },
                                                        store:fStore,
                                                        columns: [
                                                        {
                                                            xtype: 'gridcolumn',
                                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                                var opt = record.get('cols_option');
                                                                if(record.get('cols_share')){//fore shared(공유) field
                                                                    value = '<i class="fa fa-share-alt-square" aria-hidden="true"></i> ' + value;
                                                                }
                                                                return '<a title="'+opt+'">' + value + '</div>';
                                                            },
                                                            width: 150,
                                                            dataIndex: 'cols_name',
                                                            text: 'Field Name'
                                                        },
                                                        {
                                                            xtype: 'gridcolumn',
                                                            dataIndex: 'cols_type',
                                                            text: 'Type'
                                                        }
                                                        ],
                                                        listeners: {
                                                            itemclick: function(grid, record){
                                                                grid.up('window').down('#rightPan').setDisabled(false);
                                                                grid.up('window').down('#fdFieldId').setValue(record.get('cols_idx'));
                                                                grid.up('window').down('#fdFieldValue').setValue('');
                                                                grid.up('window').down('#rg').reset();
                                                                var filter = setWin.getViewModel().data.filters.filter;
                                                                for(var i=0; i<filter.length; i++){
                                                                    var cIdx = filter[i].split('=')[0];
                                                                    if(cIdx == record.get('cols_idx')){
                                                                        //필터링 조건 값 초기화
                                                                        grid.up('window').down('#fdFieldValue').setValue(filter[i].split('=')[1]);
                                                                        var notFilter = setWin.getViewModel().data.filters.notFilter;
                                                                        if(notFilter === undefined) notFilter = [];
                                                                        if(notFilter.indexOf(cIdx) == -1){
                                                                            grid.up('window').down('#equalVal').setValue(true);
                                                                        }
                                                                        else{
                                                                            grid.up('window').down('#notEqualVal').setValue(true);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        xtype:'panel',
                                                        layout:{
                                                            type:'vbox',
                                                            align:'left'
                                                        },
                                                        flex:1,
                                                        height:'100%',
                                                        disabled:true,
                                                        itemId:'rightPan',
                                                        style:'border-left:1px solid #cecece',
                                                        padding:'100, 0 0 15',
                                                        items:[
                                                        {
                                                            xtype:'textfield',
                                                            fieldLabel:loc.categorySet.fieldId,
                                                            allowBlank:false,
                                                            labelWidth:55,
                                                            itemId:'fdFieldId'
                                                        },
                                                        {
                                                            xtype:'textfield',
                                                            fieldLabel:loc.categorySet.value,
                                                            allowBlank:false,
                                                            labelWidth:55,
                                                            itemId:'fdFieldValue'
                                                        },
                                                        {
                                                            xtype:'radiogroup',
                                                            itemId:'rg',
                                                            fieldLabel:loc.search.searchOption,
                                                            columns:1,
                                                            labelWidth:60,
                                                            items:[
                                                            {
                                                                boxLabel:loc.categorySet.showAtSame,
                                                                name:'rb',
                                                                itemId:'equalVal',
                                                                inputValue: '1'
                                                            },
                                                            {
                                                                boxLabel:loc.categorySet.showAtNotSame,
                                                                name:'rb',
                                                                itemId:'notEqualVal',
                                                                inputValue: '2'
                                                            }
                                                            ]
                                                        },
                                                        {
                                                            xtype:'button',
                                                            margin:'30 0 0 0',
                                                            text:loc.config.apply,
                                                            dock:'bottom',
                                                            width:90,
                                                            handler:function(button){
                                                                var win = button.up('window');
                                                                var val = (win.down('#rg').getValue());
                                                                var inputVal = inputField.getValue();
                                                                //check field option
                                                                if(val.rb === undefined){
                                                                    Ext.toast(loc.categorySet.selectOption);
                                                                }
                                                                //check field value
                                                                else if(win.down('#fdFieldValue').getValue().trim() === ''){
                                                                    win.down('#fdFieldValue').focus();
                                                                    Ext.toast(loc.categorySet.requireValue);
                                                                }
                                                                //check 필드 ID
                                                                else if(win.down('#fdFieldId').getValue().trim() === ''){
                                                                    win.down('#fdFieldId').focus();
                                                                    Ext.toast(loc.categorySet.requireFieldId);
                                                                }
                                                                else{
                                                                    var setModel = Ext.getCmp('cateSetWindow').getViewModel();
                                                                    var newVal = button.up('container').down('#fdFieldValue').getValue();
                                                                    var filter = setModel.data.filters.filter;
                                                                    var notFilter = setModel.data.filters.notFilter || [];
                                                                    var colsIdx = getController('Search').getSearchIdx(win.down('#fdFieldId').getValue());
                                                                    var i;
                                                                    if(filter.length === 0){//처음부터 서버에 필터가 설정 돼 있지 않으면
                                                                        filter.push(colsIdx + '=' + newVal);
                                                                        if(val.rb == 2){//필드값이 포함되지 않은 검색 결과
                                                                            notFilter.push(colsIdx);
                                                                        }
                                                                    }
                                                                    else{//서버에 설정 값이 있었으면
                                                                        if(filter.indexOf(colsIdx + '=' + newVal) == -1){//query에 colsIdx="xxxxx"와 같이 같은 값이 없으면
                                                                            var isExist = false;
                                                                            for(i=0; i<filter.length; i++){
                                                                                if(filter[i].indexOf(colsIdx) != -1 && filter[i].indexOf(newVal) == -1){
                                                                                    //colsIdx는 같지만 검색값은 틀릴경우 새로 업데이트
                                                                                    filter[i] = colsIdx + '=' + newVal;
                                                                                }
                                                                                if(filter[i].indexOf(colsIdx) != -1){
                                                                                    isExist = true;
                                                                                }
                                                                            }
                                                                            if(!isExist){
                                                                                filter.push(colsIdx + '=' + newVal);
                                                                            }
                                                                            if(val.rb == 2){//queryNot 값 준비
                                                                                if(notFilter.indexOf(colsIdx) == -1){
                                                                                    notFilter.push(colsIdx);
                                                                                }
                                                                            }
                                                                            if(val.rb == 1){//queryNot 삭제
                                                                                if(notFilter.indexOf(colsIdx) != -1){
                                                                                    notFilter.splice(notFilter.indexOf(colsIdx), 1);
                                                                                }
                                                                            }
                                                                        }
                                                                        else{//query설정에 이미 같은 값이 있으면 not값만 체크
                                                                            if(val.rb == 2){//queryNot 값 준비
                                                                                if(notFilter.indexOf(colsIdx) == -1){
                                                                                    notFilter.push(colsIdx);
                                                                                }
                                                                            }
                                                                            if(val.rb == 1){//queryNot 삭제
                                                                                if(notFilter.indexOf(colsIdx) != -1){
                                                                                    var dddd= notFilter.splice(notFilter.indexOf(colsIdx), 1);
                                                                                }
                                                                            }
                                                                        }

                                                                    }

                                                                    var delVal = '--query:'+filter.join();
                                                                    if(notFilter.length > 0){
                                                                        delVal += '--queryNot:' + notFilter.join();
                                                                    }
                                                                    inputField.setValue(delVal);//just shows option value to inputfield
                                                                    var values = {
                                                                        query:filter.join()
                                                                    };
                                                                    if(notFilter.length !== 0){
                                                                        values.queryNot = notFilter.join();
                                                                    }
                                                                    getController('Config').editCategoryOption(inputField.selectedRecord, 'query', values);

                                                                    //                             var seData = getController('Search').getSearchIdx(win.down('#fdFieldId').getValue());
                                                                    //                             var queryValue = 'se_data_' + seData + '=' + win.down('#fdFieldValue').getValue();
                                                                    //                             var q = '--query:' + queryValue;
                                                                    //                             var queryNotValue;
                                                                    //                             if(val.rb == 2){
                                                                    //                                 q += '--queryNot:se_data_' + seData + '_method=notequal';
                                                                    //                                 queryNotValue = 'se_data_' + seData + '_method=notequal';
                                                                    //                             }

                                                                    //                             inputField.setValue(q);

                                                                    //                             var values = {//글자를 포함한 자료로 필터링
                                                                    //                                 query:queryValue
                                                                    //                             };
                                                                    //                             if(queryNotValue !== undefined){//글자를 포함하지 않은 자료로 필터링
                                                                    //                                 values.queryNot = queryNotValue;
                                                                    //                             }
                                                                    //                             getController('Config').editCategoryOption(inputField.selectedRecord, 'query', values);
                                                                    //                             win.close();
                                                                }
                                                            }
                                                        }
                                                        ]
                                                    }
                                                    ]
                                                }).show();
                                            },
                                            itemId: 'btnSelect',
                                            iconCls: 'fa fa-folder-o',
                                            bind: {
                                                disabled: '{!isSelected}'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'fdRemove',
                                            style: 'float:left',
                                            ui: 'default-toolbar-small',
                                            bind: {
                                                disabled: '{!isSelected}',
                                                text: '{remove}'
                                            },
                                            listeners: {
                                                click: 'onButtonClick1'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'tbspacer',
                                    style: ' float:left',
                                    width: 30
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            bind: {
                                text: '{cloneCategory}'
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            height: 3
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'cloneCategory',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'label',
                                    style: ' float:left',
                                    width: '100%',
                                    bind: {
                                        text: '{cellEditTip}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    itemId: 'cloneCon',
                                    width: '100%',
                                    layout: {
                                        type: 'hbox',
                                        align: 'middle'
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            itemId: 'fdClone',
                                            style: ' float:left',
                                            width: 250,
                                            hideLabel: true,
                                            labelWidth: 122,
                                            bind: {
                                                disabled: '{!isSelected}',
                                                fieldLabel: '{categoryId}',
                                                value: '{cloneCategoryId}'
                                            },
                                            listeners: {
                                                render: 'onfdCloneRender'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            margin: '0 0 0 10',
                                            bind: {
                                                disabled: '{!isSelected}',
                                                value: '{isCloneFile}',
                                                boxLabel: '{cloneFile}'
                                            },
                                            listeners: {
                                                change: 'onCheckboxfieldChange'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'tbspacer',
                                    style: ' float:left',
                                    width: 30
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            bind: {
                                text: '{hideCategory}'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'hideCategory',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'label',
                                    style: 'float:left',
                                    width: '100%',
                                    bind: {
                                        text: '{adminExcept}'
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'hideToggle',
                                    margin: '0 30 0 0',
                                    style: 'float:left',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        boxLabel: '{hide}'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var tree = button.up('window').down('#cTree'),
                                            value = button.up('container').down('#hideToggle').getValue();
                                        sRec = tree.getSelectionModel().getSelection()[0];
                                        // true-> 0, false ->1
                                        value = (value)? 0 : 1;
                                        getController('Config').editCategoryOption(sRec, 'actor', value);
                                    },
                                    style: 'float:left',
                                    ui: 'default-toolbar-small',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{save}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            hidden: true,
                            bind: {
                                text: '{onlyViewOwners}'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            hidden: true,
                            itemId: 'onlyOwnerData',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'useToggle',
                                    margin: '0 30 0 0',
                                    style: 'float:left',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{ownerDataOnly}',
                                        boxLabel: '{use}'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var tree = button.up('window').down('#cTree'),
                                            value = button.up('container').down('#useToggle').getValue();
                                        sRec = tree.getSelectionModel().getSelection()[0];
                                        // true-> 0, false ->1
                                        value = (value)? 1 : 0;
                                        getController('Config').editCategoryOption(sRec, 'onlyOwner', value);
                                    },
                                    style: 'float:left',
                                    ui: 'default-toolbar-small',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{save}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            itemId: 'selectFirstData',
                            listeners: {
                                render: 'onSelectFirstDataRender'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'autoSelectFrist',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'autoSelectToggle',
                                    margin: '0 30 0 0',
                                    style: 'float:left',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{autoSelectFirst}',
                                        boxLabel: '{use}'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var tree = button.up('window').down('#cTree'),
                                            value = button.up('container').down('#autoSelectToggle').getValue();
                                        sRec = tree.getSelectionModel().getSelection()[0];
                                        // true-> 0, false ->1
                                        value = (value)?1 : 0;
                                        getController('Config').editCategoryOption(sRec, 'selectFirst', value);
                                    },
                                    style: 'float:left',
                                    ui: 'default-toolbar-small',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{save}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            itemId: 'useColorTag',
                            listeners: {
                                render: 'onUseColorTagRender'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'useColortag',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'useToggle',
                                    margin: '0 30 0 0',
                                    style: 'float:left',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{colorTag}',
                                        boxLabel: '{use}'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var tree = button.up('window').down('#cTree'),
                                            value = button.up('container').down('#useToggle').getValue();
                                        sRec = tree.getSelectionModel().getSelection()[0];
                                        // true-> 0, false ->1
                                        value = (value)?1 : 0;
                                        getController('Config').editCategoryOption(sRec, 'colorTag', value);
                                    },
                                    style: 'float:left',
                                    ui: 'default-toolbar-small',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{save}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            bind: {
                                text: '{settingForm}'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'chnageFormCon',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'textfield',
                                    itemId: 'fdFormMode',
                                    style: ' float:left',
                                    width: 250,
                                    hideLabel: true,
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{formMode}'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var tree = button.up('window').down('#cTree'),
                                            sRec = tree.getSelectionModel().getSelection()[0];
                                        getController('Config').changeForm(sRec, true);
                                    },
                                    style: 'float:left',
                                    ui: 'default-toolbar-small',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{changeForm}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            bind: {
                                text: '{showApprovalBox}'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'showApproval',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'label',
                                    itemId: 'lbShowApproval',
                                    style: 'float:left',
                                    width: '100%',
                                    listeners: {
                                        afterrender: 'onLbShowApprovalAfterRender'
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'showToggle',
                                    margin: '0 30 0 0',
                                    style: 'float:left',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{displayApproval}',
                                        boxLabel: '{show}'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var tree = button.up('window').down('#cTree'),
                                            value = button.up('container').down('#showToggle').getValue(),
                                            sRec = tree.getSelectionModel().getSelection()[0];
                                        getController('Config').editCategoryOption(sRec, 'displayApproval', value);
                                    },
                                    style: 'float:left',
                                    ui: 'default-toolbar-small',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{save}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            bind: {
                                text: '{configEditorTitle}'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'selectTempCon',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'label',
                                    itemId: 'lbShowApproval1',
                                    style: 'float:left',
                                    width: '100%',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{configEditorText}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    width: '100%',
                                    layout: {
                                        type: 'hbox',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            itemId: 'fdCategoryId',
                                            fieldLabel: 'Label',
                                            hideLabel: true,
                                            bind: {
                                                disabled: '{!isSelected}',
                                                value: '{categoryForEditor}'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            handler: function(button, e) {

                                                var configCon = button.up('window').down('#configCon');
                                                configCon.setDisabled(true);
                                                var tree = button.up('window').down('#cTree');
                                                //original record
                                                var inputField = button.up('container').down('#fdCategoryId');
                                                //save the original record into inputField to use when the configuration saved
                                                inputField.selectedRecord = tree.getSelectionModel().getSelection()[0];
                                                //dialog window how to select a category
                                                var win = Ext.create('Ext.window.Window', {
                                                    id:'categoryFirst2',
                                                    padding:30,
                                                    scrollable:true,
                                                    alwaysOnTop:true,
                                                    target:inputField,
                                                    items:[
                                                    {
                                                        xtype:'label',
                                                        text:loc.config.selectCategory
                                                    }
                                                    ],
                                                    listeners:{
                                                        afterlayout:function(comp){
                                                            comp.center();
                                                        },
                                                        close:function(){
                                                            configCon.setDisabled(false);
                                                        }
                                                    }
                                                }).show();
                                                //catch an event that fired when the category is selected
                                                button.up('window').down('treepanel').getView().on('tempcategoryselected', function(caId){
                                                    win.close();
                                                    inputField.setValue(caId);
                                                    //fire event for returning to select original node
                                                    tree.getSelectionModel().select(inputField.selectedRecord);

                                                });
                                            },
                                            itemId: 'btnSelect',
                                            iconCls: 'fa fa-folder-o',
                                            bind: {
                                                disabled: '{!isSelected}'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            style: 'float:left',
                                            ui: 'default-toolbar-small',
                                            bind: {
                                                disabled: '{!isSelected}',
                                                text: '{save}'
                                            },
                                            listeners: {
                                                click: 'onButtonClick'
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            bind: {
                                text: '{hideDefaultField}'
                            },
                            listeners: {
                                beforerender: 'onLabelBeforeRender'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'hideDefaultFields',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'hideToggle',
                                    margin: '0 30 0 0',
                                    style: 'float:left',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{fieldOnly}',
                                        boxLabel: '{hide}'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var tree = button.up('window').down('#cTree'),
                                            value = button.up('container').down('#hideToggle').getValue(),
                                            sRec = tree.getSelectionModel().getSelection()[0];
                                        getController('Config').editCategoryOption(sRec, 'fieldOnly', value);
                                    },
                                    style: 'float:left',
                                    ui: 'default-toolbar-small',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{save}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            itemId: 'lbUseSimpleList',
                            style: 'float:left',
                            width: '100%',
                            listeners: {
                                afterrender: 'onlbUseSimpleListRender'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'useSimpleListCon',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'showSimple',
                                    margin: '0 30 0 0',
                                    style: 'float:left',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{isSimpleList}',
                                        boxLabel: '{show}'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var tree = button.up('window').down('#cTree'),
                                            value = button.up('container').down('#showSimple').getValue(),
                                            sRec = tree.getSelectionModel().getSelection()[0];
                                        getController('Config').editCategoryOption(sRec, 'simpleList', value);
                                    },
                                    style: 'float:left',
                                    ui: 'default-toolbar-small',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{save}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            bind: {
                                text: '{showAsSchedule}'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'showSchedule',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'label',
                                    itemId: 'lbShowSchedule',
                                    style: 'float:left',
                                    width: '100%',
                                    listeners: {
                                        afterrender: 'onLbShowScheduleAfterRender'
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'showToggle',
                                    margin: '0 30 0 0',
                                    style: 'float:left',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{isSchedule}',
                                        boxLabel: '{show}'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var tree = button.up('window').down('#cTree'),
                                            value = button.up('container').down('#showToggle').getValue(),
                                            sRec = tree.getSelectionModel().getSelection()[0];
                                        getController('Config').editCategoryOption(sRec, 'schedule', value);
                                    },
                                    style: 'float:left',
                                    ui: 'default-toolbar-small',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{save}'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'label',
                            cls: 'form-title-label',
                            bind: {
                                text: '{useAsUserList}'
                            }
                        },
                        {
                            xtype: 'container',
                            cls: 'form-section',
                            itemId: 'useAsUserList',
                            width: '100%',
                            items: [
                                {
                                    xtype: 'label',
                                    itemId: 'lbuseAsUserList',
                                    style: 'float:left',
                                    width: '100%',
                                    listeners: {
                                        afterrender: 'onLbuserAsUserListAfterRender'
                                    }
                                },
                                {
                                    xtype: 'checkboxfield',
                                    itemId: 'showToggle',
                                    margin: '0 30 0 0',
                                    style: 'float:left',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        value: '{isMember}',
                                        boxLabel: '{use}'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        var tree = button.up('window').down('#cTree'),
                                            value = button.up('container').down('#showToggle').getValue(),
                                            sRec = tree.getSelectionModel().getSelection()[0],
                                            opt = getOption(sRec.get('option'));
                                        if(opt.categoryCode == 'workGroup' || opt.categoryCode == 'salesGroup' || opt.categoryCode == 'taskGroup' || opt.categoryCode == 'projectGroup'){
                                            Ext.Msg.alert('', 'This cannot be changed because it is one of the group category');
                                            return;
                                        }
                                        //if value is null option will be removed at editCategoryOption
                                        var val = (value)? 'member' : null;
                                        getController('Config').editCategoryOption(sRec, 'categoryCode', val);
                                    },
                                    style: 'float:left',
                                    ui: 'default-toolbar-small',
                                    bind: {
                                        disabled: '{!isSelected}',
                                        text: '{save}'
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    scrollable: true,
                    width: '100%',
                    bind: {
                        disabled: '{!isSelected}',
                        title: '{setIcon}'
                    },
                    items: [
                        {
                            xtype: 'dataview',
                            scrollable: true,
                            width: '100%',
                            itemSelector: 'i',
                            itemTpl: [
                                '<i class="fa fa-{id} tree-icons"></i>'
                            ],
                            store: 'FontAwesomeStore',
                            bind: {
                                disabled: '{!isSelected}'
                            },
                            listeners: {
                                itemclick: 'onDataviewItemClick'
                            }
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    itemId: 'fieldConfigContainer',
                    scrollable: true,
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    bind: {
                        disabled: '{!isSelected}',
                        title: '{fieldSetting}'
                    },
                    items: [
                        {
                            xtype: 'gridpanel',
                            itemId: 'fields',
                            width: 250,
                            bind: {
                                title: '{selectField}'
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        var opt = record.get('cols_option');
                                        if(record.get('cols_share')){//fore shared(공유) field
                                            value = '<i class="fa fa-share-alt-square" aria-hidden="true"></i> ' + value;
                                        }
                                        return '<a title="'+opt+'">' + value + '</div>';
                                    },
                                    width: 150,
                                    dataIndex: 'cols_name',
                                    text: 'Field Name'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    dataIndex: 'cols_type',
                                    text: 'Type'
                                }
                            ],
                            listeners: {
                                render: 'onGridpanelRender',
                                itemclick: 'onGridpanelItemClick'
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            width: 10
                        },
                        {
                            xtype: 'container',
                            flex: 1,
                            itemId: 'fieldCon',
                            scrollable: true,
                            layout: {
                                type: 'vbox',
                                align: 'stretch',
                                padding: '50 0 0 10'
                            },
                            bind: {
                                data: '{fieldRecord}'
                            },
                            items: [
                                {
                                    xtype: 'label',
                                    cls: 'form-title-label',
                                    bind: {
                                        hidden: '{isDataset}',
                                        text: '{hide}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    cls: 'form-section',
                                    itemId: 'hideField',
                                    width: '100%',
                                    bind: {
                                        hidden: '{isDataset}'
                                    },
                                    items: [
                                        {
                                            xtype: 'label',
                                            style: 'float:left',
                                            width: '100%',
                                            bind: {
                                                text: '{hideField}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            itemId: 'hideToggle',
                                            margin: '0 30 0 0',
                                            style: 'float:left',
                                            bind: {
                                                disabled: '{!isFieldSelected}',
                                                value: '{fieldOption.hidden}'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnHide',
                                            style: 'float:left',
                                            ui: 'default-toolbar-small',
                                            bind: {
                                                disabled: '{!isFieldSelected}',
                                                text: '{save}'
                                            },
                                            listeners: {
                                                click: 'onBtnHideClick'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    cls: 'form-title-label',
                                    bind: {
                                        text: '{displayAsImage}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    cls: 'form-section',
                                    itemId: 'imageField',
                                    width: '100%',
                                    bind: {
                                        hidden: '{!isTextField && !isSelectField}'
                                    },
                                    items: [
                                        {
                                            xtype: 'label',
                                            style: 'float:left',
                                            width: '100%',
                                            bind: {
                                                text: '{imageWithURL}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            itemId: 'imageToggle',
                                            margin: '0 30 0 0',
                                            style: 'float:left',
                                            bind: {
                                                value: '{hasImageOption}'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnImage',
                                            style: 'float:left',
                                            ui: 'default-toolbar-small',
                                            bind: {
                                                text: '{save}'
                                            },
                                            listeners: {
                                                click: 'onBtnImageClick'
                                            }
                                        },
                                        {
                                            xtype: 'label',
                                            hidden: true,
                                            margin: '8 0 0 0',
                                            style: 'float:left',
                                            width: '100%',
                                            bind: {
                                                text: '{showImageTitle}'
                                            }
                                        },
                                        {
                                            xtype: 'radiogroup',
                                            hidden: true,
                                            itemId: 'titleToggle',
                                            width: '100%',
                                            hideLabel: true,
                                            bind: {
                                                disabled: '{!isTextField}'
                                            },
                                            items: [
                                                {
                                                    xtype: 'radiofield',
                                                    itemId: 'rdSubject',
                                                    bind: {
                                                        boxLabel: '{title}'
                                                    }
                                                },
                                                {
                                                    xtype: 'radiofield',
                                                    itemId: 'rdName',
                                                    bind: {
                                                        boxLabel: '{fileName}'
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    cls: 'form-title-label',
                                    bind: {
                                        text: '{showSum}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    cls: 'form-section',
                                    itemId: 'needSumField',
                                    width: '100%',
                                    bind: {
                                        hidden: '{!isNumberField  && !isSelectField}'
                                    },
                                    items: [
                                        {
                                            xtype: 'label',
                                            style: 'float:left',
                                            width: '100%',
                                            bind: {
                                                text: '{showSumTitle}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            itemId: 'needSumToggle',
                                            margin: '0 30 0 0',
                                            style: 'float:left',
                                            bind: {
                                                value: '{needSum}'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnNeedSum',
                                            style: 'float:left',
                                            ui: 'default-toolbar-small',
                                            bind: {
                                                disabled: '{!isNumberField}',
                                                text: '{save}'
                                            },
                                            listeners: {
                                                click: 'onBtnNeedSumClick'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    cls: 'form-title-label',
                                    itemId: 'lbNumberFormatTitle',
                                    bind: {
                                        text: '{numberFormatTitle}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    cls: 'form-section',
                                    itemId: 'numberFormatField',
                                    width: '100%',
                                    bind: {
                                        hidden: '{!isNumberField  && !isSelectField}'
                                    },
                                    items: [
                                        {
                                            xtype: 'combobox',
                                            itemId: 'selectNumberFormat',
                                            fieldLabel: '123456.789',
                                            valueField: 'text',
                                            bind: {
                                                value: '{numberFormat}'
                                            },
                                            listeners: {
                                                render: 'onSelectNumberFormatRender',
                                                select: 'onSelectNumberFormatSelect'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnSaveFormat',
                                            style: 'float:left',
                                            ui: 'default-toolbar-small',
                                            bind: {
                                                text: '{save}'
                                            },
                                            listeners: {
                                                click: 'onBtnSaveformatClick'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    cls: 'form-title-label',
                                    bind: {
                                        text: '{percentTitle}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    cls: 'form-section',
                                    itemId: 'percentField',
                                    width: '100%',
                                    bind: {
                                        hidden: '{!isNumberField && !isSelectField}'
                                    },
                                    items: [
                                        {
                                            xtype: 'label',
                                            style: 'float:left',
                                            width: '100%',
                                            bind: {
                                                text: '{percentField}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            itemId: 'percentToggle',
                                            margin: '0 30 0 0',
                                            style: 'float:left',
                                            bind: {
                                                value: '{hasPercentOption}'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnPercent',
                                            style: 'float:left',
                                            ui: 'default-toolbar-small',
                                            bind: {
                                                text: '{save}'
                                            },
                                            listeners: {
                                                click: 'onBtnPercentClick'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    cls: 'form-title-label',
                                    bind: {
                                        text: '{hexTitle}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    cls: 'form-section',
                                    itemId: 'colorHexField',
                                    width: '100%',
                                    bind: {
                                        hidden: '{!isTextField && !isSelectField }'
                                    },
                                    items: [
                                        {
                                            xtype: 'label',
                                            style: 'float:left',
                                            width: '100%',
                                            bind: {
                                                text: '{hexField}'
                                            }
                                        },
                                        {
                                            xtype: 'checkboxfield',
                                            itemId: 'hexToggle',
                                            margin: '0 30 0 0',
                                            style: 'float:left',
                                            bind: {
                                                value: '{hasHexOption}'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            itemId: 'btnHex',
                                            style: 'float:left',
                                            ui: 'default-toolbar-small',
                                            bind: {
                                                text: '{save}'
                                            },
                                            listeners: {
                                                click: 'onBtnHexClick'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    cls: 'form-title-label',
                                    bind: {
                                        text: '{getRecordTitle}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    cls: 'form-section',
                                    itemId: 'getRecordField',
                                    width: '100%',
                                    bind: {
                                        disabled: '{!isFieldSelected}'
                                    },
                                    items: [
                                        {
                                            xtype: 'label',
                                            style: 'float:left',
                                            width: '100%',
                                            listeners: {
                                                render: 'onLabelRender'
                                            }
                                        },
                                        {
                                            xtype: 'container',
                                            width: '100%',
                                            layout: {
                                                type: 'hbox',
                                                align: 'stretch'
                                            },
                                            items: [
                                                {
                                                    xtype: 'textfield',
                                                    flex: 1,
                                                    itemId: 'fdCopied',
                                                    fieldLabel: 'Label',
                                                    hideLabel: true,
                                                    bind: {
                                                        value: '{getRecord}'
                                                    }
                                                },
                                                {
                                                    xtype: 'button',
                                                    handler: function(button, e) {
                                                        button.up('#fieldConfigContainer').setDisabled(true);
                                                        var inputField = button.up('container').down('#fdCopied');
                                                        var fGrid = button.up('tabpanel').down('#fields');
                                                        inputField.colsType = fGrid.getSelection()[0].get('cols_type');
                                                        Ext.create('Ext.window.Window', {
                                                            id:'categoryFirst',
                                                            padding:30,
                                                            alwaysOnTop:true,
                                                            scrollable:true,
                                                            target:inputField,
                                                            items:[
                                                            {
                                                                xtype:'label',
                                                                text:loc.config.selectCategory
                                                            }
                                                            ],
                                                            listeners:{
                                                                afterlayout:function(comp){
                                                                    comp.center();
                                                                },
                                                                close:function(){
                                                                    button.up('#fieldConfigContainer').setDisabled(false);
                                                                }
                                                            }
                                                        }).show();
                                                    },
                                                    itemId: 'btnSelect',
                                                    iconCls: 'fa fa-folder-o'
                                                },
                                                {
                                                    xtype: 'button',
                                                    itemId: 'btnGetRec',
                                                    style: 'float:left',
                                                    ui: 'default-toolbar-small',
                                                    bind: {
                                                        text: '{save}'
                                                    },
                                                    listeners: {
                                                        click: 'onBtnGetRecClick'
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype: 'label',
                                    cls: 'form-title-label',
                                    bind: {
                                        text: '{getValueTitle}'
                                    }
                                },
                                {
                                    xtype: 'container',
                                    cls: 'form-section',
                                    itemId: 'getValueField',
                                    width: '100%',
                                    bind: {
                                        disabled: '{!isFieldSelected}'
                                    },
                                    items: [
                                        {
                                            xtype: 'container',
                                            width: '100%',
                                            layout: {
                                                type: 'hbox',
                                                align: 'stretch'
                                            },
                                            items: [
                                                {
                                                    xtype: 'textfield',
                                                    flex: 1,
                                                    itemId: 'fdCopied',
                                                    fieldLabel: 'Label',
                                                    hideLabel: true,
                                                    bind: {
                                                        value: '{getValue}'
                                                    }
                                                },
                                                {
                                                    xtype: 'button',
                                                    handler: function(button, e) {
                                                        button.up('#fieldConfigContainer').setDisabled(true);
                                                        var inputField = button.up('container').down('#fdCopied');
                                                        var fGrid = button.up('tabpanel').down('#fields');
                                                        inputField.colsType = fGrid.getSelection()[0].get('cols_type');
                                                        Ext.create('Ext.window.Window', {
                                                            id:'categoryFirst',
                                                            padding:30,
                                                            scrollable:true,
                                                            alwaysOnTop:true,
                                                            target:inputField,
                                                            items:[
                                                            {
                                                                xtype:'label',
                                                                text:loc.config.selectCategory
                                                            }
                                                            ],
                                                            listeners:{
                                                                afterlayout:function(comp){
                                                                    comp.center();
                                                                },
                                                                close:function(){
                                                                    button.up('#fieldConfigContainer').setDisabled(false);
                                                                }
                                                            }
                                                        }).show();
                                                    },
                                                    itemId: 'btnSelect',
                                                    iconCls: 'fa fa-folder-o'
                                                },
                                                {
                                                    xtype: 'button',
                                                    itemId: 'btnGetVal',
                                                    style: 'float:left',
                                                    ui: 'default-toolbar-small',
                                                    bind: {
                                                        text: '{save}'
                                                    },
                                                    listeners: {
                                                        click: 'onBtnGetValClick'
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    listeners: {
        beforerender: 'onCateSetWinBeforeRender',
        afterrender: 'onCateSetWinAfterRender'
    }

});