/*
 * File: app/view/LinkingWindow.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.view.LinkingWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.linkingwindow',

    requires: [
        'Actor.view.LinkingWindowViewModel',
        'Actor.view.LinkingWindowViewController',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.grid.Panel',
        'Ext.grid.plugin.DragDrop',
        'Ext.util.Point',
        'Ext.grid.column.Column',
        'Ext.toolbar.Paging',
        'Ext.form.field.Text',
        'Ext.button.Button',
        'Ext.form.Label',
        'Ext.toolbar.Spacer'
    ],

    config: {
        categoryId: '',
        openner: null,
        isSimple: true
    },

    controller: 'linkingwindow',
    viewModel: {
        type: 'linkingwindow'
    },
    modal: true,
    cls: 'upload-form',
    height: 750,
    width: 1000,
    bodyStyle: {
        'background-color': '#ffffff'
    },
    ghost: true,
    maximizable: true,
    defaultListenerScope: true,

    layout: {
        type: 'border',
        padding: 20
    },
    bind: {
        title: '{linkWinTitle}'
    },
    items: [
        {
            xtype: 'treepanel',
            region: 'west',
            split: true,
            itemId: 'tree',
            width: 230,
            bodyBorder: false,
            hideHeaders: true,
            bind: {
                title: '{category}'
            }
        },
        {
            xtype: 'container',
            region: 'center',
            split: true,
            itemId: 'listContainer',
            style: 'border:1px solid #cecece',
            layout: 'fit',
            items: [
                {
                    xtype: 'gridpanel',
                    type: 'extra',
                    numOfItem: '30',
                    itemId: 'listForLink',
                    header: false,
                    title: 'Data list',
                    viewConfig: {
                        plugins: [
                            {
                                ptype: 'gridviewdragdrop',
                                ddGroup: 'gridData'
                            }
                        ]
                    },
                    columns: [
                        {
                            xtype: 'gridcolumn'
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'bottom',
                            itemId: 'pagingToolbar',
                            displayInfo: true,
                            items: [
                                {
                                    xtype: 'textfield',
                                    itemId: 'linkSearch',
                                    margin: '0 0 0 3',
                                    width: 100,
                                    fieldLabel: 'Label',
                                    hideLabel: true
                                },
                                {
                                    xtype: 'button',
                                    itemId: 'findLinkData',
                                    margin: '0 6 0 6',
                                    glyph: 'xf002@FontAwesome',
                                    listeners: {
                                        click: 'onFindLinkDataClick'
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        celldblclick: {
                            fn: 'onListForLinkCellDblClick',
                            scope: 'controller'
                        }
                    }
                }
            ]
        },
        {
            xtype: 'panel',
            getLinkData: function() {
                var value;
                if(!this.items) {
                    value = '';
                }
                else{
                    value = this.items.items;
                }
                return value;
            },
            region: 'south',
            height: 180,
            itemId: 'dropBox',
            scrollable: true,
            style: {
                'background-color': '#eeeeee',
                border: '1px solid #cecece'
            },
            layout: {
                type: 'hbox',
                align: 'middle'
            },
            dockedItems: [
                {
                    xtype: 'container',
                    dock: 'top',
                    height: 35,
                    itemId: 'header',
                    layout: {
                        type: 'hbox',
                        align: 'middle',
                        pack: 'end',
                        padding: '0 0 0 10'
                    },
                    items: [
                        {
                            xtype: 'label',
                            flex: 1,
                            margins: '0 0 0 8',
                            bind: {
                                text: '{dropHere}'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnRestLink',
                            bind: {
                                text: '{reset}'
                            },
                            listeners: {
                                click: 'onButtonClick'
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            width: 3
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnSaveClose',
                            bind: {
                                text: '{saveClose}'
                            },
                            listeners: {
                                click: 'onbtnSaveCloseClick'
                            }
                        }
                    ]
                }
            ],
            listeners: {
                render: {
                    fn: 'onDroipBoxRender',
                    scope: 'controller'
                }
            }
        }
    ],
    listeners: {
        beforerender: {
            fn: 'onWindowBeforeRender',
            scope: 'controller'
        }
    },

    onFindLinkDataClick: function(button, e, eOpts) {
        var val = button.up('pagingtoolbar').down('#linkSearch').getValue();
        var ctrl = getController('Main');
        var query = "&se_all=" + val;
        ctrl.getServerData('', query, button.up('pagingtoolbar').up('gridpanel'));
    },

    onButtonClick: function(button, e, eOpts) {
        var container = button.up('container').up('container');
        var dBox = container.queryById('dropBox');
        dBox.removeAll();
    },

    onbtnSaveCloseClick: function(button, e, eOpts) {
        var dropBox = button.up('#dropBox');
        var lnkWin = dropBox.up('window');
        var uploadWin = lnkWin.openner;
        if(uploadWin){
            /* in case upload or edit by new request */
            var luCon = uploadWin.down('#' + lnkWin.getItemId() + '_unitCon');
            for (var i=dropBox.getLinkData().length; i--; ) {
                luCon.add(dropBox.getLinkData()[i]);
            }
            lnkWin.close();

        }
        else{
            /* in case upload or edit by viewer */
            lnkWin.fireEvent('save');
        }
    }

});