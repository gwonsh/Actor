/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.controller.Main', {
    extend: 'Ext.app.Controller',

    refs: {
        listTab: '#listTab',
        mainView: '#mainView'
    },

    control: {
        "#listTab": {
            tabchange: 'onListTabTabChange'
        }
    },

    onListTabTabChange: function(tabPanel, newCard, oldCard, eOpts) {
        var me = this;
        var eastPanel = Ext.getCmp('eastPanel');
        if(newCard){
            //"내용" 말 변경
            if(newCard.cateOption.displayNameContent !== undefined) {
                loc.main.description = newCard.cateOption.displayNameContent;
            }
            else{
                loc.main.description = loc.main.contentTitle;
            }
            if(!newCard.cateOption.selectFirst){
                eastPanel.setTitle('');
                eastPanel.setCollapsed(true);
                Ext.getCmp('viewPanel').removeAll();
            }
            //check if it has permissions
            if(this.hasUserPermission('download')){
                Ext.getCmp('mainIconPanel').down('#btnDownload').setStyle({opacity:1, cursor:'pointer'});
            }
            else{
                Ext.getCmp('mainIconPanel').down('#btnDownload').setStyle({opacity:0.3, cursor:'default'});
            }
            if(this.hasUserPermission('write')){
                Ext.getCmp('mainIconPanel').down('#btnNew').setStyle({opacity:1, cursor:'pointer'});
            }
            else{
                Ext.getCmp('mainIconPanel').down('#btnNew').setStyle({opacity:0.3, cursor:'default'});
            }
            if(this.hasUserPermission('write')){
                Ext.getCmp('mainIconPanel').down('#btnEdit').setStyle({opacity:1, cursor:'pointer'});
            }
            else{
                Ext.getCmp('mainIconPanel').down('#btnEdit').setStyle({opacity:0.3, cursor:'default'});
            }
            if(this.hasUserPermission('copy')){
                Ext.getCmp('mainIconPanel').down('#btnCopy').setStyle({opacity:1, cursor:'pointer'});
            }
            else{
                Ext.getCmp('mainIconPanel').down('#btnCopy').setStyle({opacity:0.3, cursor:'default'});
            }
            if(this.hasUserPermission('delete')){
                Ext.getCmp('mainIconPanel').down('#btnRemove').setStyle({opacity:1, cursor:'pointer'});
            }
            else{
                Ext.getCmp('mainIconPanel').down('#btnRemove').setStyle({opacity:0.3, cursor:'default'});
            }
            if(this.hasUserPermission('print')){
                eastPanel.down('#print').setStyle({opacity:1, cursor:'pointer'});
                eastPanel.down('#sendEmail').setStyle({opacity:1, cursor:'pointer'});
            }
            else{
                eastPanel.down('#print').setStyle({opacity:0.3, cursor:'default'});
                eastPanel.down('#sendEmail').setStyle({opacity:0.3, cursor:'pointer'});
            }
            if(this.hasUserPermission('download')){
                eastPanel.down('#slideShow').setStyle({opacity:1, cursor:'pointer'});
            }
            else{
                eastPanel.down('#slideShow').setStyle({opacity:0.3, cursor:'default'});
            }
            if(this.hasUserPermission('write')){
                Ext.getCmp('icoEditable').setStyle({opacity:1, cursor:'pointer'});
            }
            else{
                Ext.getCmp('icoEditable').setStyle({opacity:0.3, cursor:'default'});
            }

            var grid = newCard.getGrid();
            var selected = grid.getSelectionModel().getSelection()[0];

            if(newCard.isMessage){
                /* hide comment panel*/
                Ext.getCmp('commentPanel').setHidden(true);
                //     this.getMainView().down('#mainBtnMessage').setTooltip(loc.message.sendingMessage);
                //     mainCtr.setMemberMenuPermission();
                var msgStore = newCard.getStore();
                if(selected){
                    var selectedIndex = msgStore.findExact('idx', selected.get('idx'));
                    var selectedItem = msgStore.getAt(selectedIndex);
                    newCard.fireEvent('itemclick', newCard, selectedItem, newCard.el.dom.innerHTML, 0);//이전 선택된 데이터 표시

                }
                else{
                    var fstData = msgStore.first();
                    newCard.fireEvent('itemclick', newCard, fstData, newCard.el.dom.innerHTML, 0);//최초 첫번째 데이터 표시
                }
                return;
            }

            Ext.getCmp('commentPanel').setHidden(false);
            Ext.getCmp('commentPanel').setCollapsed(true);

            var tree = Ext.getCmp('categoryTree');
            if(newCard.cateOption.useColorway){
                me.getMainView().getViewModel().setData({useColorway:true});
            }
            else{
                me.getMainView().getViewModel().setData({useColorway:false});
            }
            if(newCard.cateOption.useMapping){
                me.getMainView().getViewModel().setData({useMapping:true});
            }
            else{
                me.getMainView().getViewModel().setData({useMapping:false});
            }
            if(newCard.cateOption.cloneCategory !== undefined){
                Ext.getCmp('mainIconPanel').down('#btnNew').setHidden(true);
                Ext.getCmp('mainIconPanel').down('#mainBtnGroup').setDisabled(true);
                Ext.getCmp('mainIconPanel').down('#mainBtnComapre').setHidden(false);
                if(newCard.parentName !== undefined){
                    Ext.toast(grid.parentName + loc.main.connectedCategory);
                }
            }
            else{
                Ext.getCmp('mainIconPanel').down('#btnNew').setHidden(false);
                Ext.getCmp('mainIconPanel').down('#mainBtnGroup').setDisabled(false);
                Ext.getCmp('mainIconPanel').down('#mainBtnComapre').setHidden(true);
            }
            //자료비교 버튼 show/hidden
            if(newCard.cateOption.clone || newCard.cateOption.cloneCategory !== undefined){
                Ext.getCmp('mainIconPanel').down('#mainBtnComapre').setHidden(false);
            }
            else{
                Ext.getCmp('mainIconPanel').down('#mainBtnComapre').setHidden(true);
            }
            //expand category item according to the selected shortcut
            var node = tree.getStore().findNode('id', newCard.categoryId);
            me.getMainView().getViewModel().setData({numOfItem:newCard.numOfItem});
            if(node){
                node.expand();
                tree.getSelectionModel().select(node);
            }
            if(newCard.type == 'colorChip') {
                me.getMainView().getViewModel().setData({isColorChip:true});
            }
            else{
                me.getMainView().getViewModel().setData({isColorChip:false});
            }
            if(newCard.type == 'gallery') {
                me.getMainView().getViewModel().setData({isGallery:true});
            }
            else{
                me.getMainView().getViewModel().setData({isGallery:false});
            }
            ///////////////////
            // visable chart //
            ///////////////////
            if(newCard.type == 'text' && newCard.type == 'normal' && newCard.getStore().getGroupField() !== ''){
                if(newCard.sumFields.length > 0){
                    me.getMainView().getViewModel().setData({needSum:true});
                }
                else{
                    me.getMainView().getViewModel().setData({needSum:false});
                }
            }
            else{
                me.getMainView().getViewModel().setData({needSum:false});
            }
            me.getListTab().setActiveItem(newCard);
            newCard.fireEvent('listcomplete', newCard.categoryId, newCard);

            if(selected){//for grid data that has already loaded
                me.viewDocument(selected, newCard.title, newCard.formMode); // 이미 불러졌던 tab이면 이전 선택됐던 item 자동 클릭
            }
            else{//for nothing has been selected, select first record dynamically
                newCard.on('listcomplete', function onListComplete(categoryId, card){
                    card.un('listcomplete', onListComplete);
                    var grid = card.getGrid();
                    if(grid.store){
                        var record = grid.store.getRange(0, 0)[0];
                        if(record){
                            var bdIdx = record.get('bd_idx');
                            if(currentPlugin == 'workGroup' || currentPlugin == 'salesGroup' || currentPlugin == 'projectGroup'){
                                //onActivityGridItemClick()에서 처리
                                return;
                            }
                            if(grid.type !== undefined){//for text or normal type of grid
                                if(window.innerWidth > 1600){//모니터 충분히 크면
                                    if(newCard.cateOption.selectFirst === undefined) newCard.cateOption.selectFirst = true;
                                    if(newCard.cateOption.selectFirst){
                                        grid.fireEvent('itemclick', grid, record, grid.el.dom.innerHTML, 0);//최초 첫번째 데이터 표시
                                        grid.setSelection(record);//자동으로 선택 표시
                                    }
                                    else{

                                    }
                                }

                            }
                            else{//for gallary type of grid
                                if(window.innerWidth > 1600){
                                    grid.fireEvent('itemclick', grid, grid.getSelectionModel().getLastSelected());
                                    grid.selModel.select(grid.store.getAt(0));
                                }
                            }
                        }
                    }
                });
            }

        }
    },

    getGrid: function(cId, gridType, title, params, prefix) {
        if(gridType == 'text' || gridType == 'normal'){
            isGrid = true;
        }
        var me = this;
        // var types = ['normal', 'text', 'schedule', 'colorChip'];
        // var vm = this.getMainView().getViewModel();
        // for (var i=0; i<types.length; i++){
        //     if(types[i] == gridType){
        //         vm.data['display' + types[i]] = true;
        //     }
        //     else{
        //         vm.data['display' + types[i]] = false;
        //     }
        // }
        if(!cId || cId === '') return;
        var grid;
        if(gridType === undefined || gridType == 'null') gridType = 'normal';
        if(params === undefined) params = '';
        var itemIndex; //indexo of current grid in listTab

        if(!prefix){
            prefix = 'mainGrid';
        }
        var existGrid = Ext.getCmp(prefix + '_' + cId);
        if(existGrid){
            var oldType = existGrid.type;
            if(oldType == gridType){
                return existGrid;
            }
            else{
                itemIndex = me.getListTab().items.items.indexOf(existGrid);
                existGrid.destroy();

            }
        }
        if(gridType == 'normal'){
            //* create grid for server data */
            grid = Ext.create(appName + '.view.GridNormal', {
                id:prefix + '_' + cId,
                listMode:'detail',
                sumFields:[],
                cls:'mainGrid',
                dockedItems:[me.getPageToolbar(cId)],
                features: [{
                    ftype: 'groupingsummary'
                }]
            });
        }
        if(gridType == 'text'){
            //* create grid for server data */
           var  grid = Ext.create(appName + '.view.GridText', {
                id:prefix + '_' + cId,
                listMode:'detail',
                sumFields:[],
                cls:'mainGrid',
                dockedItems:[me.getPageToolbar(cId)],
                features: [{
                    ftype: 'groupingsummary'
                }]
            });
        }
        if(gridType == 'gallery'){
            //* create grid for server data */
            grid = Ext.create(appName + '.view.GridGallery', {
                id:prefix + '_' + cId,
                dockedItems:[me.getPageToolbar(cId)]
            });
        }

        if(gridType == 'schedule'){
            //* create grid for server data */
            grid = Ext.create(appName + '.view.GridSchedule', {
                id:prefix + '_' + cId,
                dockedItems:[me.getPageToolbar(cId)]
            });
        }
        if(gridType == 'colorChip'){
            grid = Ext.create(appName + '.view.GridColorChip', {
                id:prefix + '_' + cId,
                dockedItems:[me.getPageToolbar(cId)]
            });
        }
        grid.setConfig({
            categoryId:cId,
            itemIndex:itemIndex,
            params:params,
            title:title,
            type:gridType,
            getGrid:function(){
                if(grid.type == 'text' || grid.type == 'normal'){
                    return grid;
                }
                else{
                    return grid.down('#galleryView');
                }
            }
        });
        /* call category options */
        Ext.data.JsonP.request({
            url:getCategoryViewApi(cId),
            success:function(response){
                var record;
                var options = getOption(response.ca_option);
                if(response.ca_id === undefined){//지워진 카테고리 -> 바로가기 삭제
                    record = Ext.data.Record.create([
                        {name:'id'}
                    ]);
                    record.set({
                        id:cId
                    });
                    Ext.toast(loc.error.noCategory);
                    getController('Config').addDelShortcut(record, 'del');
                    setTimeout(function(){document.location.href = 'index.html';}, 1000);
                    return;
                }
                //set category options
                if(options.formMode === undefined){
                    options.formMode = defaultFormName;
                }
                grid.cateOption = options;
                grid.cloneCategory = options.cloneCategory;
                grid.categoryInfo = response;
                grid.formMode = options.formMode;
                config.option = options;
                grid.numOfItem = response.ca_page_row;
                grid.fireEvent('categoryoptionupdate', grid);
                if(response.ca_subject_title !== ''){
                    grid.subjectTitle = response.ca_subject_title;
                }

                if(options.cloneCategory !== undefined){//load source category information in case of clone category
                    Ext.data.JsonP.request({
                        url:getCategoryViewApi(options.cloneCategory),
                        success:function(response){
                            grid.parentOption = getOption(response.ca_option);
                            grid.parentName = (grid.parentOption.categoryName !== undefined)? grid.parentOption.categoryName : response.ca_name;
                            Ext.toast(grid.parentName + loc.main.connectedCategory);
                        }
                    });
                }

                //shortcut의 제목, 레이아웃 또는 아이콘이 변경 됐는지를 체크하여 발견 되면 자동 업데이트
                if(currentPlugin === ''){
                    for(var i=0; i<shortcuts.length; i++){
                        if(shortcuts[i].caId == cId){
                            var cNameDif = false;
                            var cName;
                            if(options.categoryName !== undefined){
                                cName = options.categoryName;
                            }
                            else{
                                cName = response.ca_name;
                            }
                            //when the category name has been changed
                            if(shortcuts[i].caName != cName){
                                cNameDif = true;
                            }
                            if(options.icon === undefined) options.icon = 'folder-o';//기본아이콘으로 설정 된 경우
                            if(options.colorChip) response.ca_layout = 4;
                            if(options.schedule) response.ca_layout = 3;
                            record = Ext.data.Record.create([
                                {name:'id'}, {name:'title'}, {name:'layout'}, {name:'icon'}, {name:'isWork'}
                            ]);
                            record.set({
                                id:cId,
                                title:cName,
                                layout:response.ca_layout,
                                icon:options.icon,
                                isWork:shortcuts[i].isWork
                            });
                            if(cNameDif || shortcuts[i].displayType != response.ca_layout || shortcuts[i].icon != options.icon){
                                getController('Config').addDelShortcut(record, 'edit');
                            }
        //                     if(!options.actor){
        //                         getController('Config').addDelShortcut(record, 'del');
        //                     }
                        }
                    }
                }
            }
        });
        return grid;
    },

    setGrid: function(grid) {
        var me = this;
        if(!grid){return;}
        if(grid.categoryInfo === undefined){
            grid.on('categoryoptionupdate', function onGridReady(){
                grid.un('categoryoptionupdate', onGridReady);
                me.displayGrid(grid);
            });
        }
        else{
            me.displayGrid(grid);
        }
    },

    displayGrid: function(grid, doAdd) {
        var me = this;
        var cId = grid.categoryId;
        var gridType = grid.type;
        var isBoard = grid.isBoard;
        var itemIndex = grid.itemIndex;
        if(doAdd === undefined) doAdd = true;
        var existGrid = Ext.getCmp('mainGrid_' + cId);

        /* same grid already exists just set active tab */
        if(me.getListTab().items.items.indexOf(grid) != -1){
            me.getListTab().setActiveTab(existGrid );
            me.getMainView().fireEvent('categoryoptionupdate');
            return;
        }
        var list = grid.getGrid();
        me.getMainView().getViewModel().setData({needSum:false});
        ////////////////////////////
        // when grouping by field //
        ////////////////////////////
        if(grid.sumFields !== undefined){
            grid.on('groupchange', function(store, grouper, eOpts){
                ///////////////////
                // visable chart //
                ///////////////////
                if(grouper === null){
                    me.getMainView().getViewModel().setData({needSum:false});
                }
                else{
                    me.getMainView().getViewModel().setData({needSum:false});
                    if(grid.sumFields.length > 0){
                        me.getMainView().getViewModel().setData({needSum:true});
                    }
                    else{
                        me.getMainView().getViewModel().setData({needSum:false});
                    }
                }
            });
        }
        ///////////////////////////
        // click one of the list //
        ///////////////////////////
        list.on('itemclick', function(dataview, record, item, index, e, eOpts){
            if(!record) return;//in case of Gallery form mode at very first time only
            record.set('ca_id', cId);//update category Id in case clone category
            me.getMainView().getViewModel().setData({currentRecord:record});
            if(e){
                if(e.target){
                    if(Ext.get(e.target).getId().indexOf('viewAttached_') !== -1){
                        me.previewAttached(record, e);
                        return;
                    }
                }
            }
            //     if(e){//check if click on icon that to display the attached file list
            //         if(e.target){
            //             var clsLst = Ext.get(e.target).dom.classList.value;
            //             if(clsLst){
            //                 if(clsLst.indexOf('show-attach-list') != -1){
            //                     return;
            //                 }
            //             }
            //         }
            //     }
            if(!sessionId){
                alert(loc.error.noSession);
                return;
            }

            //if it needs to make a list of viewed person
            if(record.get('isViewed') !== null){//in case of checkby is used for current category
                var val = record.get('checkedby');
                if(!record.get('isViewed')){//has not seen
                    if(dataview.type !== undefined){ //text or normal type of grid
                        //hide viewed icon when click
                        if(dataview.el.select('.x-grid-item').elements[index]){
                            var viewedIco = dataview.el.select('.x-grid-item').elements[index].querySelector('i.check-read');
                            viewedIco.style.display = 'none';
                        }
                        if(isBoard){
                            var btn = Ext.getCmp('btnBoard_' + cId);
                            me.updateUnRead(btn, grid.getStore());
                        }
                    }
                    //grid.checkedbyIdx : getDataFields() 에서 지정
                    if(val === ''){
                        val = sessionId;
                    }
                    else{
                        val += ',' + sessionId;
                    }
                    var query = '?bd_idx='+record.get('bd_idx')+'&cols_idx='+grid.checkedbyIdx+'&data_val=' + val;
                    Ext.data.JsonP.request({
                        url:domain + '/binder/expDataUpdate' + query
                    });
                }
            }
            if(dataview.type !== undefined){//remove me from mustsee buttns if exists for text or normal type of grid
                if(Ext.get(dataview.el.select('.x-grid-item').elements[index]) !== null){
                    var mustseeBtns = Ext.get(dataview.el.select('.x-grid-item').elements[index]).select('#'+sessionId).elements;
                    if(mustseeBtns.length !== 0){
                        mustseeBtns[0].style.display = 'none';
                    }
                }
            }
            me.viewDocument(record, grid.title, grid.formMode, index);
            /* load linked categories */
            if(currentPlugin !== '' && !grid.isLinked){
                var i;
                var tabs = me.getListTab().items.items;
                var len = tabs.length;
                var entries = [];
                for(i=0; i<tabs.length; i++){
                    if(tabs[i].isLinked) entries.push(tabs[i]);
                };
                for(i=0; i<entries.length; i++){
                    entries[i].destroy();
                }
                entries = [];
                if(record.get('idlinked') !== '' && record.get('idlinked') !== null && record.get('idlinked') !== undefined){
                    var lnkInfos = record.get('idlinked').split('，');
                    var cates = [];
                    var count = 0;
                    for(i=0; i<lnkInfos.length; i++){
                        var objs = lnkInfos[i].split('＠');
                        cates.push({cId:objs[1], title:objs[0]});
                        var tabTitle = '<i style="color:#5e93bb;margin-right:8px" class="fa fa-link" aria-hidden="true"></i>'+record.get('bd_subject')+'-'+objs[0];
                        var lkGrid = me.getGrid(objs[1], 'normal', tabTitle);
                        lkGrid.isLinked = true;
                        lkGrid.on('categoryoptionupdate', function onCategoryUpdate(targetGrid){
                            targetGrid.un('categoryoptionupdate', onCategoryUpdate);
                            me.displayGrid(targetGrid, false);
                            me.getListTab().add(targetGrid);
                        });
                    }

                }
            }

        });
        grid.params = {};
        if(grid.type == 'normal' || grid.type == 'text'){
            grid.on('afterrender', function(c){
                var menu = c.headerCt.getMenu();
                var menuItem = menu.add({
                    text: loc.search.fieldSearch,
                    iconCls:'fa fa-search',
                    handler: function(mi) {
                        var cif = mi.colsInfo;
                        var clone = (grid.cloneCategory === undefined)? false : true;
                        if(cif !== undefined){//when header has cols information(given by getGridColumns())
                            var menu = Ext.create('Ext.menu.Menu');
                            if(cif.cols_type == 'radio' || cif.cols_type == 'select' || cif.cols_type == 'check'){
                                Ext.Array.each(cif.cols_data, function(entry){
                                    var item = {
                                        text:entry,
                                        listeners:[
                                            {
                                                click:function(item, e){
                                                    var store = grid.getStore();
                                                    store.currentPage = 1;
                                                    var idx = getController('Search').getSearchIdx(cif.cols_idx);
                                                    var obj = grid.params;
                                                    obj.ca_id = grid.categoryId;
                                                    obj['se_data_'+idx] = item.text;
                                                    grid.params = obj;
                                                    var query = '&ca_id=' + grid.categoryId + '&se_data_'+idx+'='+encodeURIComponent(item.text);
                                                    getController('Search').search(query, store, clone);
                                                }
                                            }
                                        ]
                                    };
                                    menu.add(item);
                                    menu.showAt(mi.up('menu').activeHeader.getX(), mi.up('menu').activeHeader.getY());
                                });
                            }
                            else if(cif.cols_type == 'colorchk'){
                                Ext.Array.each(cif.cols_data, function(entry, index){
                                    var margin = '0 0 0 0';
                                    if(index === 0){
                                        margin = '10 0 0 0';
                                    }
                                    var html = '<div style="float:left;width:13px;height:13px;background-color:'+entry[1]+'"></div>';
                                    html += '<span style="float:left;margin-left:3px">' + entry[0] + '</span';
                                    var item = {
                                        xtype:'button',
                                        ui: 'plain-toolbar-small',
                                        textAlign:'left',
                                        height:25,
                                        margin:margin,
                                        value: entry[2],
                                        html:html,
                                        handler:function(button){
                                            var idx = getController('Search').getSearchIdx(cif.cols_idx);
                                            var store = grid.getStore();
                                            store.currentPage = 1;
                                            var obj = grid.params;
                                            obj.ca_id = grid.categoryId;
                                            obj['se_data_'+idx] = button.value.toString();
                                            grid.params = obj;
                                            var query = '&ca_id=' + grid.categoryId + '&se_data_'+idx+'='+encodeURIComponent(button.value.toString());
                                            getController('Search').search(query, store, clone);
                                            menu.destroy();
                                        }
                                    };
                                    menu.add(item);
                                });
                                menu.showAt(mi.up('menu').activeHeader.getX(), mi.up('menu').activeHeader.getY());

                            }
                            else if(cif.cols_type == 'textarea' || cif.cols_type == 'datagrp' || cif.cols_type == 'text' || cif.cols_type == 'dbtext' || cif.cols_type == 'number' || cif.cols_type == 'dbl_select' || cif.cols_type == 'url'){
                                var item = Ext.create('Ext.form.field.Text',{
                                    xtype:'textfield',
                                    width:120,
                                    margin:5,
                                    listeners:[
                                        {
                                            render:function(textfield){
                                                textfield.el.on('keyup', function(e){
                                                    if(e.keyCode == 13){
                                                        var idx = getController('Search').getSearchIdx(cif.cols_idx);
                                                        var store = grid.getStore();
                                                        store.currentPage = 1;
                                                        var query = '&ca_id=' + grid.categoryId + '&se_data_'+idx+'='+item.getValue();
                                                        var obj = grid.params;
                                                        obj.ca_id = grid.categoryId;
                                                        obj['se_data_'+idx] = item.getValue();
                                                        grid.params = obj;
                                                        getController('Search').search(query, store, clone);
                                                        menu.destroy();
                                                    }
                                                });
                                            }
                                        }
                                    ]
                                });
                                menu.add(item);
                                menu.showAt(mi.up('menu').activeHeader.getX(), mi.up('menu').activeHeader.getY());
                            }

                        }
                    }
                });
                menu.on('beforeshow', function(a,b){
                    var currentDataIndex = menu.activeHeader.dataIndex;
                    menuItem.colsInfo = menu.activeHeader.colsInfo;

                });
            });
        }
        if(doAdd){//in case of mainGrid
            if(itemIndex !== undefined){
                me.getListTab().insert(itemIndex, grid);
            }
            else{
                me.getListTab().add(grid);
            }
            me.getListTab().setActiveTab(grid );
        }

        var params = '&ca_id=' + cId;
        //설정에 자기 올린 자료만 보기가 설정 된 경우
        var optOnlyOwner = grid.cateOption.onlyOwner;
        if(optOnlyOwner){
            //보안상 sessionId가 혹시 문제 있으면  얼른 return
            if(sessionId === undefined || sessionId === null || sessionId === '') return;
            if(userInfo.nv_level != 10){//except superviser
                params += '&se_user_id='+ sessionId;
            }
        }
        if(grid.cloneCategory !== undefined){
            params += '&c=clone';
        }
        me.getServerData(cId, params, grid);
    },

    getPageToolbar: function(cId, title) {
        var me = this;
        var pageToolbar = Ext.create('Ext.toolbar.Paging', {
            dock: 'top',
            height:45,
            displayInfo: true,
            cls:'gridToolbar',
            displayMsg: 'Data {0} - {1} of {2}',
            items: [
                {
                    xtype: 'tbseparator'
                },
                ///////////
                // 목록수 //
                ///////////
                {
                    xtype: 'numberfield',
                    itemId:'fdNumOfLst',
                    fieldLabel: '목록수',
                    width:90,
                    labelWidth:45,
                    bind:{
                        value:'{numOfItem}'
                    },
                    listeners:[
                        {
                            render:function(field, e){
                                var trigger = field.el.select('.x-form-trigger-default').elements[0];
                                Ext.get(trigger).hide();
                                field.el.dom.setAttribute('title', loc.config.itemListNum);
                                field.el.on('keyup', function(e){
                                    if(e.keyCode == 13){
                                        var val = field.up('pagingtoolbar').down('#fdSearchAll').getValue();
                                        var query = '&ca_id='+ cId + '&se_all=' + val ;
                                        var store = Ext.getStore('dStore_' + cId);
                                        store.setPageSize(field.getValue());
                                        store.currentPage = 1;
                                        if(store.terms){
                                            if(store.terms.se_sdate === undefined) store.terms.se_sdate = '';
                                            if(store.terms.se_edate === undefined) store.terms.se_edate = '';
                                            query += '&se_sdate=' + store.terms.se_sdate + '&se_edate=' + store.terms.se_edate;
                                        }
                                        getController('Search').search(query, store);
                                    }
                                });
                            }
                        }
                    ]
                },
                {
                    xtype: 'tbseparator'
                },
                ///////////
                // 검색어 //
                ///////////
                {
                    xtype: 'textfield',
                    itemId:'fdSearchAll',
                    fieldLabel: 'Label',
                    hideLabel: true,
                    width:125,
                    listeners:[
                        {
                            render:function(field, e){
                                field.el.on('keyup', function(e){
                                    if(e.keyCode == 13){
                                        field.up('pagingtoolbar').down('#findIt').fireEvent('click', field.up('pagingtoolbar').down('#findIt'));
                                    }
                                });
                            }
                        }
                    ]
                },
                ///////////
                // 리셋  //
                ///////////
                {
                    xtype: 'button',
                    width:23,
                    height:35,
                    handler: function(button, e) {
                        var fd = button.up('pagingtoolbar').down('#fdSearchAll');
                        var iid = 'dStore_' + cId;
                        var store = Ext.getStore(iid);
                        store.terms = null;
                        store.clone = false;
                        fd.setValue('');
                    },
                    itemId: 'clearField',
                    glyph: 'xf00d@FontAwesome',
                    tooltip:loc.menu.clear
                },
                /////////////
                // 검색버튼 //
                /////////////
                {
                    xtype:'button',
                    height:35,
                    glyph: 'xf002@FontAwesome',
                    tooltip:loc.search.search,
                    itemId:'findIt',
                    /* serach data from selected category */
                    listeners:{
                        click:function(button, a){
                            //initialize params for multi search
                            var store = Ext.getStore('dStore_' + cId);
                            var val = button.up('pagingtoolbar').down('#fdSearchAll').getValue();
                            var query = '&ca_id='+ cId + '&se_all=' + encodeURIComponent(val) ;
                            var clone = (Ext.getCmp('mainGrid_' + cId).cloneCategory !== undefined)? true : false;
                            if(clone && val.trim() === ''){
                                clone = false;
                                query += '&c=clone';
                            }
                            getController('Search').search(query, store, clone);
                        }
                    }
                },
                ////////////////
                // 상세검색버틑 //
                ////////////////
                {
                    xtype: 'button',
                    height:35,
                    width:23,
                    glyph: 'xf00e@FontAwesome',
                    tooltip:loc.search.detailSearch,
                    handler:function(button){
                        //initialize params for multi search
                        var iid = 'dStore_' + cId;
                        var store = Ext.getStore(iid);
                        /* to avoid searching by current page set to the first page */
                        store.currentPage = 1;
                        var clone = false;
                        if(Ext.getCmp('mainGrid_' + cId).cloneCategory !== undefined){
                            clone = true;
                        }
                        getController('Search').openSearchWindow(cId, store, undefined, clone);
                    }
                },
                {
                    xtype: 'button',
                    height:35,
                    width:23,
                    itemId:'btnFindByColorRange',
                    glyph: 'xf00e@FontAwesome',
                    bind:{
                        hidden:'{!isColorChip}'
                    },
                    listeners:{
                        render:function(button){
                            button.el.select('.x-btn-icon-el').elements[0].style.color = '#FFC017';
                            button.setTooltip(loc.search.findSimilar);
                        }
                    },
                    handler:function(button){
                        var selected = Ext.getCmp('mainGrid_' + cId).getSelectionModel().getSelection()[0];
                        var cVal;
                        if(selected) cVal = selected.get('idcolorHex');
                        //show color if one of color selected
                        getController('Search').findSimilarColor(cId, cVal);
                    }
                },
                {
                    xtype:'combo',
                    itemId:'colorSortCombo',
                    store:Ext.create('Ext.data.Store',{
                        field:['name', 'index'],
                        data:[
                            {name:'None', index:0},
                            {name:'Luminance', index:1},
                            {name:'Temperature', index:2}
                        ]
                    }),
                    bind:{
                        hidden:'{!isColorChip}'
                    },
                    displayField: 'name',
                    valueField:'index',
                    queryMode:'local',
                    width:110,
                    listeners:{
                        change:function(combo, value){
                            var gridStore =  Ext.getStore('dStore_' + cId);
                            if(value === 0){
                                gridStore.sorters.clear();
                                gridStore.load();
                            }
                            else if(value == 1){
                                gridStore.sort('idluminance', 'DESC');
                            }
                            else{
                                gridStore.sort('idtemperature', 'DESC');
                            }
                        }
                    }
                }
            ]
        //     search:function(query, clone){
        //         if(clone){
        //             if(this.down('#fdSearchAll').getValue() === ''){//to restore grid that is search by empty value
        //                 query += '&c=clone';
        //                 pageToolbar.search(query);
        //             }
        //             else{
        //                 Ext.create('Ext.window.Window', {
        //                     padding:20,
        //                     width:460,
        //                     title:loc.search.searchOption,
        //                     items:[
        //                         {
        //                             xtype: 'radiogroup',
        //                             // Arrange radio buttons into two columns, distributed vertically
        //                             columns: 2,
        //                             items: [
        //                                 {
        //                                     boxLabel: loc.search.fromSourceCategory+'<span style="color:#678fcd">'+Ext.getCmp('mainGrid_' + cId).parentName+'</span>',
        //                                     name: 'rb',
        //                                     inputValue: '1'
        //                                 },
        //                                 { boxLabel: loc.search.fromEdited, name: 'rb', inputValue: '2', checked: true},
        //                             ]
        //                         },
        //                         {
        //                             xtype:'container',
        //                             width:'100%',
        //                             docked:'bottom',
        //                             items:[
        //                                 {
        //                                     xtype:'button',
        //                                     text:loc.search.search,
        //                                     width:100,
        //                                     style:'float:right',
        //                                     listeners:{
        //                                         click:function(button){
        //                                             var value = button.up('window').down('radiogroup').getValue();
        //                                             if(value.rb == 1){
        //                                                 query += '&c=clone';
        //                                                 pageToolbar.clone = true;
        //                                                 pageToolbar.search(query);
        //                                             }
        //                                             else{
        //                                                 pageToolbar.clone = false;
        //                                                 pageToolbar.search(query);
        //                                             }
        //                                             button.up('window').close();
        //                                         }
        //                                     }
        //                                 }
        //                             ]
        //                         }
        //                     ]
        //                 }).show();
        //             }
        //             return;
        //           }

        //         var num = pageToolbar.down('#fdNumOfLst').getValue();
        //         if(num === '' || num === null) num = basicSetting.numOfItem;
        //         var iid = 'dStore_' + cId;
        //         var store = Ext.getStore(iid);
        //         store.setPageSize(num);
        //         /* to avoid searching by current page set to the first page */
        //         store.currentPage = 1;
        //         getController('Search').search(query, store);
        //     }
        });
        return pageToolbar;
    },

    getServerData: function(cId, query, grid) {
        var me = this;
        /* get list order */
        if(grid.categoryInfo && grid.categoryInfo.ca_order){
            if(query.indexOf('ca_order') == -1){
                query += '&ca_order=' + grid.categoryInfo.ca_order;
            }
        }
        // query += '&se_data_3094=88&se_data_3094_method=intbet';
        // query += '&se_data_3095=104&se_data_3095_method=intbet';
        // query += '&se_data_3096=130&se_data_3096_method=intbet';

        Ext.data.JsonP.request({//get data to build grid colums and upload form
            url:getDataWriteApi(),
            params:{
                ca_id:cId,
                html:0
            },
            success:function(response){
                var colsList = response.categoryColsList;
                /* do not reload fStore by LinkingWindow */
                if(grid.getItemId() == 'mainGrid_' + cId || grid.usedBy == 'work'){
                    /* field store */
                    var fStore = Ext.getStore('fStore_' + cId);
                    if(fStore === undefined){
                        fStore = Ext.create(appName + '.store.FieldStore',{
                            storeId:'fStore_' + cId,
                            data:colsList,
                            defaultValues:[]
                        });
                        fStore.each(function(records){
                            fStore.defaultValues.push(records.get('data_val'));
                        });
                    }
                    grid.categoryColsList = colsList;
                }

                /* create fields that needs for store datalist store model */
                var isExtraType = (grid.type == 'extra')? true : false;
                if(!grid.type) grid.type = 'normal';
                //get fields for data store
                var flds = me.getDataFields(colsList, isExtraType, grid);
                /* store for grid */
                var dStore;
                dStore = Ext.create('Ext.data.Store', {
                    storeId:'dStore_' + cId,
                    fields: flds,
                    pageSize:grid.numOfItem,
                    proxy: {
                        type: 'jsonp',
                        url:getDataListByIdApi(query, true),
                        limitParam:'page_size',
                        reader: {
                            type: 'json',
                            rootProperty: 'binderList',
                            totalProperty: 'page.totCount'
                        }

                    },
                    listeners:{
                        load:function onDstoreLoad(store, records){
                            dStore.un('load', onDstoreLoad);
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // to update all of data at one time
        //                     var count = 0;
        //                     var colsIdx = 3096;
        //                     var update = function(query){
        //                         Ext.data.JsonP.request({
        //                             url:domain + '/binder/expDataUpdate' + query,
        //                             success:function(response){
        //                                 if(response.result){
        //                                     count += 1;
        //                                     if(count == store.getCount()){
        //                                         return;
        //                                     };
        //                                     var r = store.getAt(count);
        //                                     var hex = r.get('idcolorHex');
        //                                     if(hex.indexOf('#')) hex = '#' + hex;
        //                                     if(hex.length != 7) hex = '#ffffff';
        //                                     var lum = chroma(hex).luminance();
        //                                     var tem = chroma(hex).temperature();
        //                                     var rgb = chroma(hex).rgb();
        //                                     var rgb_r = rgb[0];
        //                                     var rgb_g = rgb[1];
        //                                     var rgb_b = rgb[2];
        //                                     var query = '?bd_idx='+r.get('bd_idx')+'&cols_idx='+colsIdx+'&data_val=' + rgb_b;
        //                                     setInterval(update(query), 1000);
        //                                 }
        //                             }
        //                         });
        //                     };
        //                     var r = store.getAt(0);
        //                     var hex = r.get('idcolorHex');
        //                     if(hex.indexOf('#')) hex = '#' + hex;
        //                     if(hex.length != 7) hex = '#ffffff';
        //                     var lum = chroma(hex).luminance();
        //                     var tem = chroma(hex).temperature();
        //                     var rgb = chroma(hex).rgb();
        //                     var rgb_r = rgb[0];
        //                     var rgb_g = rgb[1];
        //                     var rgb_b = rgb[2];
        //                     var query = '?bd_idx='+r.get('bd_idx')+'&cols_idx='+colsIdx+'&data_val=' + rgb_b;
        //                     update(query, count);
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            store.fields = flds;
                            /* do not excute by LinkingWindow, dataGroupWindow or so on */
                            if(grid.getItemId() == 'mainGrid_' + cId){
                                /* preload the upload window */
                                //                         getController('Post').onBtnNewClick(false);
                            }
                            /* apply store and dynamic columns to grid except gallery type */
                            if(grid.type == 'normal' || grid.type == 'text' || grid.type == 'extra'){
                                var smallThumbnail = false;
                                if(grid.cateOption === undefined){//grid from datagroup
                                    grid.cateOption = {};
                                }
                                if(grid.usedBy == 'work'){//list of a category that categoryCode:work in option
                                    smallThumbnail = true;
                                }
                                grid.reconfigure(dStore, me.getGridColumns(colsList, grid, false, smallThumbnail));
                            }
                            if(grid.type == 'gallery' || grid.type == 'colorChip'){
                                grid.down('#galleryView').setStore(dStore);
                            }
                            if(grid.type == 'schedule'){
                                if(grid.down('#galleryView').store.getCount() === 0){
                                    grid.down('#galleryView').setStore(dStore);
                                }
                                else{
                                    var fstFromRec = store.getAt(0).get('idfrom');
                                    var fstToRec = store.getAt(0).get('idfrom');
                                    if(!fstFromRec){
                                        Ext.Msg.alert('Alert', 'The "From" field is not configured for schedule category<br>Error code:106');
                                        return;
                                    }
                                    if(!fstToRec){
                                        Ext.Msg.alert('Alert', 'The "To" field is not configured for schedule category<br>Error code:106');
                                        return;
                                    }
                                }
                                me.getListTab().minFrom = store.min('idfrom');
                                me.getListTab().maxTo = store.max('idto');

                                //Cacluate progress status against to total period
                                var progressed = 0;
                                var tPeriod = 0;
                                for(var i=0; i<records.length; i++){
                                    var prgs = records[i].get('idpercent');
                                    var sDay = new Date(records[i].get('idfrom'));
                                    var eDay = new Date(records[i].get('idto'));
                                    var unitPeriod = eDay-sDay;
                                    tPeriod += unitPeriod;
                                    if(prgs === '') prgs = 0;
                                    progressed += unitPeriod * records[i].get('idpercent') / 100;
                                }
                                var tPrgPct = Math.round((progressed / tPeriod) * 100);
                                if(Ext.getCmp('workListPanel')){
                                    var wg = Ext.getCmp('workListPanel').down('#workGrid');
                                    if(wg){
                                        var selected = wg.getSelectionModel().getSelection()[0];
                                        selected.set('idpercent', tPrgPct);
                                    }
                                }
                            }
                            var pToolbar = grid.down('pagingtoolbar');
                            if(pToolbar) pToolbar.setStore(store);

                            /* update number of unread data */
                            if(grid.isBoard){
                                var bId = grid.categoryId;
                                var btn = Ext.getCmp('btnBoard_' + bId);
                                btn.unread = '';
                                me.updateUnRead(btn, store);

                            }
                            if(grid.cloneCategory !== undefined) store.clone = true;
                            setTimeout(function(){grid.fireEvent('listcomplete', cId, grid);}, 300);//meaning is, listing is complete;
                            me.getListTab().fireEvent('listcomplete', cId);//to be detected from onActivityGridItemClick

                        }
                    }
                });
                dStore.load();
            },
            failure:function(response){
                alert(loc.main.networkProblem);
            }

        });
    },

    /* Fields for data store */
    getDataFields: function(cols, isForExtra, grid) {
        var fields = [];
        //////* generating basic fields to use at store *//////

        /* approval field */
        fields.push({name:'approvalList'});
        /* title field */
        fields.push({name:'bd_subject'});
        /* common information of file */
        fields.push({name: 'bd_file'});
        /* registered data */
        fields.push({name: 'bd_regdate'});
        /* user name */
        fields.push({name: 'bd_name'});
        /* data index */
        fields.push({name: 'bd_idx'});
        /* user id */
        fields.push({name: 'mb_id'});
        /* colortag */
        fields.push({name: 'bd_colortag'});
        /* information of used fields */
        fields.push({name: 'bd_data'});
        /* reference */
        fields.push({name: 'bd_refer', convert:function(v){
            if(v === undefined || v === null || v == 'null'){
                v = '';
            }
            return v;
        }});
        /* receivers */
        fields.push({name: 'bd_reciever'});
        fields.push({name: 'bd_reader'});
        /* description field */
        fields.push({
            convert:function(v, rec){
                //v = v.replace(/\n/g, '<br>');
                return v;
            },
            name:'bd_content'
        });

        /* set path of thumbnail */
        fields.push({
            convert:function(v, rec){
                if(rec.data.bd_file !== undefined){
                    if(rec.data.bd_file.length > 0){
                        v = rec.data.bd_file[0].thumb_path + '/T';
                    }
                    else{
                        //* in case none of file uploaded */
                        v = 'resources/images/ico_noimage.gif';
                    }
                }
                else{
                    v = 'resources/images/ico_noimage.gif';
                }
                return v;
            },
            name: 'thumb_path'
        });

        /* set path for downloading */
        fields.push({
            convert: function(v, rec) {
                var fileInfo = rec.data.bd_file;
                var value;
                if(fileInfo !== undefined){
                    if(fileInfo.length > 0){
                        if(fileInfo[0].file_width !== 0){
                            /* in case file size is too big */
                            if(rec.data.file_width * rec.data.file_height > 4000000){
                                value = fileInfo[0].thumb_path;
                            }
                            else{
                                value = fileInfo[0].file_path;
                            }
                        }
                        else{
                            value = fileInfo[0].thumb_path;
                        }
                    }
                    else{
                        //파일없이 등록된 자료
                        value = 'resources/images/ico_noimage.gif';
                    }
                }
                else{
                    value = 'resources/images/ico_noimage.gif';
                }
                return value;
            },
            name: 'file_path'
        });

        /* if file is image, set image width */
        fields.push({
            convert: function(v, rec) {
                if(v === undefined) v = 0;
                return v;
            },
            mapping: 'bd_file[0].file_width',
            name: 'file_width'
        });

        /* if file is image, set image height */
        fields.push({
            convert: function(v, rec) {
                if(v === undefined) v = 0;
                return v;
            },
            mapping: 'bd_file[0].file_height',
            name: 'file_height'
        });

        /* file size */
        fields.push({
            convert: function(v, rec) {
                if(v === undefined){return 0;}
                if (v === 0) { return 0; }
                var e = Math.floor(Math.log(v) / Math.log(1024));
                return (v/Math.pow(1024, e)).toFixed(2)+' '+' KMGTP'.charAt(e)+'B';
            },
            mapping: 'bd_file[0].file_size',
            name: 'file_size'
        });

        //////* generating custom fields *//////
        var indexKey;
        Ext.Array.each(cols, function(item, index){
            var fType = 'auto';
            var fName = 'id' + item.cols_idx;
            var hidden = false;
            /* special name for request id */
            if(item.cols_type == 'idx'){
                fName = 'idx';
                indexFieldId = item.cols_idx; // save cols_idx of index key
                //to make normal one which is start with 'id' as well
                indexKey = item;
            }
            if(item.cols_type == 'date') fType = 'date';
            if(!isForExtra){//except for Linking window or so on...
                //field for add an entry who has seen this item
                if(item.cols_code == 'checkedby'){
                    fName  = item.cols_code;
                    //it needs to get cols_idx to save user ids to checkedby field(textarea)
                    if (grid === undefined) grid = getController('Main').getListTab().getActiveTab();
                    grid.checkedbyIdx = item.cols_idx;
                    //add toggle button for viwed or all to paging toolbar
                    var pTb = grid.down('pagingtoolbar');
                    if(!pTb.down('#viewUnread')){
                        pTb.insert(
                            pTb.items.items.length - 2,
                            {
                                xtype: 'button',
                                glyph:'xf003@FontAwesome',
                                width:23,
                                height:36,
                                margin:'4 0 0 0',
                                mode:false,
                                itemId:'viewUnread',
                                tooltip:loc.config.viewOrAll,
                                handler:function(button){
                                    if(!button.mode){
                                        grid.down('pagingtoolbar').getStore().reload();
                                        grid.down('pagingtoolbar').getStore().filter('isViewed', false);
                                        button.mode = true;
                                        button.setStyle('background-color', '#eeeeee');
                                    }
                                    else{
                                        grid.down('pagingtoolbar').getStore().clearFilter();
                                        button.mode = false;
                                        button.setStyle('background-color', 'transparent');
                                    }
                                }
                            }
                        );
                    }
                }
            }

            fields.push({
                type:fType,
                convert: function(v, rec) {
                    var value = '';
                    Ext.Array.each(v, function(entry, index){
                        if(entry.cols_idx == item.cols_idx){
                            var values = [];
                            if(item.cols_type == 'colorchk'){//for normal colorchk field
                                value = [];
                                if(entry.data_val !== ''){
                                    values = entry.data_val.split(',');
                                    Ext.Array.each(values, function(entry){
                                        value.push(entry.trim().split('||'));
                                    });
                                }
                            }
                            else if(item.cols_type == 'date'){
                                if(localLanguage == 'English'){
                                    value = Ext.util.Format.date(entry.data_val, 'm-d-Y');
                                }
                                else{
                                    value = Ext.util.Format.date(entry.data_val, 'Y-m-d');
                                }
                            }
                            else if(item.cols_type == 'color256'){
                                var html = '';
                                values = entry.data_val.split(',');
                                Ext.Array.each(values, function(entry){
                                    var c256 = 'float:left;width:20px;height:20px;background-color:' + entry.trim();
                                    html += '<div style="'+c256+'"></div>';
                                });
                                value = html;
                            }
                            //                                         else if(item.cols_code == 'image'){
                            //                                             value = '<div style="height:72px;background-size:c;background-image:url('+entry.data_val+')"></div>';
                            //                                         }
                            else{
                                value = entry.data_val;
                            }
                            /* add cols_type to recode.bd_data */
                            entry.cols_type = item.cols_type;
                        }
                    });
                    if(item.cols_type == 'number')  value = Number(value);
                    return value;
                },
                mapping:'bd_data',
                name: fName
            });
            /* cols_code 가 있는 경우 별토의 record set
            하나씩 더 추가*/
            if(item.cols_code !== '' && item.cols_code !== undefined && item.cols_code !== null){
                fields.push({
                    type:fType,
                    convert: function(v, rec) {
                        var value = '';
                        Ext.Array.each(v, function(entry, index){
                            if(entry.cols_idx == item.cols_idx){
                                var values = [];
                                if(item.cols_type == 'colorchk'){//for normal colorchk field
                                    value = [];
                                    if(entry.data_val !== ''){
                                        values = entry.data_val.split(',');
                                        Ext.Array.each(values, function(entry){
                                            value.push(entry.trim().split('||'));
                                        });
                                    }
                                }
                                else if(item.cols_type == 'date'){
                                    if(localLanguage == 'English'){
                                        value = Ext.util.Format.date(entry.data_val, 'm-d-Y');
                                    }
                                    else{
                                        value = Ext.util.Format.date(entry.data_val, 'Y-m-d');
                                    }
                                }
                                else if(item.cols_type == 'color256'){
                                    var html = '';
                                    values = entry.data_val.split(',');
                                    Ext.Array.each(values, function(entry){
                                        var c256 = 'float:left;width:20px;height:20px;background-color:' + entry.trim();
                                        html += '<div style="'+c256+'"></div>';
                                    });
                                    value = html;
                                }
                                else{
                                    value = entry.data_val;
                                }
                                /* add cols_type to recode.bd_data */
                                entry.cols_type = item.cols_type;
                            }
                        });
                        if(item.cols_type == 'number')  value = Number(value);
                        return value;
                    },
                    mapping:'bd_data',
                    name: 'id' + item.cols_code
                });
            }

            /* add for graphical colorchk */
            if(item.cols_type == 'colorchk'){//
                fields.push({
                    convert: function(v, rec) {
                        var value = [];
                        value = rec.get(fName);
                        var val = '';
                        Ext.Array.each(value, function(entry){
                            val += '<div style="float:left;height:100%;margin-right:5px;">';
                            val += '<div style="float:left;background-color:' + entry[0] + ';width:3px;height:12px;margin:3px 0 0 0"></div>';
                            val += '<div style="float:left;margin:0 0 0 3px">' + entry[1] +'</div>';
                            val += '</div>';
                        });
                        if(value.length === 0) val = '';
                        return val;
                    },
                    name: 'visibleColorchk' + item.cols_idx
                });
            }
        });
        //check if item was viewed
        fields.push({
            convert: function(v, rec) {
                if(rec.get('checkedby') === undefined){
                    v= null;//no need to use for current category
                }
                else{
                    var iDs = rec.get('checkedby').split(',');
                    if(iDs.indexOf(userInfo.nv_id) === -1){
                        v = false;//never been checked
                    }
                    else{
                        v = true;//checked
                    }
                }
                return v;
            },
            name:'isViewed'
        });
        if(indexKey !== undefined){
            fields.push({
                name:'id'+indexKey.cols_idx,
                convert:function(v, rec){
                    return rec.get('idx');
                }
            });
        }
        return fields;
    },

    getGridColumns: function(cols, grid, disableCheckedBy, smallThumbnail) {
        var me = this;
        var columns = [];
        var fx = 0;
        var gridType = grid.type;
        var hideBasicInfo = false;
        if(grid.categoryInfo){
            if(grid.categoryInfo.ca_info_view == 1){
                hideBasicInfo = false;
            }
            else{
                hideBasicInfo = true;
            }
        }

        var colsUser = {// to get the name of user when grouping as a hidden field
            xtype: 'gridcolumn',
            width:colW,
            flex:fx,
            hidden:true,
            autoSizeColumn:true,
            text:loc.main.user,
            dataIndex:'bd_name'
        };
        columns.push(colsUser);
        var isFieldOnly = (grid.cateOption.fieldOnly)? true : false;
        /* to display only basic information of grid set "isSimple" property to true*/
        var isSimple = (grid.cateOption.simpleList)? true : false;
        if(!isFieldOnly){//don't render if fieldOnly:1 or true configured in category option
            var colW = 320;
            var hideUsr = false;
            if(tabletMode){
                if(currentPlugin == 'salesGroup' || currentPlugin == 'workGroup'){
                    colW = 220;
                    hideUsr = true;
                }
            }
            var colsSimple = {
                xtype: 'gridcolumn',
                width:colW,
                flex:fx,
                autoSizeColumn:true,
                text: loc.main.basicInfo,
                summaryType: 'count',
                summaryRenderer: function(val, summaryData, field, metaData) {//in case, category option has a grouping:1
                    /* show how many data exist in group */
                    var value = '<strong>' + val + loc.main.item + '</strong>';
                    return value;
                },
                renderer:function(value, metaData, record){
                    var apvList = record.get('approvalList');
                    var progress = '';
                    var bd_reg = record.get('bd_regdate').substr(0, 10);
                    var dt = new Date(bd_reg);
                    var dtFormat = (localLanguage == 'English')? 'm-d-Y' : 'Y-m-d';
                    var regDate = Ext.Date.format(dt, dtFormat);
                    var percentVal = record.get('idpercent');
                    var userId = (grid.usedBy == 'work')? record.get('mb_id') : record.get('bd_name') || record.get('mb_id');
                    var html = '';
                        html += '<div style="width:100%;overflow:hidden;float:left">';
                    if(gridType =='text'){
                        html += '<span class="gsubject">' + record.get('bd_subject') + '</span> ';
                        html += ' <span style="font-size:11px">(by ' + userId + ')</span>';
                        if(record.get('bd_file')){
                        /* show clip icons in text mode */
                        var attachIcon = '<i class="fa fa-paperclip" style="font-size:10px;margin-left:10px"></i>';
                            if(record.get('bd_file').length > 0){
                                html += attachIcon + '<sup>' + record.get('bd_file').length.toString() + '</sup>';
                            }
                        }
                        html += '<div class="gcolortag" style="background-color:'+record.get('bd_colortag')+'"></div>';
                    }
                    else{
                        if(percentVal !== '' && percentVal !== undefined && percentVal !== null){
                            var pctW = '90px';
                            progress  = '<div style="float:left;width:'+pctW+';height:11px;margin: 4px 0 0 10px;;border:1px solid #dee0e2;background-color:white">';
                            progress += '	<div class="pecentFld" style="float:left;height:100%;width:'+percentVal+'%;background-color:#A0B4BF"></div>';
                            progress += '</div>';
                            progress += '<div style="float:left;font-size:11px;height:100%">'+percentVal+'%</div>';
        //                     if(record.get('idx') && record.get('idx') !== "") progress = '<span style="font-weight:bold">' + percentVal + '%</span>';
                        }
                        //check if read or unread
                        var isViewed = null;
                        if(record.get('isViewed') !== null){
                            isViewed = record.get('isViewed');
                        }
                        else{
                            isViewed = null;
                        }
                        var colorchkVal = '';
                        Ext.Object.each(record.data, function(key, value){
                            if(key.slice(0, 15) == 'visibleColorchk'){
                                colorchkVal = value;
                            }
                        });
                        /* all lines in one line */
                        var content = record.get('bd_content').replace(/<br>/gi, ' &nbsp; ');
                        /* html tag 제거 */
                        content = content.replace(/(<([^>]+)>)/ig, "");
                        var titleRow = '';

                        if(isViewed !== null && isViewed === false){
                            if(gridType != 'extra'){
                                titleRow = '<i class="fa fa-envelope-o check-read"></i>';
                            }
                        }
                        if(gridType == 'extra') gridType = 'normal';

                        /* when subject is empty, show file name instead */
                        if(!record.get('bd_subject')){
                            if(record.get('bd_file')[0]){
                                if(record.get('bd_file')[0]){
                                    titleRow += '<span class="gsubject" style="color:#92969C">' + record.get('bd_file')[0].file_name.split('.')[0] + '<br></span>';
                                }
                            }
                        }
                        else{
                            titleRow += '<span class="gsubject">' + record.get('bd_subject') + '</span>';
                        }
                        /* if title is disabled at category option */
                        if(!smallThumbnail){
                            if(grid.cateOption.title == '0' || grid.cateOption.title == 'false'){
                                titleRow = '';
                            }
                        }

                        html += 	'	<table width=100% cellspacing="0" cellpadding="0">';
                        html += 	'		<tr>';
                        html += 	'			<td colspan="2" height="20" valign="top">';
                        html += titleRow;
                        html +=     '			</td>';
                        html +=     '		</tr>';//Title

                        html += 	'		<tr>';
                        html +=    	'			<td colspan="2">';
                        html +=     '				<div style="float:left;margin-top:-3px" class="guserid">';
                        if(!hideUsr){
                            html +=						loc.main.user +  ' : ' + userId + ',&nbsp;&nbsp;';
                        }
                        html += 			loc.main.regDate + ' : ' + regDate;
                        html +=     '				</div>' + progress;
                        html +=     '			</td>';
                        html +=     '		</tr>';
                        if(smallThumbnail || isSimple){
                            /* if colorchk field exists show the first one */
                            if(colorchkVal !== ''){
                                html += 	'		<tr><td colspan="2">' + colorchkVal + '</td></tr>';
                            }
                        }
                        /* if apvList is configured */
                        if(!disableCheckedBy){
                            if(apvList.length > 0){
                                if(record.get('checkedby') !== undefined){//설정된 자가 봤는지 안봤는지 확인하기 위한 checkedby 필드가 설정이 되어 있으면
                                    var checkedList = record.get('checkedby').split(',');
                                    html +=		'		<tr>';
                                    html += 	'			<td colspan="2" height=20>';
                                    for(var i=0; i<apvList.length; i++){//본적이 없으면 내용 밑에 명찰표시
                                        if(checkedList.indexOf(apvList[i].user_id) == -1){
                                            html += 	'				<div class="mustsee-list" id="'+apvList[i].user_id+'">' + apvList[i].user_name + '</div>';
                                        }
                                    }
                                    html += 	'			</td>';
                                    html += 	'		</tr>';
                                }
                            }
                        }

                        if(!smallThumbnail){
                            html += 	'		<tr><td colspan="2"><div class="gcontent" style="margin-top:-3px">' + content + '</div></td></tr>';
                        }
                        html += 	'	</table>';
                    }
                    html += 	'</div>';
                    return html;
                }
            };

            if(hideBasicInfo){
                /* in case of set hide basic info at category option */
                if(grid.cateOption.title || grid.cateOption.title === undefined){
                    var cSubject = Ext.create('Ext.grid.column.Column', {
                        sortable:false,
                        dataIndex: 'bd_subject',
                        text: 'Title'
                    });
                    columns.push(cSubject);
                }
            }
            else{
                columns.push(colsSimple);
            }
        }

        /* for detail display mode */
        if(!isSimple){
            if(grid.categoryId !== ''){
                for(var i=0; i<cols.length; i++){
                    var fldOpt = getOption(cols[i].cols_option);
                    if(fldOpt.error !== undefined){//in case wrong option
                        Ext.toast(loc.error.optionError + '/Field:' + cols[i].cols_name);
                    }
                    var dIdx = cols[i].cols_name.replace(' ', '_');
                    dIdx = 'id' + cols[i].cols_idx;
                    var cUnit = cols[i].cols_unit; //disregard in case of auto idx
                    if(cols[i].cols_type == 'idx') cUnit = ''; //
                    if(cols[i].cols_code !== '' && cols[i].cols_code){
                        dIdx =  'id' + cols[i].cols_code;
                    }

                    var column = {
                        xtype:'gridcolumn',
                        renderer:me.gridCustomRenderer('normal', dIdx, cUnit)
                    };

                    column.colsInfo = cols[i];
                    column.dataIndex = dIdx;
                    column.text = cols[i].cols_name;
                    ////////////////////////////////////
                    // change a field name to foreign //
                    ////////////////////////////////////
                    if(localLanguage != 'Korean'){
                        column.text = (fldOpt.foreign === undefined)? cols[i].cols_name : fldOpt.foreign;
                    }
                    column.colsCode = cols[i].cols_code;
                    column.sortable = true;
                    column.hidden = getController('Viewer').getHideField(fldOpt);
                    if(!fldOpt.hidden){
                        /* in case auto numbering field */
        //                 if(cols[i].cols_type === 'idx' || cols[i].cols_code == 'checkedby'){
        //                     column.hidden = true;
        //                  }
        //                 if(gridType == 'text'){//view auto idx in text mode
        //                     if(cols[i].cols_type === 'idx'){
        //                         column.dataIndex = 'idx';
        //                         column.hidden = false;
        //                     }
        //                 }
                        /* in case colorcheck field */
                        if(cols[i].cols_type === 'colorchk'){
                            column.sortable = true;
                            column.dataIndex = 'visibleColorchk' + cols[i].cols_idx;
                        }
                        if(cols[i].cols_type === 'number'){
                            column = {
                                xtype:'customnumbercolumn', //defined in global.js
                            };
                            column.colsInfo = cols[i];
                            column.dataIndex = dIdx;
                            column.text = cols[i].cols_name;
                            column.colsCode = cols[i].cols_code;
                            column.sortable = true;
                            column.format = fldOpt.numberFormat;
                            if(fldOpt.numberFormat !== undefined) column.format = fldOpt.numberFormat;
                            //if field is for number and  the field optoin is "needSum", prepare to show total value
                            if(fldOpt.needSum && grid.sumFields !== undefined){
                                grid.sumFields.push({id:'id'+cols[i].cols_idx, name:cols[i].cols_name});
                                column.width = 70;
                                column.renderer = function(val, metaData, record, rowIndex, colIndex, store){
                                    if(val === '' || val === undefined || val === null || isNaN(val)) val = 0;
                                    if(this.format !== undefined){
                                        val = Ext.util.Format.number(val, this.format);
                                    }
                                    return val;
                                };
                                column.summaryRenderer = function(val, summaryData, field, metaData){
                                    var max, min, aver, sum;
                                    max = val[0];
                                    min = val[1];
                                    aver = val[2];
                                    sum = val[3];
                                    if(this.format !== undefined){
                                        max = Ext.util.Format.number(max, this.format);
                                        min = Ext.util.Format.number(min, this.format);
                                        aver = Ext.util.Format.number(aver, this.format);
                                        sum = Ext.util.Format.number(sum, this.format);
                                    }
                                    var title = 'Max.:'+max+', '+'Min.:'+min+', '+'Average:' + aver;
                                    return '<strong title="'+title+'">' + sum + '</strong>';
                                };
                                column.summaryType = function(records, values){
                                    var sum = 0;
                                    var max = 0;
                                    var min = values[0];
                                    for(var i=0; i<values.length; i++){
                                        var val = values[i];
                                        if(val === '' || val === undefined || val === null || isNaN(val)) val = 0;
                                        if(val > sum) max = val;
                                        if(min > val)  min = val;
                                        sum += Number(val);
                                    }
                                    var aver = sum/values.length;
                                    return [max, min, aver, sum];
                                };
                            }
                        }
                        if(cols[i].cols_type === 'dataset'){
                            column.renderer = function(){
                                var icon = '<i class="fa fa-table" aria-hidden="true" style="opacity:0.6"></i>';
                                return icon;
                            };
                        }
                        if(cols[i].cols_code == 'image' || fldOpt.render == 'image'){
                            if(gridType == 'text'){
                                column.renderer = me.gridCustomRenderer('image', dIdx, '', 19);
                            }
                            else{
                                column.renderer = me.gridCustomRenderer('image', dIdx, '');
                            }
                        };
                        if(cols[i].cols_code == 'colorHex' || fldOpt.render == 'colorHex'){
                            grid.hasHex = true;
                            column.renderer = me.gridCustomRenderer('colorHex', dIdx, '');
                        };
                        if(cols[i].cols_code == 'percent' || fldOpt.render == 'percent'){
                            column.renderer = me.gridCustomRenderer('percent', dIdx, cUnit);
                        };
                        if(cols[i].cols_code != 'linked'){
                            //do nothing for code "linked" field
                        };
                        columns.push(column);
                    }
                }
            }
        }

        var attTitle = loc.main.refImageTitle;
        if((grid.cateOption && grid.cateOption.categoryCode == 'member') || grid.usedBy == 'work'){
            attTitle = '';
        }
        if(gridType == 'extra') gridType = 'normal';
        if(gridType == 'normal' && !isFieldOnly && gridType != 'text'){//except in text type
            /* 첨부파일 */
            var aw = (smallThumbnail)? 54 : 76;
            var tImage = {
                xtype: 'actioncolumn',
                dataIndex: 'thumb_path',
                sortable:false,
                text: attTitle,
                width:aw,
                items:[
                    {
                        itemId:'attachedFiles',
                        tooltip:'Show attached files',
                        getClass:function(v, meta, rec){
                            if(rec.get('bd_file').length > 0){//render the icon for displaying the attached files by class in custom.css
                                return 'show-attach-list';
                            }
                        },
                        handler:function(gridview, rowIndex, colIndex, item, e, record, row){
                            me.previewAttached(record, e);
                        }
                    }
                ],
                renderer:function(value, metaData, record, rowIndex, colIndex, store, view){
                    //             value = '';
                    var isImage = false;
                    if(record.get('bd_file').length > 0){
                        isImage = getController('Config').isImage(record.get('bd_file')[0]);
                    }
                    var path = value += '?c=' + randomString(16);
        //             var path = value;
                    var conSize = (smallThumbnail)? 36 :53;
                    var fw = record.get('file_width');
                    var fh = record.get('file_height');
                    var sizeType;
                    if(fw < conSize && fh < conSize){
                        sizeType = 'auto;background-position:center';
                    }
                    else{
                        sizeType = 'cover;background-position:center';
                    }
                    if(!isImage) sizeType = 'auto;background-position:center';
                    var css = 'width:'+ conSize +'px;height:'+ conSize +'px;';
                    css    += 'background-image:url(' + path + ');background-size:'+ sizeType +';background-repeat: no-repeat;';
                    css    += 'border:1px solid #999999;float:left';
                    value = '';
                    if(record.get('bd_colortag') !== ''){
                        value += '<div class="gcolortag" style="background-color:'+record.get('bd_colortag')+'"></div>';
                    }
                    if(grid.cloneCategory !== undefined && record.get('bd_refer') === ''){
                        value  += '<div class="gclone" style="background-color:#ffa65f"></div>';
                    }
                    value += '<div class="attaches" style="' + css + '">';
                    if(record.get('bd_file').length > 0){
                        value += '<div style="height:16px;color:white;font-size:12px;display:inline-block;background-color:black;padding:3px;line-height:100%">';
                        value += record.get('bd_file').length;
                        value += '</div>';
                    }
                    value += '</div>';
                    return value;
                }
            };
            columns.unshift(tImage);
        }

        var contentTitle = (grid.cateOption.displayNameContent === undefined)? loc.main.description : grid.cateOption.displayNameContent;
        if(hideBasicInfo){
            var cContent = Ext.create('Ext.grid.column.Column', {
                sortable:true,
                dataIndex: 'bd_content',
                flex:1,
                text: contentTitle,
                renderer:function(value, metaData, record){
                    /* all lines in one line */
                    var content = record.get('bd_content').replace(/<br>/gi, ' &nbsp; ');
                    /* html tag 제거 */
                    content = content.replace(/(<([^>]+)>)/ig, "");
                    return content;
                }
            });
            columns.push(cContent);
        }
        else{//to fill empty area
            cTemp = {
                xtype: 'gridcolumn',
                flex:1
            };
            columns.push(cTemp);
        }

        return columns;
    },

    gridCustomRenderer: function(type, idx, unit, height) {
        return function(value, metadata){
            if(unit === undefined) unit = '';

            var val = (value === '')? '' : value + unit;
            var v = '';
            var minHeight = 0;
            var css = '';
            var btnRec = '';
            if(type.indexOf('getRecord') != -1 || type.indexOf('getValue') != -1){
                var btnColor = (type.indexOf('getRecord') != -1)? '#5e93bb' : 'black';
                btnRec = '<i class="fa fa-folder-o" style="color:'+btnColor+';position:absolute;right:5px;top:5px;cursor:pointer;line-height:1px"></i>';
            }
            if(type.indexOf('image') != -1){
                var imgH = (height)? height + 'px' : '54px';
                if(value !== ''){
                    v = '<img style="max-height: '+imgH+';" src="'+value+'" onerror="this.src =\'resources/images/ico_broken.png\'">';
                }
                v += btnRec;
            }
            else if(type.indexOf('percent') != -1){
                /* when unit is configured at PD use it, otherwize use '%' by force*/
                if(value !== ''){
                    var pVal = value + '%';
                    if(this.format !== undefined){
                        value = Ext.util.Format.number(value, this.format);
                    }
                    if(unit == ''){
                        value = value + unit;
                    }
                    else{
                        value = value + '%';
                    }

                    v ='<div style="width:100%;height:20px;border:1px solid #cccccc;">';
                    v += '<div style="width:'+pVal+';height:100%;background-color:#678fcd;">';
                    v += '</div></div><div style="font-size:11px">'+value+'</div>';
                }
                v += btnRec;
            }
            else if(type.indexOf('colorHex') != -1){
                if(value !== ''){
                    if(value.charAt(0) != '#') value = '#' + value;
                    v ='<div style="width:20px;height:20px;border:1px solid #cccccc;background-color:'+value+'">';
                    v +='</div><div style="font-size:11px">'+value+'</div>';
                }
                v += btnRec;
            }
            else{
                /* to change backgroundcolor of text at history */
                v = '<div style="width:100%; min-height:'+minHeight+';" class="'+idx+' custom-cell">' + val + '</div>';
                if(val === null || val == 'null') v = '';
                v += btnRec;
            }
            return v;
        };
    },

    updateUnRead: function(button, store) {
        var target = button.el.dom.querySelector('.un-read');
        var noViewed = 0;
        if(button.unread === ''){
            store.each(function(record){
                if(!record.get('isViewed')){
                    noViewed ++;
                }
            });
            button.unread = noViewed;
        }
        else{//이미 한번 설정 된 경우
            button.unread -= 1;
            noViewed = button.unread;
        }

        target.textContent = noViewed;
    },

    previewAttached: function(record, e) {
        Ext.Array.each(record.get('bd_file'), function(entry, index){
            entry.bd_idx = record.get('bd_idx');
        });
        /* set attached file store with bd_idx */
        var atStore =  Ext.create('Ext.data.Store', {
            fields:[
                {name:'file_name'}, {name:'thumb_path'}, {name:'bd_idx'}, {name:'ca_id'}
            ],
            data:record.get('bd_file')
        });
        var win = Ext.create('Ext.window.Window', {
            padding:'15 15 0 15',
            x:e.pageX,
            y:e.pageY,
            header:false,
            resizable:false,
            style:'background-color:#efefef',
            bodyStyle:'background-color:#efefef',
            items:[
                {
                    xtype:'dataview',
                    itemSelector:'div.thumb',
                    store:atStore,
                    tpl:new Ext.XTemplate (
                        '<tpl for=".">',
                        '{% var bdIdx = parent%}',
                        '	<div class="thumb" style="display:inline-block;width:54px;height:74px">',
                        '		<div title="{file_name}" style="width:54px;height:54px;',
                        '		border:4px solid #ffffff;background-position:center;background-image:url(\'{thumb_path}\');',
                        '		background-size:cover;"></div>',
                        '	<i class="fa fa-link" aria-hidden="true" title="'+loc.menu.copyToClipboard+'"',
                        '	style="float:left;cursor:pointer;color:#7792A9;margin:5px 0 0 12px" url="{thumb_path}"',
                        '	onclick="getController(\'Util\').copyToClipboard(this.getAttribute(\'url\'))">',
                        '	</i>',
                        '	<i class="fa fa-download" index="{#}" bdidx="{bd_idx}" aria-hidden="true" title="'+loc.menu.download+'"',
                        '	style="float:left;margin:5px 0 0 4px;cursor:pointer;color:#7792A9" onclick="getController(\'Main\').downloadFile(this)">',
                        '	</i>',
                        '	</div>',
                        '</tpl>'
                    )

                }
            ],
            listeners:{
                focusleave:function(window){
                    window.close();
                }
            }
        }).show();
        win.focus(); // to close window at out of focus
    },

    viewDocument: function(record, title, formMode, index, isRecent) {
        if(record === undefined) return;//noting has viewed
        var me = this;
        var activeTab = me.getListTab().getActiveTab();
        var viewer = Ext.create(appName + '.view.Viewer');
        var caId = record.get('ca_id');
        var bdIdx = record.get('bd_idx');
        var vPan = Ext.getCmp('viewPanel');
        var eastPanel = Ext.getCmp('eastPanel');
        if(activeTab.cloneCategory !== undefined){//for cloned data
            caId = activeTab.cloneCategory;
            if(record.get('bd_refer') !== ''){
               //has been motified
                bdIdx = record.get('bd_refer');
            }
            else{
                //for never motified
                bdIdx = record.get('bd_idx');
            }
        }
        //if selected category has no data */
        if(record === undefined){
            viewer.setHtml('');
            vPan.add(viewer);
            return;
        }
        if(record.get('idrgb_r') || record.get('idrgb_g') || record.get('idrgb_b')){
            viewer.hasRGB = true; // to make can't edit
        }
        else{
            viewer.hasRGB = false;
        }
        viewer.gridIndex = index;
        viewer.categoryId = caId;
        viewer.bdIdx = bdIdx;
        viewer.title = title;

        //check if viewer edit icon class = fa-unlock
        var icoEditable = Ext.getCmp('icoEditable');
        if(icoEditable.iconCls == 'fa fa-unlock'){
            icoEditable.setIconCls('fa fa-lock');
            viewer.setEditable(false);

        }

        //title for the westPanel header
        var headerTitle = '<i class="fa fa-info-circle" style="color:#304e7b"></i><a style="width:100%;font-size:12px;color:#304e7b"> ' + loc.menu.seeDetail;
        headerTitle += '<br><div style="padding-left:14px;font-size:16px">'+title+'</div>';
        eastPanel.setTitle(headerTitle);
        var url, params = {};
        params.bd_idx = bdIdx;
        if(activeTab.cloneCategory !== undefined){
            url = 'http://smartdb.kr/json/binderCloneList';
            params.ca_id = activeTab.cloneCategory;
        }
        else{
            url = getDataWriteApi();
            params.html = 1;
        }
        Ext.data.JsonP.request({
            url:url,
            params:params,
            success:function(response){

                var binderBean;
                if(activeTab.cloneCategory !== undefined){//for clone category that responsed by another url
                    binderBean = response.binderList[0];//for nothing edited
                    binderBean.bd_refer = response.binderList[0].bd_refer;//for nothing edited
                    response.categoryColsList = response.binderList[0].bd_data;//for nothing edited
                    response.approvalList = response.binderList[0].approvalList;//for nothing edited
                    for(var i=0; i<response.binderList.length; i++){
                        if(response.binderList[i].ca_id == record.get('ca_id')){
                            binderBean = response.binderList[i];
                            response.categoryColsList = response.binderList[i].bd_data;
                            binderBean.bd_refer = response.binderList[i].bd_refer;
                            response.approvalList = response.binderList[i].approvalList;
                        }
                    }
                    if(!activeTab.cateOption.cloneFile){
                        binderBean.originalFiles = response.binderList[0].bd_file;//pass it to show forcibly separately on viewer
                        binderBean.originalCategoryName = response.binderList[0].ca_name;//pass it to show forcibly separately on viewer
                    }
                    binderBean.bd_idx = response.binderList[0].bd_idx;
                }
                else{
                   binderBean = response.binderBean;
                }
                /* response.approvalList */
                /* response.binderBean */
                /* response.categoryColsList */
                /* field store */
                var colsList = response.categoryColsList;
                var apvlList = response.approvalList;
                viewer.colsList = colsList;
                /* field store for fill up upload form in edit mode */
                var fStore = Ext.getStore('fStore_' + caId);
                if(fStore === undefined){
                    fStore = Ext.create(appName + '.store.FieldStore',{
                        storeId:'fStore_' + caId,
                        data:colsList
                    });
                }
                else{
                    fStore.setData(colsList);
                }
                var values = binderBean;
                values.bd_data = response.categoryColsList;
                values.approvalList = apvlList;

                var itemInfo = binderBean;
                 // clone category and never motified and setted option cloneFile:0(remove clone file at editing)
                if(itemInfo.bd_refer == 'null' || itemInfo.bd_refer === null) itemInfo.bd_refer = '';
                if(activeTab.cloneCategory !== undefined && itemInfo.bd_refer === '' && !activeTab.cateOption.cloneFile){
                    itemInfo.bd_file = [];
                }

                itemInfo.companyInfo = companyInfo;
                if(apvlList && apvlList.length > 0){
                    itemInfo.approvalList = apvlList;
                }
                else{
                    itemInfo.approvalList = null;
                }
                itemInfo.hasFile = false;
                itemInfo.bd_last_modify_id = record.get('bd_last_modify_id') || record.get('mb_id');
                Ext.Object.each(itemInfo, function(key, value){
                    if(key == 'bd_file'){
                        if(value.length !== 0){
                            itemInfo.hasFile = true;
                        }
                    }
                });
                viewer.info = itemInfo;
                var formRecord = Ext.getStore('FormStore').findRecord('formId', formMode);
                if(!formRecord){
                    Ext.toast(loc.viewer.noForm + ':<br><strong>' + formMode + '</strong>');
                    return;
                }
                // if instance form selected, use it
                var instIndex = activeTab.instanceFormIndex;
                if(activeTab.subjectTitle === undefined) activeTab.subjectTitle = loc.main.title;
                itemInfo.subjectTitle = activeTab.subjectTitle;
                var formIndex = (instIndex === undefined)? formRecord.get('index') : instIndex;

                //////////////////////
                // rendering viewer //
                //////////////////////
                itemInfo.cateOption = activeTab.cateOption;
                formLib[formIndex].setHtml(itemInfo, viewer);

                vPan.removeAll();
                vPan.add(viewer);
                //////////////////////////////
                // check if it is a message //
                //////////////////////////////
                if(record.get('html') !== undefined){//document message
                    var htmlCon = {//container for message status on top of the viewer
                        xtype:'panel',
                        html:record.get('html'),
                        margin:'10 0 0 0',
                        width:'100%',
                        listeners:{
                            afterrender:function(component){
                                vPan.fireEvent('docuinfocomplete', vPan.receivers);
                                if(apvlList.length !== 0){
                                    //update chkecked status
                                    var chks = 0;
                                    for(var i=0; i<apvlList.length; i++){
                                        if(apvlList[i].ap_chk == 1) chks ++;
                                        //update if confirmed to show 'o' at showReceiverInfo() window
                                        for(var j=0; j<vPan.receivers.length; j++){
                                            if(apvlList[i].user_id == vPan.receivers[j].recv_id){
                                                if(apvlList[i].ap_chk == 1){
                                                    //confirm(item in apprrovalList) was only for confirm or agreement so it need to change manually in case of approval
                                                    vPan.receivers[j].confirm = 1;
                                                    if(apvlList[i].user_id == sessionId && vPan.down('#lbHowtoCheck')){//결재한 문서 여부 확인 표시
                                                        vPan.down('#lbHowtoCheck').setHtml('<i class="fa fa-thumbs-o-up" aria-hidden="true"></i> ' + loc.message.approved);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    //update the number of people who has approved
                                    component.el.select('.numOfConfirm').elements[0].textContent = chks + '/' + apvlList.length + ' ' + loc.message.checkApproval;
                                }
                            }
                        }
                    };
                    vPan.insert(0, htmlCon);
                }
                else{
                    Ext.get('icoEditable').show();
                }

                eastPanel.setWidth(formLib[formIndex].width);
                if(eastPanel.getCollapsed() == 'right'){
                    eastPanel.expand();
                }
                viewer.formIndex = formIndex;
                viewer.formMode = formMode;

                if(!isRecent){
                    /* add viewed item to localforge */
                    localforage.getItem('viewed', function(err, value){
                        if(!value){
                            localforage.setItem('viewed', []);
                        }
                        else{
                            var isExists = false;
                            for(var i=0; i<value.length; i++){
                                if(value[i].bd_idx == itemInfo.bd_idx){
                                    isExists = true;
                                    value.splice(i, 1);//remove existed entry
                                }
                            }
                            itemInfo.formIndex = formIndex;
                            value.unshift(itemInfo);
                            localforage.setItem('viewed', value, function(){
                                if(value.length > basicSetting.numOfViewed){
                                    /* 최근본 항목의 갯수가 새 설정값보다 크면 잘라 버린다 */
                                    var tmpArr = value.slice(0, basicSetting.numOfViewed);
                                    /* 잘라낸 목록으로 다시 저장 */
                                    localforage.setItem('viewed', tmpArr);
                                }
                            });
                        }
                    });
                }
                /* set Comment list */
                /* remove previous setInterval to call comment list */
                var viewCommentList = me.getMainView().getController().setCommentList;
                if(vPan.si){
                    clearInterval(vPan.si);
                }
                viewCommentList(bdIdx);
                vPan.si = setInterval(viewCommentList, 10000, bdIdx);
            }
        });

    },

    downloadFile: function(el) {
        if(!this.hasUserPermission('download')){//check the download permission
            Ext.toast(loc.error.lowerLevelToDownload);
            return;
        }
        var index = el.getAttribute('index') - 1;
        var bdIdx = el.getAttribute('bdidx');
        document.location.href = domain + '/binder/down/' + bdIdx + '/' + index;
    },

    deleteItem: function(record, html, bdIdxs) {
        var mainCtr = getController('Main');
        var delWin = Ext.create('Ext.window.Window', {
            modal:true,
            itemId:'deleteWin',
            layout:{
                type:'vbox',
                align: 'stretch'
            },
            bodyStyle:'padding:20px',
            title:loc.main.deleteData,
            items:[
                {
                    xtype:'container',
                    height:100,
                    width:400,
                    html:html,
                    margin:'0 0 20 0'
                },
                {
                    xtype: 'checkbox',
                    boxLabel: loc.main.delAll,
                    itemId:'delAll',
                    hidden:true
                },
                {
                    xtype: 'label',
                    html: loc.main.selectedItems+' : <strong>'+bdIdxs.length+'</strong><br>' +loc.main.delAlert
                },
                {
                    xtype:'container',
                    layout:{
                        type:'hbox',
                        pack:'center'
                    },
                    margin:'10 0 10 0',
                    items:[
                        {
                            xtype:'button',
                            text:loc.menu.remove,
                            listeners:{
                                click:function(button){
                                    var activeTab = mainCtr.getListTab().getActiveTab();
                                    var url = getDeleteDataApi();
                                    var delAll = button.up('window').down('#delAll').getValue();
                                    if(delAll){
                                        var query = '';
                                        for(var i=0; i<bdIdxs.length; i++){
                                            var connecter = (i === 0)? '?' : '&';
                                            query += connecter + 'bd_idx=' + bdIdxs[i];
                                        }
                                        url += query;
                                    }
                                    else{
                                        url += '?bd_idx=' + record.get('bd_idx');
                                    }

                                    //protect if it's clone category and the selected is in the source category
                                    if(activeTab.cateOption.cloneCategory !== undefined){
                                        if(record.get('bd_refer') === '' || record.get('bd_refer') == 'null'){
                                            Ext.toast(loc.error.removeImpossible + '<span style="#678fcd">'+activeTab.parentName+'</span>');
                                            return;
                                        }
                                    }
                                    Ext.data.JsonP.request({
                                        url:url,
                                        success:function(response){
                                            if(response.result){
                                                if(delAll){
                                                    button.up('window').destroy();
                                                    activeTab.fireEvent('alldataremoved');
                                                }
                                                else{
                                                    button.up('window').destroy();
                                                    activeTab.fireEvent('dataremoved', record.get('bd_idx'));
                                                }

                                                //삭제 체크해서 서브의 칼라웨이에 관계된 자료도 함께 삭제
                                                if(activeTab.cateOption.useColorway){
                                                    var cfgStore = Ext.getStore('ConfigStore');
                                                    var cQuery = 'ca_id=' + cfgStore.getAt(0).get('colorwayCategory') + '&se_refer=' + record.get('bd_idx') + '&page_size=' + 10000;
                                                    Ext.data.JsonP.request({
                                                        url:getDataListByIdApi(cQuery),
                                                        success:function(response){
                                                            if(response.binderList.length === 0) return;
                                                            var params = '?';
                                                            for(var i=0; i<response.binderList.length; i++){
                                                                params += '&bd_idx=' + response.binderList[i].bd_idx;
                                                            }
                                                            Ext.data.JsonP.request({
                                                                url:getDeleteDataApi() + params,
                                                                success:function(){
                                                                    Ext.toast('삭제된 디자인의 칼라웨이 정보도 함께 삭제 되었습니다.');
                                                                }
                                                            });
                                                        }
                                                    });

                                                }
                                            }
                                            /* delete connected category for taskgroup plugin */
                                            if(currentPlugin == 'taskGroup'){
                                                var referCa = record.get('bd_refer');
                                                Ext.data.JsonP.request({
                                                    url:domain  + '/json/cateDelete?ca_id=' + referCa,
                                                    method:'POST',
                                                    success:function(response){
                                                        if(response.result){
                                                            Ext.toast(loc.main.deleteComplete);
                                                            mainCtr.getMainView().down('#southPanel').removeAll();
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                    });
                                }
                            }

                        },
                        {
                            xtype:'button',
                            text:loc.upload.cancel,
                            style:'margin-left:6px',
                            handler:function(button){
                                var activeTab = mainCtr.getListTab().getActiveTab();
                                activeTab.fireEvent('dataremovedcanceled');
                                button.up('window').close();
                            }
                        }
                    ]
                }
            ]
        }).show();
    },

    selectMember: function(cId, type, target) {
        var me = this;
        var title;
        if(type == 'message' || type == 'textMessage' || type == 'mustSee'){
            title = loc.config.userList;
        }
        else{
            title = loc.config.addMember;
        }
        var isMustSee = (type == 'mustSee')? true : false;
        var store = Ext.getStore('UserStore');
        store.getProxy().setUrl(domain + '/json/member');

        store.on('load', function onStoreLoad(){
            store.un('load', onStoreLoad);
            var userListWin = Ext.create('Ext.window.Window', {
                width:740,
                padding:15,
                ghost:false,
                modal:true,
                scrollable:'y',
                maxHeight:windowMaxHeight,
                title:title,
                items:[
                    {
                        xtype:'grid',
                        store:store,
                        selModel: {
                            selType: 'checkboxmodel'
                        },
                        columns:[
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_file',
                                width:35,
                                scrollable:true,
                                renderer:function(value){
                                    var val;
                                    if(!value){
                                        val = '<i class="fa fa-user" aria-hidden="true" style="font-size:20px;color:#A3A7B0"></i>';
                                    }
                                    else{
                                        var css = 'width:25px;height:25px;background-image:url(\''+value+'\');background-repeat:no-repeat;background-size:cover';
                                        val = '<div style="'+css+'"></div>';
                                    }
                                    return val;
                                }

                            },
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_name',
                                text:loc.main.name,
                                width:120
                            },
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_duty',
                                text:loc.work.position,
                                width:100,
                                renderer:function(value){
                                    if(value == 'null')  value = '';
                                    return value;
                                }
                            },
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_groupname',
                                text:loc.main.department,
                                width:120
                            },
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_email',
                                text:loc.main.email,
                                width:160
                            },
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_cellphone',
                                text:loc.main.phone,
                                width:140
                            }
                        ],
                        height:'100%',
                        width:'100%',
                        dockedItems:[
                            {
                                xtype: 'pagingtoolbar',
                                dock: 'top',
                                height:45,
                                store:store,
                                displayInfo: true,
                                cls:'gridToolbar',
                                displayMsg: 'Data {0} - {1} of {2}',
                                items: [
                                    {
                                        xtype: 'tbseparator'
                                    },
                                    {
                                        xtype: 'textfield',
                                        itemId:'fdSearchAll',
                                        fieldLabel: loc.main.name,
                                        labelWidth:35,
                                        width:150,
                                        listeners:[
                                            {
                                                render:function(field, e){
                                                    field.el.on('keyup', function(e){
                                                        if(e.keyCode == 13){
                                                            var findIt = field.up('pagingtoolbar').down('#findIt');
                                                            findIt.fireEvent('click');
                                                        }
                                                    });
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        xtype:'button',
                                        height:35,
                                        glyph: 'xf002@FontAwesome',
                                        tooltip:loc.search.search,
                                        itemId:'findIt',
                                        /* serach data from selected category */
                                        listeners:{
                                            click:function(button){
                                                var val = userListWin.down('#fdSearchAll').getValue();
                                                var query = '?nvm_name=' + val;
                                                var store = userListWin.down('grid').getStore();
                                                store.currentPage = 1;
                                                store.load({
                                                    url:domain + '/json/member' + query
                                                });
                                            }
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                ],
                dockedItems:[
                    {
                        xtype:'container',
                        width:'100%',
                        padding:'20 0 0 0',
                        layout:{
                            type:'hbox',
                            pack:'middle'
                        },
                        dock: 'bottom',
                        items:[
                            {
                                xtype:'button',
                                margin:'0 0 0 10',
                                text:loc.upload.cancel,
                                glyph:'xf00d@FontAwesome',
                                width:100,
                                handler:function(button){
                                    button.up('window').close();
                                }
                            }
                        ]
                    }
                ],
                listeners:{
                    render:function(component){
                        /* add additional buttons */
                        var bBar = component.getDockedItems()[1];
                        if(type == 'message' || type == 'textMessage'){
                            var btnWrite = {//button for writing a message
                                xtype:'button',
                                glyph: 'xf24a@FontAwesome',
                                text:loc.message.writeMessage,
                                style:'padding-left:20px;padding-right:20px',
                                listeners:{
                                    click:function(button){
                                        var grid = button.up('window').down('grid');
                                        var selected = grid.getSelectionModel().getSelection();
                                        if(selected.length === 0){
                                            Ext.Msg.alert(loc.main.notice, loc.upload.noneSelected);
                                            return;
                                        }
                                        getController('Message').sendMessage(selected);
                                        userListWin.close();
                                    }
                                }
                            };
                            bBar.insert(0, btnWrite);
                        }
                        else{
                            var btnNext = {
                                xtype:'button',
                                text:loc.menu.next,
                                glyph:'xf138@FontAwesome',
                                hidden:isMustSee,
                                width:100,
                                listeners:{
                                    click:function(button){
                                        var grid = button.up('window').down('grid');
                                        var selected = grid.getSelectionModel().getSelection();
                                        if(selected.length === 0){
                                            Ext.toast(loc.upload.noneSelected);
                                        }
                                        else{
                                            button.up('window').close();
                                            me.setJob(selected, cId);
                                        }
                                    }
                                }
                            };
                            var btnDirect = {//직접입력버튼
                                xtype:'button',
                                margin:'0 0 0 10',
                                glyph: 'xf040@FontAwesome',
                                hidden:isMustSee,
                                text:loc.work.directInput,
                                style:'padding-left:20px;padding-right:20px',
                                listeners:{
                                    click:function(button){
                                        userListWin.close();
                                        var target = me.getListTab().getActiveTab();
                                        getController('Post').showNewPost(target);
                                    }
                                }
                            };
                            var btnAdd = {
                                xtype:'button',
                                margin:'0 0 0 10',
                                iconCls:'fa fa-plus-circle',
                                hidden:!isMustSee,
                                text:loc.main.add,
                                style:'padding-left:20px;padding-right:20px',
                                listeners:{
                                    click:function(button){
                                        var grid = button.up('window').down('grid');
                                        var selected = grid.getSelectionModel().getSelection();
                                        var values = [],
                                            names = [],
                                            units = [];
                                        for(var i=0; i<selected.length; i++){
                                            var unit = Ext.create(appName + '.view.DeletableUnit');
                                            unit.addImage(selected[i].get('nvm_file'));
                                            unit.addContent({
                                                xtype:'label',
                                                text:selected[i].get('nvm_name')
                                            });
                                            unit.userId = selected[i].get('nvm_id');
                                            target.add(unit);
                                        }
                                        userListWin.close();
                                    }
                                }
                            };
                            bBar.insert(0, btnDirect);
                            bBar.insert(0, btnNext);
                            bBar.insert(0, btnAdd);
                        }
                    }
                }
            }).show();
        });
        store.load();
    },

    hasUserPermission: function(target, userLevel) {
        if(userLevel === undefined) userLevel = userInfo.nv_level;
        var caInfo = this.getListTab().getActiveTab().categoryInfo;
        var uid = userInfo.nv_id;
        if(!caInfo) return true;//if nothing is loaded at list tab, set into message mode


        var funcLevel;
        if(target == 'list') funcLevel = caInfo.ca_list; //view list level
        if(target == 'download') funcLevel = caInfo.ca_download; //to download level
        if(target == 'delete') funcLevel = caInfo.ca_delete; //to delete level
        if(target == 'email') funcLevel = caInfo.ca_email; //to delete level
        if(target == 'view') funcLevel = caInfo.ca_view; //to view level
        if(target == 'print') funcLevel = caInfo.ca_print; //to view print
        if(target == 'copy') funcLevel = caInfo.ca_cpmv; //to view level
        if(target == 'write') funcLevel = caInfo.ca_write; //to view level

        /* permission for category */
        var pms = caInfo.permission;
        var hasPerm = false;
        var useLevel = caInfo.ca_uselevel;
        if(useLevel == 1){//레벨권한 사용이 체크 된 경우
            if(userLevel >= funcLevel){//권한이 있는 경우
                hasPerm = true;
                if(pms.length > 0){//개별 사용권한 설정 된 경우
                    if(pms[0] !== ''){//이전버전 DB용, 허용자가 없음에도 Array에 ""이 하나 들어가 있는 경우가 있으므로
                        if(pms.indexOf(uid) == -1){
                            hasPerm = false;
                        }
                    }
                }
            }
        }
        else{//레벨사용이 체크 안된 경우
            if(pms.length > 0){//개별 사용권한 설정 된 경우
                if(pms.length > 0 && pms[0] !== ''){//이전버전 DB용, 카테고리 접속 허용된 사용자가 없음에도 Array에 ""이 하나 들어가 있는 경우가 있으므로
                    if(pms.indexOf(uid) != -1){
                        hasPerm = true;
                    }
                }
            }
        }
        if(userLevel == 10) hasPerm = true;//최고 관리자 무제한
        return hasPerm;
    },

    setJob: function(members, cId) {
        var me = this;
        var win = Ext.create('Ext.window.Window', {
            width:710,
            padding:'15 15 25 15',
            ghost:false,
            modal:true,
            count:0,
            categoryId:cId,
            maxHeight:windowMaxHeight,
            title:loc.config.membersJob,
            scrollable:true,
            itemId:'jobWin',
            items:[
                {
                    xtype:'container',
                    flex:1,
                    itemId:'unitCon',
                    layout:'vbox'
                },
                {
                    xtype:'form',
                    standardSubmit: true,
                    itemId:'memberForm',
                    hidden:true,
                    items:[
                        {
                            xtype:'textfield',
                            name:'userName',
                            itemId:'userName',
                            value:''
                        },
                        {
                            xtype:'textfield',
                            name:'duty',
                            itemId:'duty',
                            value:''
                        },
                        {
                            xtype:'textfield',
                            name:'image',
                            itemId:'photo',
                            value:''
                        },
                        {
                            xtype:'textfield',
                            name:'department',
                            itemId:'department',
                            value:''
                        },
                        {
                            xtype:'textfield',
                            name:'phone',
                            itemId:'phone',
                            value:''
                        },
                        {
                            xtype:'textfield',
                            name:'email',
                            itemId:'email',
                            value:''
                        },
                        {
                            xtype:'textfield',
                            name:'bdIdx',
                            itemId:'bdIdx',
                            value:''
                        },
                        {
                            xtype:'textfield',
                            name:'job',
                            itemId:'job',
                            value:''
                        },
                        {
                            xtype:'container',
                            itemId:'existFilesCon',
                            items:[
                                {
                                    xtype: 'filefield',
                                    name: 'file_0'
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype:'container',
                    width:'100%',
                    padding:'20 0 0 0',
                    layout:{
                        type:'hbox',
                        pack:'middle'
                    },
                    items:[
                        {
                            xtype:'button',
                            text:loc.main.add,
                            glyph:'xf138@FontAwesome',
                            width:100,
                            listeners:{
                                click:function(button){
                                    var unitCon = win.down('#unitCon');//container for input the each member's job
                                    var items = unitCon.items.items;
                                    var store = Ext.create('Ext.data.Store', {
                                        fields:Ext.getStore('UserStore').config.fields,
                                        data:members
                                    });

                                    var record = store.getRange(win.count, win.count)[0];

                                    /* submit job for selected users */
                                    win.on('uploadcomplete', function onUploadComplete(){
                                        win.count += 1;
                                        if(win.count == store.getCount()){
                                            win.count = 0;
                                            win.un('uploadcomplete', onUploadComplete);
                                            win.close();
                                            me.getListTab().getActiveTab().getStore().load();
                                            return;
                                        }
                                        record = store.getRange(win.count, win.count)[0];
                                        getController('Post').submitMember(win, record, items[win.count]);
                                    });
                                    getController('Post').submitMember(win, record, items[win.count]);
                                }
                            }
                        },
                        {
                            xtype:'button',
                            margin:'0 0 0 10',
                            text:loc.upload.cancel,
                            glyph:'xf05e@FontAwesome',
                            width:100,
                            handler:function(button){
                                button.up('window').close();
                            }
                        }
                    ]
                }
            ]
        });

        /* building fields for job */
        for(var i=0; i<members.length; i++){
            var duty = members[i].get('nvm_duty');
            if(duty == 'null') {
                duty = '';
            }
            else{
                duty += ' ';
            }
            var margin = (i !== 0)? '-1 0 0 0' : '0';
            var unit = Ext.create('Ext.container.Container', {
                layout:{
                    type:'vbox'
                },
                width:'100%',
                style:'border:1px solid #cecece',
                padding:10,
                margin:margin,
                items:[
                    {
                        xtype:'label',
                        style:'font-weight:400',
                        html:duty + members[i].get('nvm_name')
                    },
                    {
                        xtype:'container',
                        layout:'hbox',
                        width:'100%',
                        items:[
                            {
                                xtype:'textarea',
                                itemId:'fdJob',
                                flex:1,
                                height:80,
                                margin:'0 0 0 10',
                                fieldLabel:loc.member.task,
                                labelAlign:'top'
                            }
                        ]
                    }
                ]
            });
            win.down('#unitCon').insert(i, unit);
        }

        win.show();
    },

    printDocument: function() {
        var viewer = Ext.getCmp('viewPanel').down('#viewer');
        if(viewer === null){
            Ext.MessageBox.alert(loc.main.notice, loc.main.nothingToPrint);
        }
        else{
            if(!getController('Main').hasUserPermission('print')){//check the print permission
                Ext.toast(loc.error.lowerLevelToPrint);
                return;
            }
            var win = window.open('print.html', '', 'width=750, height=900, scrollbars=1');
        }
    },

    removeComment: function(idx) {
        Ext.Msg.confirm(loc.main.caution, loc.main.delAlert, function(btn, text){
            if (btn == 'yes'){
                var url = getCommentDeleteApi();
                Ext.data.JsonP.request({
                    url:url,
                    params:{
                        idx:idx
                    },
                    success:function(response){
                        if(response.result){
                            var bdIdx = Ext.getCmp('viewPanel').down('#viewer').info.bd_idx;
                            var ctrl = Ext.getCmp('commentPanel').getController();
                            ctrl.setCommentList(bdIdx);
                        }
                        else{
                            Ext.Msg.alert(loc.main.permissionError, loc.main.noPermission, Ext.emptyFn);
                        }
                    },
                    failure:function(response){
                        alert(loc.main.networkProblem);
                    }

                });

            } else {
                Ext.toast(loc.main.canceled);
            }
        });
    },

    showChart: function(store) {
        var sumFields = getController('Main').getListTab().getActiveTab().sumFields;
        var catStore = Ext.create('Ext.data.Store', {
            fields:['state', 'total']
        });
        var totalSum = 0;
        if(!store.getGroups()){
            Ext.Msg.alert('', '먼저 목록을 그룹으로 표시 해 주세요');
            return;
        }
        store.getGroups().each(function(item){
            var sum = Number(item.sum(sumFields[0].id));
            totalSum += Number(sum);
            catStore.add({
                name:item.getGroupKey(),
                qty:sum
            });
        });
        var arr = [];
        var title = sumFields[0].name + '별 ';
        if(store.terms !== undefined){
            title += store.terms.se_sdate + '부터~ ' + store.terms.se_edate + '까지 전체 ';
        }
        title += store.getTotalCount() + '건중 ' + store.getCount() + '건, 합계 ' + Number(totalSum).toFixed(2);
        var catWin = Ext.create('Ext.window.Window', {
            width:1140,
            height:800,
            padding:20,
            layout:'fit',
            ghost:false,
            maximizable:true,
            title:sumFields[0].name + '챠트 ',
            tools:[
                {
                    type:'save',
                    tooltip:'저장',
                    handler:function(button){
                        var saveBase64AsFile = function (base64, fileName) {
                            var link = document.createElement("a");
                            link.setAttribute("href", base64);
                            link.setAttribute("download", fileName);
                            link.click();
                        };
                        setTimeout(function () {
                            saveBase64AsFile(catWin.down('chart').getImage('stream').data, "출력양챠트.png");
                        }, 1000);
                    }
                }
            ],
            items:[
                {
                    xtype:'chart',
                    store:catStore,
                    axes:[
                        {
                            type:'numeric',
                            grid:{
                                odd:{
                                    fill:'#eeeeee'
                                }
                            },
                            position:'left',
                            title:title
                        },
                        {
                            type:'category',
                            position:'bottom',
                            fields:['name']
                        }
                    ],
                    series:[
                        {
                            type:'bar',
                            xField:'name',
                            yField:['qty'],
                            label:{
                                field:'qty',
                                display:'insideEnd'
                            },
                            tooltip: {
                                trackMouse: true,
                                interactions: [{
                                    type: 'itemhighlight'
                                }],
                                scope:this,
                                renderer: function(toolTip, record) {
                                    toolTip.setHtml(record.get('name'));
                                }
                            }

                        }
                    ]

                }

            ]
        }).show();
    },

    showUserInfo: function(element) {
        var uId = element.getAttribute('uId');
        Ext.data.JsonP.request({
            url:domain + '/json/member?nvm_id=' + uId,
            success:function(response){
                if(response.memberList.length === 0){
                    Ext.toast(loc.error.notUser);
                    return;
                }
                var html = '';
                if(response.memberList[0].nvm_file.trim() !== ''){
                    var potoCss = 'width:150px;height:175px;background-image:url('+response.memberList[0].nvm_file+');margin-bottom:10px;';
                    potoCss    += 'background-repeat:no-repeat:background-position:center;background-size:cover;';
                html    += '<div style="'+potoCss+'">';
                html    += '</div>';
                }
                html    += '<table style="border-collapse:collapse;border:1px solid #cecece;width:100%" border="1">';
                html    += '	<tr>';
                html    += '		<td style="width:20%">'+loc.main.name+'</td>';
                html    += '		<td style="width:80%">'+response.memberList[0].nvm_name+' '+response.memberList[0].nvm_duty;
                html    += ' (' +response.memberList[0].nvm_id+ ')</td>';
                html    += '	</tr>';
                html    += '	<tr>';
                html    += '		<td style="width:20%">'+loc.main.department+'</td>';
                html    += '		<td style="width:80%">'+response.memberList[0].nvm_groupname+'</td>';
                html    += '	</tr>';
                html    += '	<tr>';
                html    += '		<td style="width:20%">'+loc.main.email+'</td>';
                html    += '		<td style="width:80%">'+response.memberList[0].nvm_email+'</td>';
                html    += '	</tr>';
                html    += '</table>';
                var win = Ext.create('Ext.window.Window', {
                    width:450,
                    padding:10,
                    ghost:false,
                    html:html,
                    title:loc.config.userInfo,
                    cls:'dataset-table'
                }).show();
            }
        });
    }

});
