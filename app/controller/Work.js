/*
 * File: app/controller/Work.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.controller.Work', {
    extend: 'Ext.app.Controller',

    setPluginMode: function(button, fieldSet, title, pluginName) {
        var me = this;
        var cId = button.categoryId;
        var mainCtr = getController('Main');
        var mainView = mainCtr.getMainView();
        var workListPan = mainView.down('#centerPanel').down('#workListPanel');
        mainCtr.getListTab().removeAll();
        if(workListPan){// to renew
            workListPan.destroy();
        }
        var pluginTitle = title + ' - ' + button.unitName;
        if(pluginName == 'taskGroup'){
            var southPan = mainView.down('#southPanel');
            southPan.setTitle(fieldSet[0].headerTitle);
            southPan.removeAll();
            southPan.setHidden(false);

            var layout = button.categoryInfo.layout;
            var type = getController('Config').getLayout(layout);
            if(button.categoryOption.schedule){
                type = 'schedule';
            }
            if(button.categoryOption.colorChip){
                type = 'colorChip';
            }
            var grid = mainCtr.getGrid(cId, type, title + '-' + button.unitName);
            grid.cateOpt = button.categoryOpion;
            grid.numOfItem = button.rows;
            mainCtr.setGrid(grid);
            mainCtr.getListTab().on('listcomplete', function onGridComplete(cId){
                mainCtr.getListTab().un('listcomplete', onGridComplete);
                /* when click on an item of mainGrid */
                grid.on('itemclick', function(dataview, record, item, index){
                    /* render the related category to south panel */
                    me.setSouthPanel(record, pluginName);
                });
            });
        }
        else{
            workListPan = this.getWorkListPanel(cId, pluginTitle, button.categoryOption);//create new workListPanel
            workListPan.fieldSet = fieldSet;
            workListPan.workName = title;
            workListPan.teamName = button.unitName;
            workListPan.on('render', function(comp){
                var splitters = mainView.down('#centerPanel').query('splitter');
                splitters[2].on('render', function(splitter){
                    var clpBtn = Ext.get(splitters[2].getEl().dom.children[0]);
                    clpBtn.setStyle({
                        width:'10px',
                        'z-index':200
                    });
                    splitters[2].setWidth(2);
                });
            });
            mainView.down('#centerPanel').add(workListPan);
            mainView.down('#workInfoPanel').removeAll();
            mainView.down('#workInfoPanel').setTitle(loc.work.workChance);
            mainView.down('#southPanel').removeAll();
            mainView.down('#southPanel').setHidden(true);

            var westPan = Ext.getCmp('westPanel');
            westPan.setCollapsed(true);
        }

        if(Ext.getCmp('viewPanel').down('#viewer')){
            Ext.getCmp('viewPanel').down('#viewer').destroy();
        }

    },

    getWorkListPanel: function(cId, pluginTitle, cateOpt) {
        var me = this;
        var isSimple = (cateOpt.fieldOnly)? false : true;
        var mainCtr = getController('Main');
        var panW = (tabletMode)? 330 : 432;
        var panel = Ext.create('Ext.panel.Panel', {
            region: 'west',
            split: true,
            itemId: 'workListPanel',
            id:'workListPanel',
            title:pluginTitle,
            width: panW,
            layout:'border',
            categoryId:cId,
            style:'background-color:#ecf1f5',
            collapseDirection: 'left',
            collapsible: true,
            items: [
                {
                    xtype: 'gridpanel',
                    usedBy: 'work',
                    split:true,
                    flex:1,
                    title:' ',
                    cateOption:cateOpt,
                    padding:'3 0 0 0',
                    itemId: 'workGrid',
                    region:'center',
                    isSimple:isSimple,
                    categoryId:cId,
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'string',
                            text: 'String'
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'pagingtoolbar',
                            dock: 'top',
                            cls:'gridToolbar',
                            displayInfo: false
                        }
                    ],
                    selModel: {
                        selType: 'checkboxmodel',
                        mode: 'SINGLE'
                    },
                    listeners: {
                        itemclick:function(dataview, record, item, index, e, eOpts){
                            /* when click grid item in work list */
                            var viewer = mainCtr.getMainView().down('viewer');
                            if(viewer) viewer.destroy();
                            var workInfoPan = mainCtr.getMainView().down('#workInfoPanel');
                            me.onActivityGridItemClick(dataview, record, workInfoPan);
                            panel.selectedIndex = index;
                            panel.selectedId = record.get('bd_idx');
                        }
                    }
                },
                {
                    xtype: 'panel',
                    flex: 0.7,
                    region: 'south',
                    split: true,
                    itemId: 'workInfoPanel',
                    bodyStyle:'background-color:#ECF1F5;',
                    collapseDirection: 'bottom',
                    collapsible: true,
                    scrollable:'y'
                }
            ],
            listeners:{
                afterrender:function(component){
                    var header = component.getHeader();
                    header.setStyle({
                        padding:'10px',
                        'background-color':'#ecf1f5'
                    });
                    var grid = component.down('grid');
                    grid.getHeader().setStyle({
                        padding:'0px',
                        'background-color':'#ecf1f5'
                    });
                    var addText = '', udeText='', delText = '';
                    addText = loc.work.addNew;
                    udeText = loc.work.updateActivity;
                    delText = loc.work.deleteActivity;
                    addText = loc.work.addNew;
                    var btnAddStatus = {//button for creating new work activity
                        xtype:'button',
                        glyph:'xf016@FontAwesome',
                        text:addText,
                        listeners:{
                            'click':function(){
                                getController('Post').showNewPost(grid, currentPlugin, grid.categoryColsList);
                                /* createNewActivity() for components of work are generrated at showUploadStatus() while uploading */
                            }
                        }
                    };
                    var btnUpdateStatus = {//button for updating new work activity
                        xtype:'button',
                        glyph:'xf044@FontAwesome',
                        text:udeText,
                        listeners:{
                            'click':function(){
                                var selected = grid.getSelectionModel().getSelection()[0];
                                if(selected){
                                    Ext.data.JsonP.request({
                                        url:getDataWriteApi(),
                                        params:{
                                            bd_idx:selected.get('bd_idx'),
                                            html:0
                                        },
                                        success:function(response){
                                            var colsList = response.categoryColsList;
                                            /* field store for make grid fields */
                                            var fStore = Ext.getStore('fStore_' + selected.get('ca_id'));
                                            if(fStore === undefined){
                                                fStore = Ext.create(appName + '.store.FieldStore',{
                                                    storeId:'fStore_' + selected.get('ca_id'),
                                                    data:colsList
                                                });
                                            }
                                            else{
                                                fStore.setData(colsList);
                                            }
                                            var title;
                                            if(localLanguage != 'Korean'){
                                                title = 'Edit' + ' ' + panel.getTitle();
                                            }
                                            else{
                                                title = panel.getTitle() + ' 수정';
                                            }

                                            getController('Post').editPost(response, title, grid);
                                        }
                                    });

                                }
                                else{
                                    Ext.MessageBox.alert(loc.main.notice, loc.upload.noneSelected);
                                }
                            }
                        }
                    };
                    var btnDelStatus = {//button for deleting new work activity
                        xtype:'button',
                        glyph:'xf1f8@FontAwesome',
                        text:delText,
                        listeners:{
                            'click':function(){
                                me.deleteActivity();
                            }
                        }
                    };
                    grid.getHeader().insert(0, btnDelStatus);
                    grid.getHeader().insert(0, btnUpdateStatus);
                    grid.getHeader().insert(0, btnAddStatus);

                    var params = '&ca_id=' + cId;
                    mainCtr.getServerData(cId, params, grid);
                    //when the activity panel list complete
                    grid.on('listcomplete', function onGridComplete(categoryId){
                        if(grid.getStore().getCount() === 0) return;
                        var record = grid.getStore().getRange(0, 0)[0];//첫번째 자료 자동 선택
                        grid.setSelection(record);
                        grid.fireEvent('itemclick', grid.getView(), record, 0);
                        mainCtr.getMainView().unmask();
                    });
                }
            }
        });
        return panel;
    },

    setSouthPanel: function(record, pluginName) {
        var me = this;
        var mainCtr = getController('Main');
        var postCtr = getController('Post');
        var southPan = mainCtr.getMainView().down('#southPanel');
        southPan.removeAll();
        Ext.data.JsonP.request({
            url:getCategoryViewApi(record.get('bd_refer')),
            success:function(response){
                var cId = response.ca_id;
                var layout = getController('Config').getLayout(response.ca_layout);
                var options = getOption(response.ca_option);
                var grid = mainCtr.getGrid(cId, layout);
                var formMode = (options.formMode)? options.formMode : 'Information';
                var categoryName = (options.categoryName)? options.categoryName : response.ca_name;
                categoryName += ' ' + southPan.getTitle();
                grid.header = false;
                grid.itemId = 'taskGrid';
                grid.height = '100%';
                grid.width = '100%';
                grid.title = categoryName;
                grid.usedBy = 'work';//to generate fStore at getServerData()
                grid.numOfItem = response.ca_page_row;//pageSize
                grid.on('itemclick', function(dataview, rec, item, index, e, eOpts){
                    mainCtr.viewDocument(rec, categoryName, formMode, 0);
                });
                //fireEvent as like click the first data of grid to generate fStore for uploading without click
                grid.on('listcomplete', function(id, g){
                    //Number of items in page setted binding at mainGrid so it must be designated by forcibly at extra grid
                    southPan.down('#fdNumOfLst').setValue(response.ca_page_row);
                });
                var params = '&ca_id=' + record.get('bd_refer') + '&ca_order=' + response.ca_order;
                mainCtr.getServerData(record.get('bd_refer'), params, grid);
                southPan.add(grid);
            }
        });


        var toolBox = southPan.down('#toolBox');
        if(toolBox){
            toolBox.destroy();
        }
        southPan.getHeader().insert(1, {
            xtype:'container',
            layout:'hbox',
            itemId:'toolBox',
            items:[
                {
                    xtype:'button',
                    text:loc.main.add,
                    ui:'plain-toolbar-small',
                    glyph:'xf0fe@FontAwesome',
                    margin:'0 8 0 0',
                    padding:0,
                    handler:function(button){
                        var grid = southPan.down('#taskGrid');
                        var title;
                        if(localLanguage == 'English'){
                            title = 'Add' + ' ' + southPan.getTitle();
                        }
                        else{
                            title = southPan.getTitle() + ' 추가';
                        }
                        //adding data into southPanel
                        postCtr.showNewPost(grid, '', grid.categoryColsList);
                    }
                },
                {
                    xtype:'button',
                    text:loc.upload.edit,
                    ui:'plain-toolbar-small',
                    glyph:'xf146@FontAwesome',
                    margin:'0 8 0 0',
                    padding:0,
                    handler:function(button){
                        var grid = southPan.down('#taskGrid');
                        var title;
                        if(localLanguage == 'English'){
                            title = 'Edit' + ' ' + southPan.getTitle();
                        }
                        else{
                            title = southPan.getTitle() + ' 수정';
                        }
                        var chks = southPan.down('#taskGrid').getSelectionModel().getSelection();
                        if(chks.length === 0){
                            Ext.toast(loc.upload.noneSelected);
                        }
                        else{
                            var fStore = Ext.getStore('fStore_' + grid.categoryId);
                            var colsList = [];
                            fStore.each(function(entry){
                                colsList.push(entry.data);
                            });
                            var serverData = {
                                binderBean:chks[0].data,
                                categoryColsList:colsList
                            };
                            postCtr.editPost(serverData, title, grid);
                        }
                    }
                },
                {
                    xtype:'button',
                    text:loc.work.deleteActivity,
                    ui:'plain-toolbar-small',
                    glyph:'xf14b@FontAwesome',
                    margin:'0 8 0 0',
                    padding:0,
                    handler:function(button){
                        var grid = southPan.down('#taskGrid', grid);
                        me.deleteSouthData(grid);
                    }
                }
            ]
        });

        /* 거래처가 설정 되어 있을 때 거래처별 영업활동을 연결하기 위하여 영업확동 보기 버튼 표시 */
        /* 연결이 되기 위해서는 Task Group중 거래처목록임을 구분하기 위해 카테고리옵션에 clientList:1 이 설정 돼 있어야 한다 */
        var caOpt = getController('Main').getListTab().getActiveTab().cateOption;
        if(currentPlugin == 'taskGroup' && caOpt.clientList == 1){
            var salesIds = Ext.getCmp('westPanel').sales;
            var showSales = {//create sales activity button
                xtype:'button',
                text:loc.work.seeActivity,
                ui:'plain-toolbar-small',
                rec:record,
                glyph:'xf0f0@FontAwesome',
                margin:'0 8 0 0',
                padding:0,
                handler:function(button){
                    var salesActivityWin = Ext.getCmp('saWin');
                    if(salesActivityWin) salesActivityWin.destroy();//dstroy exists the salesActivityWin
                    var count = 0;
                    var getSalesActivity = function(client, cId, title){
                        Ext.data.JsonP.request({//salesGroup중 필드코드가 검색하는 거래처 이름으로 지정된 datagrp 모두 검색
                            url:domain + '/json/list?client_datagrp=' + encodeURIComponent(client) +'&ca_id=' + cId,
                            success:function(response){
                                me.showSalesActivity(title, response.binderList);
                                count ++;
                                if(count < salesIds.length){
                                    getSalesActivity(button.rec.get('bd_subject'), salesIds[count].id, salesIds[count].title);
                                }
                            }
                        });

                    };
                    getSalesActivity(button.rec.get('bd_subject'), salesIds[0].id, salesIds[0].title);
                }
            };
            southPan.down('#toolBox').add(showSales);

        }

    },

    deleteSouthData: function(grid) {
        var chks = grid.getSelectionModel().getSelection();
        if(chks.length === 0){
            Ext.MessageBox.alert(loc.main.notice, loc.upload.noneSelected);
            return;
        }
        var selected = chks[0];
        var h = selected.get('file_height');
        var w = selected.get('file_width');
        var tSize = 100;
        var bSize;
        if(w < tSize && h < tSize){
            bSize = 'auto';
        }
        else{
            bSize = 'cover';
        }
        var html = '<table style="border:1px solid #cecece;width:100%"><tr>';
        html    += '<td width=100>';
        html  	+=    '<div style="float:left;width:100px;height:100px;background-image:url(' + selected.get('thumb_path');
        html 	+= ');background-size:'+bSize+'" class="div-image"></div>';
        html    += '</td>';
        html    += '<td style="padding-left:15px">';
        html    += '<span style="font-weight:bold">'+loc.main.title+': </span>' + selected.get('bd_subject');
        html    += '<br><span style="font-weight:bold">'+loc.main.regDate+': </span>' + selected.get('bd_regdate');
        html    += '<br><span style="font-weight:bold">'+loc.main.user+': </span>' + selected.get('bd_name');
        html    += '</td>';
        html    += '</tr></table>';
        var delWin = Ext.create('Ext.window.Window', {
            modal:true,
            layout:{
                type:'vbox',
                align: 'stretch'
            },
            bodyStyle:'padding:20px',
            title:'Delete',
            items:[
                {
                    xtype:'container',
                    height:tSize,
                    width:400,
                    html:html,
                    margin:'0 0 20 0'
                },
                {
                    xtype: 'label',
                    text: loc.main.delAlert
                },
                {
                    xtype:'container',
                    layout:{
                        type:'hbox',
                        pack:'center'
                    },
                    margin:'10 0 10 0',
                    items:[
                        {
                            xtype:'button',
                            text:loc.menu.remove,
                            handler:function(button){
                                    Ext.data.JsonP.request({
                                    url:getDeleteDataApi(),
                                    params:{
                                        bd_idx:selected.get('bd_idx')
                                    },
                                    success:function(response){
                                        if(response.result){
                                            grid.getStore().load();
                                            delWin.close();
                                        }
                                    }
                                });
                            }
                        },
                        {
                            xtype:'button',
                            text:loc.upload.cancel,
                            style:'margin-left:6px',
                            handler:function(button){
                                button.up('window').close();
                            }
                        }
                    ]
                }
            ]
        }).show();
    },

    createSubcategory: function(upWin, cId) {
        var fieldSet = getController('Main').getMainView().down('#work_' + cId).fieldSet;
        var parameter = fieldSet;//category option from setting
        parameter.ca_id = cId;
        parameter.ca_name = upWin.down('#fdSubject').getValue();
        //흩어진 같은 서브카테고리를 통틀어 검색하기 위한 준비
        var fCaOpt = fieldSet.ca_option.replace('--categoryCode:setting', '');
        fCaOpt = fCaOpt.replace('--title:연락처', '');
        fCaOpt += '--inherit:' + fieldSet.setCateId; // refer to setting category
        parameter.ca_option = fCaOpt;
        Ext.data.JsonP.request({
            url:getCategoryUpdateApi(),
            params:parameter,
            success:function(value){
                if(value.result){
                    upWin.down('form').setRefer(value.ca_id);
                    /* field id of source field to clone */
                    Ext.data.JsonP.request({//fields mapping by source
                        url:getColsCopyApi(parameter.setCateId, value.ca_id),
                        success:function(){
                            getController('Post').showUploadStatus(upWin, true);
                        }
                    });
                }
                else{
                    alert('Something was wrong while creating new activity, Error code:100');
                }
            }
        });
    },

    getWorkInfoPanel: function(record, categoryColsList) {
        var hiCon = Ext.create('Ext.container.Container', {//add record instead of history at first time
            width:'100%',
            height:'100%',
            itemId:'workInfoPan',
            data:record.data,
            itemSelector:'div.work-info-panel',
            tpl:[
                '<tpl for=\'.\'>',
                '{% var parentIndex = xindex %}',
                '{% var tc = xcount %}',
                '{% var bdIdx = values.bd_idx %}',
                '	<div count="{#}" style="min-width:432px;padding-bottom:30px;" class="work-info-panel">',
                '		<div style="padding:10px 0 10px 0;font-size:16px;font-weight:bold;width:100%;border-bottom:1px solid #dee0e2;border-top:1px solid #dee0e2">{bd_subject}</div>',
                '		<div style="font-size:11px;padding:6px 10px 6px 4px">',
                '			<div style="float:left;font-weight:bold">'+loc.main.user+': {bd_name}{bd_lastmodify_id}</div>',
                '			<div style="float:left;font-weight:bold;margin-left:15px">'+loc.main.regDate+': {[this.getRegDate(values)]}</div>',
                '		</div>',
                '		<table style="clear:both">',
                '			<tpl for=\'bd_data\'>',
                '				<tpl if="values.cols_code != undefined">',
                '				{% var dgGrpIcon = "" %}',
                '					<tpl if="values.cols_code == \'contact\'">',
                '						<tr><th style="text-align:left">{cols_name}</th>',
                '							<td style="padding-left:8px">{[this.getContact(values)]}',
                '								<i class="fa fa-external-link" aria-hidden="true" bdIdx="{[this.getBdIdx(values)]}" ',
                '								style="margin-left:10px;cursor:pointer;display:{[this.checkContact(values)]}" onclick="getController(\'Work\').viewContact(this)"></i>',
                '							</td>',
                '						</tr>',
                '					<tpl elseif="values.cols_code == \'percent\'">',
                '						<tr><th style="text-align:left">{cols_name}</th>',
                '						<td style="padding-left:8px">{[this.drawPercent(values)]}</td></tr>',
                '					<tpl elseif="values.cols_code == \'linked\'">',
                '						<tr><th style="text-align:left">{cols_name}</th>',
                '						<td style="padding-left:8px">{[this.getLinkedName(values)]}</td></tr>',
                '					<tpl elseif="values.cols_code == \'image\'">',
                '						<tr><th style="text-align:left">{cols_name}</th>',
                '						<td style="padding-left:8px">{[this.renderImage(values)]}</td></tr>',
                '					<tpl else>',
                '						<tpl if="values.cols_type == \'datagrp\'">',
                '							{% dgGrpIcon = (values.data_val != "")? true : false %}',
                '						<tpl else>',// for common custom fields
                '							<tr>',
                '								<th style="text-align:left">{cols_name}</th>',
                '								<td style="padding-left:8px;color:{[this.checkChanges(values, xindex-1, parentIndex-1)]}">',
                '									{data_val}{[this.checkUnit(values)]}{[this.showGrpIcon(dgGrpIcon, bdIdx, xindex, parentIndex, values.data_val)]}',
                '								</td>',
                '							</tr>',
                '						</tpl>',
                '					</tpl>',
                '				</tpl>',
                '				<tpl if="values.cols_code == \'stage\'">',
                '					{[this.drawStage(values, parentIndex, tc)]}',
                '				</tpl>',
                '			</tpl>',
                '		</table>',
                '		<div style="width:100%;font-weight:bold">{bd_content}</div>',
                '	</div>',
                '	<div style="width:100%">{[this.getAttachedFile(values)]}</div>',
                '</tpl>',
                {
                    checkUnit:function(values){
                        var val = (values.cols_unit === '')? '' : values.cols_unit;
                        return val;
                    },
                    getRegDate:function(values){
                        var regDate = values.bd_regdate.substr(0, 10);
                        var dt = new Date(regDate);
                        if(localLanguage == 'English') regDate = getController('Util').parseDate(dt);
                        return regDate;
                    },
                    drawStage:function(values, pi, tc){//render status of project
                        if(tc != 1) pi = -1; //to avoid show the first stage so duplicated in case of more than 1 histories
                        if(pi != tc) return;
                        var stageData = [];
                        var stage = values.data_val;
                        var colsList = categoryColsList;
                        var i;
                        var borderSize, bgColor, borderColor, marginLeft='0';
                        for(i=0; i<colsList.length; i++){
                            if(colsList[i].cols_code == 'stage'){
                                stageData = colsList[i].cols_data;
                            }
                        }
                        var html = '<div style="width:100%">';
                        var iconSrcs = ['resources/images/status1.png', 'resources/images/status2.png', 'resources/images/status2.png', 'resources/images/status4.png', 'resources/images/status1.png', 'resources/images/status6.png', 'resources/images/status6.png'];
                        for(i=0; i<stageData.length; i++){
                            var unitSize = (i === 0)? 40 : 60;
                            html += '<div style="width:'+unitSize+'px;float:left;text-align:center">';
                            if(i !== 0){
                                html += 	'<div style="float:left;width:20px;height:1px;border-bottom:1px solid grey;margin-top:19px"></div>';//connecting line
                                marginLeft = '16';
                            }
                            borderSize = (stageData[i] == stage)? 0 : 1;
                            bgColor = (stageData[i] == stage)? '#A0B4BF' : 'transparent';
                            borderColor = (stageData[i] == stage)? '#262A33' : '#A9ADB5';
                            html += '	<div style="float:left;width:40px;height:40px;border-radius:20px;border:';
                            html += 	borderSize+'px solid '+borderColor+';background-color:'+bgColor+';color:white;text-align:center;font-size:16px;font-weight:600;padding-top:12px">' + (i + 1);
                            html += '		<img src="'+iconSrcs[i]+'" style="margin-top:12px;display:none">';
                            html += '	</div>';
                            html += '   <div style="line-height:11px;font-size:11px;margin:8px 0 0 '+marginLeft+'px">'+stageData[i]+'</div>';//stage name
                            html += '</div>';
                        }
                        html += '</div>';

                        if(stageData.length > 0){
                            var container = Ext.create('Ext.container.Container',{
                                xtype:'container',
                                style:'overflow-x:hidden',
                                width:600,
                                padding:'0 0 23 0',
                                html:html
                            });
                            hiCon.insert(1, container);
                        }
                    },
                    drawPercent:function(values){
                        var num = (values.data_val === '')? 0 : values.data_val;
                        var v = '<div style="float:left;width:160px;height:15px">';
                        v    += '	<div style="float:left;height:12px;width:130px;border:1px solid #A0B4BF">';
                        v    += '		<div style="width:'+num+'%;height:100%;background-color:#A0B4BF"></div>';
                        v    += '	</div>';
                        v    += '	<div style="float:right;font-size:11px;line-height:11px">'+num+'%</div>';
                        v    += '</div>';
                        return v;
                    },
                    getContact:function(values){
                        return values.data_val.split('||')[0];
                    },
                    checkContact:function(values){
                        var val ;
                        if(values.data_val === '' || !values.data_val){
                            val = 'none';
                        }
                        else{
                            val = 'inline';
                        }
                        return val;
                    },
                    getBdIdx:function(values){
                        return values.data_val.split('||')[1];
                    },
                    checkChanges:function(values, index, parentIndex){
                        var val = '#545a6d';
                        if(parentIndex && parentIndex != hiCon.data.length - 1){
                            if(values.data_val != hiCon.data[parentIndex + 1].bd_data[index].data_val){
                                val = 'red';
                            }
                        }
                        return val;
                    },
                    showGrpIcon:function (needIcon, bdIdx, xindex, parentIndex, dataVal){
                        var v;
                        var iId = 'grpIcon_' + parentIndex + '_' + xindex;
                        if(needIcon){//display only for the first history
                            Ext.data.JsonP.request({
                                url:getViewApi(),
                                params:{
                                    bd_idx:bdIdx
                                },
                                success:function(response){
                                    var linkCate = response.binderView.bd_data[xindex - 1].cols_category;
                                    var el = document.getElementById(iId);
                                    el.setAttribute('relatedCategory', linkCate);
                                    Ext.get(el).dom.onclick = function(){
                                        getController('Viewer').showDataGroupInfomation(el, true);
                                    };
                                }
                            });
                            v = '<img class="grpIcon_'+xindex+'" id="'+iId+'" value="'+dataVal+'" src=resources/images/ico_link.png style="cursor:pointer;margin:0 0 0 10px">';
                        }
                        else{
                            v = '';
                        }
                        return v;
                    },
                    getLinkedName:function(values){
                        var links = values.data_val.split('，');
                        var cNames = [];
                        for(var i=0; i<links.length; i++){
                            cNames.push(links[i].split('＠')[0]);
                        }
                        return cNames.join();
                    },
                    renderImage:function(values){
                        var url = values.data_val;
                        var html = '<img src="'+url+'" style="max-height:350px;max-width:100%">';
                        return html;
                    },
                    getAttachedFile:function(values){
                        var fileList = values.bd_file;
                        var html = '<div style="width:100%;padding-top:8px;font-weight:bold">'+loc.main.attachFile+'</div>';
                        if(fileList.length > 0){
                            for(var i=0; i<fileList.length; i++){
                                var fileName = fileList[i].file_name;
                                var dPath = domain + '/binder/down/' + values.bd_idx + '/' + i;
                                var tmp = fileName.split('.');
                                var ext = tmp[tmp.length -1];
                                var iExts = ['gif', 'tif', 'png', 'jpg', 'ai', 'jpeg', 'eps', 'psd'];
                                var mExts = ['avi', 'flv', 'mov', 'mp4', 'wmv', 'asf', 'mkv'];
                                var ico = 'fa fa-file-o';
                                if(iExts.indexOf(ext) != -1){
                                    ico = 'fa fa-file-image-o';
                                }
                                if(ext == 'doc' || ext == 'docx'){
                                    ico = 'fa fa-file-word-o';
                                }
                                if(ext == 'xls' || ext == 'xlsx'){
                                    ico = 'fa fa-file-excel-o';
                                }
                                if(ext == 'ppt' || ext == 'pptx'){
                                    ico = 'fa fa-file-powerpoint-o';
                                }
                                if(ext == 'pdf'){
                                    ico = 'fa fa-file-pdf-o';
                                }
                                if(ext == 'txt'){
                                    ico = 'fa fa-file-text-o';
                                }
                                if(mExts.indexOf(ext) != -1){
                                    ico = 'fa fa-file-video-o';
                                }
                                html += '<div style="position:relative;padding:3px 10px 3px 10px;margin:3px 3px 0 0;border:1px solid #999999;border-radius:4px;display:inline-block">';
                                html += '	<i class="'+ico+'" aria-hidden="true" path="'+dPath+'" style="cursor:pointer;font-size:12px" onclick="document.location.href=this.getAttribute(\'path\')">'+' '+fileName+'</i>';
                                if(iExts.indexOf(ext) != -1){
                                    var tPath = fileList[i].thumb_path + '/M';
                                html += '	<i style="position:absolute;right:0;top:-4px;cursor:pointer" onclick="getController(\'Main\').copyToClipboard(\''+tPath+'\')" class="fa fa-clipboard" aria-hidden="true" title="Copy url to clipboard"></i>';
                                }
                                html += '</div>';
                            }
                        }

                        return html;
                    }
                }
            ]
        });


        return hiCon;
    },

    onActivityGridItemClick: function(dataview, record, infoTarget) {
        var me = this, i;
        var mainCtr = getController('Main');
        // mainCtr.getMainView().mask(loc.work.loading);
        /* hide viewCon to avoid blinking */
        var vPan = Ext.getCmp('viewPanel');

        if(record.get('bd_refer') === '' || !record.get('bd_refer')){
            alert(loc.error.noSubcategory);
            mainCtr.getMainView().unmask();
            return;
        }
        //get subcategories of clicked category
        Ext.data.JsonP.request({
            url:getCategoryListApi(record.get('bd_refer')),
            success:function(response){
                /* show alert in case sub category unintentionally removed */
                if(response.length === 0){
                    alert('Sub categories has not created for work management \nError code:102');
                    return;
                }
                mainCtr.getListTab().removeAll();
                var lastUpdatedTab; //to check what connected categori has the lastest data
                me.count = 0;
                var getSub = function(){
                    var subGrid = me.getWorkSubGrid(response, me.count);
                    subGrid.on('added', function(grid){
                        me.count ++;
                        if(me.count < response.length){
                            getSub(response[me.count]);
                        }
                        else{
                            me.count = 0;
                        }
                    });
                    //get latest updated data to select the tab at first time
                    subGrid.on('subcategorycomplete', function getLastUpdate(grid, lastUpdated, index){
                        grid.un('subcategorycomplete', getLastUpdate);
                        if(lastUpdated !== undefined){
                            if(lastUpdatedTab){
                                if(lastUpdatedTab.lastUpdated < lastUpdated){
                                    lastUpdatedTab = grid;
                                    lastUpdatedTab.lastUpdated = lastUpdated;
                                }
                            }
                            else{
                                lastUpdatedTab = grid;
                                lastUpdatedTab.lastUpdated = lastUpdated;
                            }
                        }
                        if(index == response.length - 1){//after all grid rendered
                            if(lastUpdatedTab){
                                mainCtr.getListTab().setActiveTab(lastUpdatedTab);
                                var lastGrid = lastUpdatedTab.getGrid();//get real grid according to grid type
                                if(lastGrid.store){
                                    var subRecord = lastGrid.store.getRange(0, 0)[0];
                                    if(subRecord){
                                        var bdIdx = subRecord.get('bd_idx');
                                        if(grid.type == 'text' || grid.type == 'normal'){//for text or normal type of grid
                                            if(window.innerWidth > 1600){//모니터 작으면
                                                //마지막 업데이트 자료가 있는 탭의 최초 첫번째 데이터 표시
                                                lastGrid.fireEvent('itemclick', lastGrid, subRecord, lastGrid.el.dom.innerHTML, 0);
                                            }
                                            lastGrid.setSelection(subRecord);//자동으로 선택 표시
                                        }
                                        else{//for gallary type of grid
                                            lastGrid.selModel.select(lastGrid.store.getAt(0));
                                            if(window.innerWidth > 1600){
                                                lastGrid.fireEvent('itemclick', lastGrid, lastGrid.getSelectionModel().getLastSelected());
                                            }
                                        }
                                    }
                                }
                            }
                            else{
                                mainCtr.getListTab().setActiveTab(0);
                            }
                            //add linked categories
                            if(record.get('idlinked') !== '' && record.get('idlinked') !== null && record.get('idlinked') !== undefined){
                                var lnkInfos = record.get('idlinked').split('，');
                                var cates = [];
                                var count = 0;
                                for(i=0; i<lnkInfos.length; i++){
                                    if(lnkInfos[i].indexOf('＠') == -1){
                                        Ext.Msg.alert('Error', 'The "linked" code is not valid, Error code : 103');
                                        return;
                                    }
                                    var objs = lnkInfos[i].split('＠');
                                    cates.push({cId:objs[1], title:objs[0]});
                                    var tabTitle = '<i style="color:white;margin-right:8px" class="fa fa-link" aria-hidden="true"></i>'+record.get('bd_subject')+'-'+objs[0];
                                    var lkGrid = mainCtr.getGrid(objs[1], 'normal', tabTitle);
                                    lkGrid.isLinked = true;
                                    lkGrid.on('categoryoptionupdate', function onCategoryUpdate(targetGrid){
                                        targetGrid.un('categoryoptionupdate', onCategoryUpdate);
                                        mainCtr.displayGrid(targetGrid, false);
                                        mainCtr.getListTab().add(targetGrid);
                                    });
                                }

                            }
                        }
                    });
                };
                //repeat this as many as number of subcategories
                getSub(response[me.count]);

                //render workgroup information panel
                infoTarget.removeAll();
                /* add status to header */
                if(record.get('idstage')){
                    var process = record.get('idstage');
                    if(infoTarget.getHeader().down('#status')){
                        infoTarget.getHeader().down('#status').destroy();
                    }

                    infoTarget.getHeader().insert(1, {
                        xtype:'label',
                        itemId:'status',
                        style:'font-size:12px',
                        html:'<i class="fa fa-signal" aria-hidden="true" style="margin-right:6px"></i>' + process,
                        margin:'0 20 0 0'
                    });
                }
                var hiCon = me.getWorkInfoPanel(record, dataview.grid.categoryColsList);
                hiCon.setConfig('padding', 15);
                infoTarget.add(hiCon);
                Ext.data.JsonP.request({
                    url:getHistoryApi(),
                    params:{
                        bd_idx:record.get('bd_idx')
                    },
                    success:function(response){
                        var historyList = response.binderList;
                        if(historyList.length > 0)
                            hiCon.setData(historyList);//update history list after history loaded
                    }
                });
            }
        });

        //
        Ext.data.JsonP.request({
            url:getDataWriteApi(),
            params:{
                bd_idx:record.get('bd_idx')
            },
            success:function(response){
                var colsList = response.categoryColsList;
                var fStore = Ext.getStore('fStore_' + record.get('ca_id'));
                if(fStore === undefined){
                    fStore = Ext.create(appName + '.store.FieldStore',{
                        storeId:'fStore_' + record.get('ca_id'),
                        data:colsList
                    });
                }
                else{
                    fStore.setData(colsList);
                }

            }
        });
    },

    getWorkSubGrid: function(cateData, index) {
        var me = this;
        var mainCtr = getController('Main');
        var gridType = getController('Config').getLayout(cateData[index].data.layout);
        var caOpt = getOption(cateData[index].data.ca_option);
        if(caOpt.schedule){
            gridType = 'schedule';
        }
        if(caOpt.colorChip){
            gridType = 'colorChip';
        }
        var tabTitle = cateData[index].title;
        if(caOpt.categoryName !== undefined && caOpt.categoryName !== undefined){
            tabTitle = caOpt.categoryName;
        }
        var grid = mainCtr.getGrid(cateData[index].data.id, gridType, tabTitle);
        grid.numOfItem = cateData[index].data.page_row;
        grid.cateOption = caOpt;
        grid.subjectTitle = (cateData[index].data.ca_subject_title === '')? loc.main.title : cateData[index].data.ca_subject_title;
        grid.usedBy = 'component';
        grid.on('categoryoptionupdate', function onCategoryUpdate(mainGrid){
            mainGrid.un('categoryoptionupdate', onCategoryUpdate);
            mainCtr.displayGrid(mainGrid, false);
            mainCtr.getListTab().add(mainGrid);
        });
        //dispatch event after each sub category rendered
        grid.on('listcomplete', function onListComplete(cId, mainGrid){
            mainGrid.un('listcomplete', onListComplete);
            var regDate;
            var store;
            if(mainGrid.type == 'normal' || mainGrid.type == 'text'){
                store = mainGrid.store;
            }
            else{
                store = mainGrid.down('dataview').store;
            }
            if(store){
                var fstRec = store.getRange(0, 0)[0];
                if(fstRec){
                    if(!detectIE()){
                        regDate = new Date(fstRec.get('bd_regdate'));
                    }
                    else{
                        regDate = new Date(fstRec.get('bd_regdate').slice(0, 10));
                    }
                }
            }
            mainGrid.fireEvent('subcategorycomplete', mainGrid, regDate, index);
        });
        if(caOpt.categoryCode == 'member'){//for members category
            grid.isMember = true;
        }
        return grid;
    },

    showSalesActivity: function(title, binderList) {
        var me = this;
        var saWin = Ext.getCmp('saWin');
        if(!saWin){
            saWin = Ext.create(appName + '.view.SalesInfoByClientWin', {
                title:loc.work.seeActivity,
                currentPage:1
            }).show();
        }

        for( var i=0; i<binderList.length; i++){
            binderList[i].title = title;
            var regdate = binderList[i].bd_regdate.slice(0, 10);
            binderList[i].bd_regdate = regdate;
        }


        var lStore = Ext.create('Ext.data.Store', {
            fields:[
                { name:'title'},
                { name:'bd_subject' },
                { name:'bd_regdate' }
            ],
            data:binderList
        });

        var dv = Ext.create('Ext.view.View',{
            region: 'north',
            width:'100%',
            store:lStore,
            itemSelector: 'div.sales-list',
            tpl: [//sales activity list at left-top panel
                '<tpl for=".">',
                '	<div style="font-weight:bold;width:100%;cursor:default">{title}</div>',
                '  	<div class="sales-list" style="width:100%;height:31px;cursor:pointer">{bd_subject}/{bd_regdate}</div>',
                '</tpl>'
            ],
            listeners:{
                itemclick:function(dataview, record,item){//when click the list of sales activities at left-top panel
                    Ext.data.JsonP.request({//get overview information from server
                        url:getDataWriteApi(),
                        params:{
                            bd_idx:record.get('bd_idx')
                        },
                        success:function(response){
                            var colsList = response.categoryColsList;
                            var fStore = Ext.getStore('fStore_' + record.get('ca_id'));
                            if(fStore === undefined){
                                fStore = Ext.create(appName + '.store.FieldStore',{
                                    storeId:'fStore_' + record.get('ca_id'),
                                    data:colsList
                                });
                            }
                            else{
                                fStore.setData(colsList);
                            }

                            var titleBar = {

                            };

                            /* Panel for display sales info at left bottom */
                            var infoCon = me.getWorkInfoPanel(record, colsList);
                            var oldInfoCon = saWin.down('#workInfoPan');
                            infoCon.setHeight('70%');
                            infoCon.setStyle('margin-top', '20px');
                            if(oldInfoCon) oldInfoCon.destroy();
                            saWin.down('#westPanel').add(infoCon);
                        }
                    });

                    /* list up sub categories and data included in the activity at right panel */
                    var viewAct = saWin.down('#centerPanel').down('#viewAct');
                    var newTitle = record.get('title') + ' - ' + loc.work.seeActContent;
                    saWin.down('#centerPanel').setTitle(newTitle);
                    viewAct.setHtml('');

                    Ext.data.JsonP.request({
                        url:getCategoryListApi(record.get('bd_refer')),
                        success:function(response){
                            response.unshift({title:'All', data:{id:'all'}});
                            var store = Ext.create('Ext.data.Store', {
                                fields:[{name:'title'}],
                                data:response
                            });

                            var count = 1; // as "All" is count 0
                            var getList = function(target, isSelectOnly){
                                var dtS = getController('Util').parseDate(saWin.down('#dateFrom').getValue());
                                var dtE = getController('Util').parseDate(saWin.down('#dateTo').getValue());
                                var rng = saWin.down('#folderCom').getValue();

                                /* when a value exists only 'To field' or "From field" */
                                if(dtS === '' && dtE !== ''){
                                    dtS = dtE;
                                }
                                if(dtE === '' && dtS !== ''){
                                    dtE = dtS;
                                }

                                var query = '';
                                if(dtS) query = '&se_sdate=' + dtS;
                                if(dtS) query += '&se_edate=' + dtE;
                                Ext.data.JsonP.request({
                                    url:domain + '/json/list?ca_id=' + target.data.id + '&page=' + saWin.currentPage + '&page_size=' + 10 + query,
                                    success:function(result){
                                        var i, j;
                                        var list = result.binderList;
                                        var html = '<div style="float:left;width:100%;margin:0 0 0 0;">';
                                        html    += '	<div class="activity-folder-title">'+target.title+'</div>';
                                        if(list.length === 0){
                                            html    += '	<div style="margin:10px">'+loc.viewer.nothingToDisplay+'</div>';
                                        }
                                        else{
                                            for(i=0; i<list.length; i++){//show field list
                                                html    += '	<table width="600" style="flat:left;border-bottom:1px solid #cecece;margin:20px 0 0 10px">';
                                                html    += '		<tr>';
                                                html    += '			<td colspan=2';
                                                html    += '				<span style="font-weight:bold">';
                                                html    +=         list[i].bd_subject;
                                                html    +=        			'</span>';
                                                html    += '				&nbsp;&nbsp;&nbsp;&nbsp;'+list[i].bd_regdate.slice(0, 10) + '&nbsp;&nbsp;&nbsp;&nbsp;' + list[i].bd_name;
                                                html    += '    		</td>';
                                                html    += '		</tr>';
                                                var colsList = list[i].bd_data;
                                                for(j=0; j<colsList.length; j++){
                                                    var dataVal = colsList[j].data_val;
                                                    if(dataVal.indexOf('||') != -1){//As no cols_type in list api
                                                        var arr = dataVal.split('||');//for colorchk field
                                                        dataVal = '<div style="float:left;width:12px;height:12px;background-color:'+arr[0]+'"></div>';
                                                        dataVal += '<div style="float:left"> ' + arr[1] + '</div>';
                                                    }
                                                    html    += '		<tr>';
                                                    html    += '			<td width="150">'+colsList[j].cols_name+'</td>';
                                                    html    += '			<td width="450">'+dataVal+'</td>';
                                                    html    += '		</tr>';
                                                }
                                                var fileList = list[i].bd_file;
                                                if(fileList.length > 0){
                                                    html    += '		<tr>';
                                                    html    += '			<td>'+loc.main.file+'</td>';
                                                    html    += '			<td>';
                                                    for(j =0; j<fileList.length; j++){
                                                        var fileName = fileList[j].file_name;
                                                        var dPath = domain + '/binder/down/' + list[i].bd_idx + '/' + j;
                                                        var tmp = fileName.split('.');
                                                        var ext = tmp[tmp.length -1];
                                                        var iExts = ['gif', 'tif', 'png', 'jpg', 'ai', 'jpeg', 'eps', 'psd'];
                                                        var mExts = ['avi', 'flv', 'mov', 'mp4', 'wmv', 'asf', 'mkv'];
                                                        var ico = 'fa fa-file-o';
                                                        if(iExts.indexOf(ext) != -1){
                                                            ico = 'fa fa-file-image-o';
                                                        }
                                                        if(ext == 'doc' || ext == 'docx'){
                                                            ico = 'fa fa-file-word-o';
                                                        }
                                                        if(ext == 'xls' || ext == 'xlsx'){
                                                            ico = 'fa fa-file-excel-o';
                                                        }
                                                        if(ext == 'ppt' || ext == 'pptx'){
                                                            ico = 'fa fa-file-powerpoint-o';
                                                        }
                                                        if(ext == 'pdf'){
                                                            ico = 'fa fa-file-pdf-o';
                                                        }
                                                        if(ext == 'txt'){
                                                            ico = 'fa fa-file-text-o';
                                                        }
                                                        if(mExts.indexOf(ext) != -1){
                                                            ico = 'fa fa-file-video-o';
                                                        }
                                                        html    += '				<i class="'+ico+'" aria-hidden="true" path="'+dPath+'" style="cursor:pointer;margin-right:8px;font-size:12px" onclick="document.location.href=this.getAttribute(\'path\')">'+' '+fileName+'</i>';
                                                    }
                                                    html    += '			</td>';
                                                    html    += '		</tr>';
                                                }
                                                html    += '	</table>';
                                                html    += '	<div style="padding:10px">'+list[i].bd_content+'</div>'; //for showing bd_content
                                            }
                                        }
                                        html    += '</div>';
                                        viewAct.setHtml(viewAct.html + html);
                                        if(!isSelectOnly){//in case, sub category has selected by combo
                                            count ++;
                                            if(count < response.length){
                                                getList(response[count]);
                                            }
                                        }

                                        /* render 더보기 button */
                                        var moreBtn = saWin.down('#centerPanel').down('#moreButton');
                                        if(result.page.page < result.page.maxpage && saWin.down('#centerPanel').down('#folderCom').getRawValue() != 'All'){
                                            if(!moreBtn){
                                                moreBtn = {
                                                    xtype:'label',
                                                    html:'<i class="fa fa-chevron-down" aria-hidden="true" style="margin-right:10px"></i>'+ loc.work.seeMore,
                                                    itemId:'moreButton',
                                                    height:30,
                                                    style:'color:black;text-align:center;cursor:pointer',
                                                    listeners:{
                                                        render:function(label){
                                                            label.el.on('click', function(el){
                                                                saWin.currentPage ++;
                                                                var rng = saWin.down('#folderCom').getRawValue();
                                                                var rec = saWin.down('#folderCom').findRecordByDisplay(rng);

                                                                viewAct.setHtml('');
                                                                var cId = rec.get('data').id;
                                                                getList(rec.data, true);

                                                            });
                                                        }
                                                    }
                                                };
                                                saWin.down('#centerPanel').add(moreBtn);
                                            }
                                        }
                                        else{
                                            if(moreBtn){
                                                moreBtn.destroy();
                                            }
                                        }
                                    }
                                });
                            };

                            /* combobox for selecting one of sub category */
                            saWin.down('#searchCon').removeAll();
                            var folderCom = Ext.create('Ext.form.ComboBox', {
                                itemId:'folderCom',
                                store: store,
                                hideLabel:true,
                                margin:'0 0 0 17',
                                displayField: 'title',
                                valueField: 'data.id',
                                listeners:{
                                    select:function(combo , record , eOpts){
                                        saWin.currentPage = 1;
                                        viewAct.setHtml('');
                                        var cId = record.get('data').id;
                                        if(cId == 'all'){//when select "all" at combo, show all sub categories
                                            count = 1;
                                            getList(response[count]);
                                        }
                                        else{//otherwise, show only the selected sub category
                                            getList(record.data, true);
                                        }
                                    }
                                }
                            });
                            folderCom.setValue(response[0].title);
                            folderCom.setDisabled(false);
                            folderCom.store = store;
                            saWin.down('#searchCon').add(folderCom);

                            /* render date buttons */
                            var dtFldFrom = Ext.create('Ext.form.field.Date',{
                                fieldLabel:loc.search.from,
                                labelWidth:40,
                                maxValue:new Date(),
                                padding:'0 0 0 10',
                                width:160,
                                itemId:'dateFrom'
                            });
                            var dtFldTo = Ext.create('Ext.form.field.Date',{
                                fieldLabel:loc.search.to,
                                labelWidth:40,
                                maxValue:new Date(),
                                padding:'0 0 0 10',
                                width:160,
                                itemId:'dateTo'
                            });
                            /* render search button */
                            var btnFind = {
                                xtype:'button',
                                margin:'0 0 0 10',
                                data:response,
                                itemId:'searchBtn',
                                text:loc.search.search,
                                handler:function(button){
                                    var ctn = button.up('container');
                                    var rng = ctn.down('#folderCom').getRawValue();
                                    var rec = ctn.down('#folderCom').findRecordByDisplay(rng);

                                    viewAct.setHtml('');
                                    saWin.currentPage = 1;

                                    var cId = rec.get('data').id;
                                    if(cId == 'all'){//when select "all" at combo, show all sub categories
                                        count = 1;
                                        getList(response[count]);
                                    }
                                    else{//otherwise, show only the selected sub category
                                        getList(rec.data, true);
                                    }

                                }
                            };
                            saWin.down('#searchCon').add(dtFldFrom);
                            saWin.down('#searchCon').add(dtFldTo);
                            saWin.down('#searchCon').add(btnFind);

                            getList(response[count]);

                        }
                    });

                }
            }
        });

        if(binderList.length > 0){
            //"표시할 내용이 없습니다" 날림
            var noAct = saWin.down('#westPanel').el.select('.noActivity').elements[0];
            if(noAct){
                Ext.get(noAct).destroy();
            }
        }
        saWin.down('#findedList').add(dv);

    },

    /* 새로운 Work 생성 */
    createNewActivity: function(upWin, categoryName) {
        var me = this;
        var workListPan = getController('Main').getMainView().down('#workListPanel');
        Ext.data.JsonP.request({//create new activity category
            url:getCategoryUpdateApi(),
            params:{
                ca_id:upWin.categoryId,
                ca_name:categoryName
            },
            success:function(response){
                var actId = response.ca_id;
                if(response.result){
                    upWin.count = 0;
                    var parameters = [];
                    for(var i=0; i<workListPan.fieldSet.length; i++){
                        parameters[i] = workListPan.fieldSet[i];
                        parameters[i].sourceId = workListPan.fieldSet[i].ca_id;
                        parameters[i].ca_id = actId;
                        parameters[i].ca_uselevel = 1;
                        //흩어진 같은 서브카테고리를 통틀어 검색하기 위한 준비
                        parameters[i].ca_option = workListPan.fieldSet[i].ca_option + '--inherit:' + parameters[i].sourceId;
                    }
                    var createCategory = function(parameter){
                        Ext.data.JsonP.request({
                            url:getCategoryUpdateApi(),
                            params:parameter,
                            success:function(value){
                                if(value.result){
                                    /* field id of source field to clone */
                                    Ext.data.JsonP.request({//fields mapping by source
                                        url:getColsCopyApi(parameter.sourceId, value.ca_id),
                                        success:function(){
                                            upWin.count += 1;
                                            if(upWin.count == parameters.length){
                                                upWin.count = 0;
                                            }
                                            if(upWin.count !== 0){//repeat creating category
                                                createCategory(parameters[upWin.count]);
                                            }
                                            else{//save reference category id to refer field of uploadform
                                                upWin.down('form').setRefer(response.ca_id);
                                                upWin.on('uploadcomplete', function onUploadComplete(bdIdx, pluginName){
                                                    if(pluginName == 'workGroup'  || pluginName == 'projectGroup'){
                                                        upWin.un('uploadcomplete', onUploadComplete);
                                                        upWin.target.getStore().load();
                                                    }
                                                });
                                                getController('Post').showUploadStatus(upWin, true);
                                            }
                                        }
                                    });
                                }
                                else{
                                    alert('Something was wrong while creating new activity, Error code:100');
                                }
                            }
                        });
                    };
                    createCategory(parameters[0]);
                }
                else{
                    alert('Something was wrong while creating new activity, Error code:100');
                }
            }

        });
    },

    deleteActivity: function() {
        var mainView = getController('Main').getMainView();
        var grid = mainView.down('#workListPanel').down('grid');
        var tabs = getController('Main').getListTab();
        var chks = grid.getSelectionModel().getSelection();
        if(chks.length === 0){
            Ext.MessageBox.alert(loc.main.notice, loc.upload.noneSelected);
            return;
        }
        var selected = chks[0];
        var h = selected.get('file_height');
        var w = selected.get('file_width');
        var tSize = 100;
        var bSize;
        if(w < tSize && h < tSize){
            bSize = 'auto';
        }
        else{
            bSize = 'cover';
        }
        var html = '<table style="border:1px solid #cecece;width:100%"><tr>';
        html    += '<td width=100>';
        html  	+=    '<div style="float:left;width:100px;height:100px;background-image:url(' + selected.get('thumb_path');
        html 	+= ');background-size:'+bSize+'" class="div-image"></div>';
        html    += '</td>';
        html    += '<td style="padding-left:15px">';
        html    += '<span style="font-weight:bold">'+loc.main.title+': </span>' + selected.get('bd_subject');
        html    += '<br><span style="font-weight:bold">'+loc.main.regDate+': </span>' + selected.get('bd_regdate');
        html    += '<br><span style="font-weight:bold">'+loc.main.user+': </span>' + selected.get('bd_name');
        html    += '</td>';
        html    += '</tr></table>';
        var delWin = Ext.create('Ext.window.Window', {
            modal:true,
            layout:{
                type:'vbox',
                align: 'stretch'
            },
            bodyStyle:'padding:20px',
            title:loc.work.deleteActivityTitle,
            items:[
                {
                    xtype:'container',
                    height:tSize,
                    width:400,
                    html:html,
                    margin:'0 0 20 0'
                },
                {
                    xtype: 'label',
                    text: loc.main.delAlert
                },
                {
                    xtype:'container',
                    layout:{
                        type:'hbox',
                        pack:'center'
                    },
                    margin:'10 0 10 0',
                    items:[
                        {
                            xtype:'button',
                            text:loc.menu.remove,
                            handler:function(button){
                               var refer = selected.get('bd_refer');
                                Ext.data.JsonP.request({
                                    url:domain  + '/json/cateDelete?ca_id=' + refer,
                                    success:function(response){
                                        if(response.result){
                                            Ext.toast('The project selected removed');
                                        }
                                    }
                                });
                                Ext.data.JsonP.request({
                                    url:getDeleteDataApi(),
                                    params:{
                                        bd_idx:selected.get('bd_idx')
                                    },
                                    success:function(response){
                                        if(response.result){
                                            grid.getStore().load();
                                            tabs.removeAll();
                                            delWin.close();
                                            var viewer = Ext.getCmp('viewPanel').down('#viewer');
                                            if(viewer){
                                                if(selectedCategory == viewer.categoryId){
                                                    viewer.destroy();
                                                }
                                            }
                                        }
                                    }
                                });
                            }
                        },
                        {
                            xtype:'button',
                            text:loc.upload.cancel,
                            style:'margin-left:6px',
                            handler:function(button){
                                button.up('window').close();
                            }
                        }
                    ]
                }
            ]
        }).show();
    },

    selectMember: function(cId, type, target) {
        var me = this;
        var title;
        if(type == 'message' || type == 'textMessage' || type == 'mustSee'){
            title = loc.config.userList;
        }
        else{
            title = loc.config.addMember;
        }
        var isMustSee = (type == 'mustSee')? true : false;
        var store = Ext.getStore('UserStore');
        store.getProxy().setUrl(domain + '/json/member?ca_id=' + cId);
        store.on('load', function onStoreLoad(){
            store.un('load', onStoreLoad);
            var userListWin = Ext.create('Ext.window.Window', {
                width:740,
                padding:15,
                ghost:false,
                modal:true,
                scrollable:'y',
                maxHeight:windowMaxHeight,
                title:title,
                items:[
                    {
                        xtype:'grid',
                        store:store,
                        selModel: {
                            selType: 'checkboxmodel'
                        },
                        columns:[
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_file',
                                width:35,
                                scrollable:true,
                                renderer:function(value){
                                    var val;
                                    if(!value){
                                        val = '<i class="fa fa-user" aria-hidden="true" style="font-size:20px;color:#A3A7B0"></i>';
                                    }
                                    else{
                                        var css = 'width:25px;height:25px;background-image:url(\''+value+'\');background-repeat:no-repeat;background-size:cover';
                                        val = '<div style="'+css+'"></div>';
                                    }
                                    return val;
                                }

                            },
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_name',
                                text:loc.main.name,
                                width:120
                            },
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_duty',
                                text:loc.work.position,
                                width:100,
                                renderer:function(value){
                                    if(value == 'null')  value = '';
                                    return value;
                                }
                            },
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_groupname',
                                text:loc.main.department,
                                width:120
                            },
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_email',
                                text:loc.main.email,
                                width:160
                            },
                            {
                                xtype:'gridcolumn',
                                dataIndex:'nvm_cellphone',
                                text:loc.main.phone,
                                width:140
                            }
                        ],
                        height:'100%',
                        width:'100%',
                        dockedItems:[
                            {
                                xtype: 'pagingtoolbar',
                                dock: 'top',
                                height:45,
                                store:store,
                                displayInfo: true,
                                cls:'gridToolbar',
                                displayMsg: 'Data {0} - {1} of {2}',
                                items: [
                                    {
                                        xtype: 'tbseparator'
                                    },
                                    {
                                        xtype: 'textfield',
                                        itemId:'fdSearchAll',
                                        fieldLabel: loc.main.name,
                                        labelWidth:35,
                                        width:150,
                                        listeners:[
                                            {
                                                render:function(field, e){
                                                    field.el.on('keyup', function(e){
                                                        if(e.keyCode == 13){
                                                            var findIt = field.up('pagingtoolbar').down('#findIt');
                                                            findIt.fireEvent('click');
                                                        }
                                                    });
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        xtype:'button',
                                        height:35,
                                        glyph: 'xf002@FontAwesome',
                                        tooltip:loc.search.search,
                                        itemId:'findIt',
                                        /* serach data from selected category */
                                        listeners:{
                                            click:function(button){
                                                var val = userListWin.down('#fdSearchAll').getValue();
                                                var query = '?nvm_name=' + val;
                                                var store = userListWin.down('grid').getStore();
                                                store.currentPage = 1;
                                                store.load({
                                                    url:domain + '/json/member' + query
                                                });
                                            }
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                ],
                dockedItems:[
                    {
                        xtype:'container',
                        width:'100%',
                        padding:'20 0 0 0',
                        layout:{
                            type:'hbox',
                            pack:'middle'
                        },
                        dock: 'bottom',
                        items:[
                            {
                                xtype:'button',
                                margin:'0 0 0 10',
                                text:loc.upload.cancel,
                                glyph:'xf00d@FontAwesome',
                                width:100,
                                handler:function(button){
                                    button.up('window').close();
                                }
                            }
                        ]
                    }
                ],
                listeners:{
                    render:function(component){
                        /* add additional buttons */
                        var bBar = component.getDockedItems()[1];
                        if(type == 'message' || type == 'textMessage'){
                            var btnWrite = {//button for writing a message
                                xtype:'button',
                                glyph: 'xf24a@FontAwesome',
                                text:loc.message.writeMessage,
                                style:'padding-left:20px;padding-right:20px',
                                listeners:{
                                    click:function(button){
                                        var grid = button.up('window').down('grid');
                                        var selected = grid.getSelectionModel().getSelection();
                                        if(selected.length === 0){
                                            Ext.Msg.alert(loc.main.notice, loc.upload.noneSelected);
                                            return;
                                        }
                                        getController('Message').sendMessage(selected);
                                        userListWin.close();
                                    }
                                }
                            };
                            bBar.insert(0, btnWrite);
                        }
                        else{
                            var btnNext = {
                                xtype:'button',
                                text:loc.menu.next,
                                glyph:'xf138@FontAwesome',
                                hidden:isMustSee,
                                width:100,
                                listeners:{
                                    click:function(button){
                                        var grid = button.up('window').down('grid');
                                        var selected = grid.getSelectionModel().getSelection();
                                        if(selected.length === 0){
                                            Ext.toast(loc.upload.noneSelected);
                                        }
                                        else{
                                            button.up('window').close();
                                            me.setJob(selected, cId);
                                        }
                                    }
                                }
                            };
                            var btnDirect = {//직접입력버튼
                                xtype:'button',
                                margin:'0 0 0 10',
                                glyph: 'xf040@FontAwesome',
                                hidden:isMustSee,
                                text:loc.work.directInput,
                                style:'padding-left:20px;padding-right:20px',
                                listeners:{
                                    click:function(button){
                                        userListWin.close();
                                        getController('Post').showNewPost(selectedCategory);
                                    }
                                }
                            };
                            var btnAdd = {//추가버튼
                                xtype:'button',
                                margin:'0 0 0 10',
                                iconCls:'fa fa-plus-circle',
                                hidden:!isMustSee,
                                text:loc.main.add,
                                style:'padding-left:20px;padding-right:20px',
                                listeners:{
                                    click:function(button){
                                        var grid = button.up('window').down('grid');
                                        var selected = grid.getSelectionModel().getSelection();
                                        var values = [],
                                            names = [],
                                            units = [];
                                        for(var i=0; i<selected.length; i++){
                                            var unit = Ext.create(appName + '.view.DeletableUnit');
                                            unit.addImage(selected[i].get('nvm_file'));
                                            unit.addContent({
                                                xtype:'label',
                                                text:selected[i].get('nvm_name')
                                            });
                                            unit.userId = selected[i].get('nvm_id');
                                            target.add(unit);
                                        }
                                        userListWin.close();
                                    }
                                }
                            };
                            bBar.insert(0, btnDirect);
                            bBar.insert(0, btnNext);
                            bBar.insert(0, btnAdd);
                        }
                    }
                }
            }).show();
        });
        store.load();
    }

});
