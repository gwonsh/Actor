/*
 * File: app/controller/Message.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.controller.Message', {
    extend: 'Ext.app.Controller',

    sendMessage: function(users) {
        var isSendDoc = (users === undefined || users === '')? true : false;
        var winTitle = (isSendDoc)? loc.message.sendingDoc : loc.message.sendingMessage;
        var activeTab;
        var selected = [];
        var viewer = Ext.getCmp('viewPanel').down('#viewer');
        var hideMessageType = true;
        var me = this;
        var cId = '';
        if(isSendDoc){//선택한 문서를 메시지로 보내려고 할때
            if(!viewer){
                Ext.Msg.alert('', loc.upload.noneSelected);
                return;
            }
            if(viewer.info.approvalList){
                if(viewer.info.approvalList.length > 0){
                    hideMessageType = false;
                }
            }
            var activeTab = getController('Main').getListTab().getActiveTab();
            if(activeTab.type == 'gallery' || activeTab.type == 'schedule' || activeTab.type == 'colorChip'){
                selected = activeTab.down('dataview').getSelectionModel().getSelection();
            }
            else{
                selected = activeTab.getSelectionModel().getSelection();
            }

            if(activeTab.type != 'schedule'){
                if(selected.length === 0 || selected === undefined){
                    Ext.Msg.alert('Alert', loc.upload.noneSelected);
                    return;
                }
            }
            cId = selected[0].get('ca_id');
        }

        var messageWin = Ext.getCmp('messagingWin');
        ////////////////////////////
        // sending message window //
        ////////////////////////////
        if(messageWin === undefined){
            var win = Ext.create('Ext.window.Window', {
                title:winTitle,
                width:680,
                modal:true,
                padding:15,
                scrollable:true,
                msgType:0,
                ghost:false,
                maxHeight:windowMaxHeight,
                id:'messagingWin',
                layout:{
                    type:'vbox',
                    align: 'stretch'
                },
                dockedItems: [
                    {
                        xtype:'container',
                        width:'100%',
                        dock: 'bottom',
                        padding:'16 0 0 0',
                        layout:{
                            type:'hbox',
                            pack:'middle'
                        },
                        items:[
                            {
                                ////////////////////
                                // sending button //
                                ////////////////////
                                xtype:'button',
                                text:loc.viewer.send,
                                margin:'0 0 0 10',
                                width:100,
                                glyph: 'xf24a@FontAwesome',
                                handler:function(button){//when click the send button
                                    var ww = button.up('window');
                                    var units = ww.down('#selectedCon').items.items;//list of selected recievers
                                    if(units.length === 0){
                                        Ext.Msg.alert('Alert', loc.message.noTarget);
                                        return;
                                    }
                                    var title = ww.down('#title').getValue();
                                    var content = ww.down('#htmlContent').getValue();
                                    var bdIdx = 0;
                                    var rIds = '';
                                    var msgType = 0;
                                    var msgOpt = '';
                                    localforage.getItem('recentReciever', function(err, value){
                                        var tmpSenders = [];
                                        var len = units.length;
                                        var limit = 20;
                                        if(len > limit) len = limit;
                                        var i;
                                        for(i=0; i<len; i++){//get selected recievers info and make it to Array
                                            tmpSenders.push({
                                                nvm_id:units[i].userId,
                                                nvm_name:units[i].userName,
                                                nvm_level:units[i].userLevel,
                                                nvm_file:units[i].userPhoto
                                            });
                                        }
                                        if(!value){//in case adding the first item
                                            localforage.setItem('recentReciever', tmpSenders);
                                        }
                                        else{
                                            var newList = [];//새로운 수신자들 중 최근보낸 목록과 중복 되지 않는 수신자들
                                            var existIds = [];
                                            for(i=0; i<value.length; i++){
                                                existIds.push(value[i].nvm_id);
                                            }

                                            for(i=0; i<tmpSenders.length; i++){
                                                if(existIds.indexOf(tmpSenders[i].nvm_id) == -1){
                                                    newList.push(tmpSenders[i]);
                                                }
                                            }
                                            var arr = newList.concat(value);
                                            if(arr.length > limit){
                                                arr = arr.slice(0, limit);
                                            }
                                            localforage.setItem('recentReciever', arr);
                                        }
                                    });
                                    for(var i=0; i<units.length; i++){
                                        if(i=== 0){
                                            rIds = units[i].userId;
                                        }
                                        else{
                                            rIds += ', ' + units[i].userId;
                                        }
                                    }

                                    if(isSendDoc){
                                        var msgFor = ww.down('#msgFor');
                                        var instantIndex = getController('Main').getListTab().getActiveTab().instanceFormIndex;
                                        /* if form has been changed, instanceFormIndex should be the formIndex */
                                        var formIndex = (instantIndex === undefined)? viewer.formIndex : instantIndex;
                                        if(msgFor.getValue().rb === undefined){
                                            Ext.Msg.alert('Alert', loc.message.selectType);
                                            return;
                                        }
                                        var isEditable = ww.down('#isEditable').getValue();
                                        bdIdx = viewer.bdIdx;
                                        msgType = ww.msgType;
                                        var tmpOpt = {
                                            formIndex:formIndex,
                                            categoryId:viewer.categoryId,
                                            caOption:config.option,
                                            categoryName:activeTab.categoryInfo.ca_name,
                                            isEditable:isEditable
                                        };
                                        msgOpt = JSON.stringify(tmpOpt);
                                    }

                                    Ext.Ajax.request({
                                        url: domain + '/message/write',
                                        method: 'POST',
                                        params: {
                                            bd_idx:bdIdx,
                                            recv_id:rIds,
                                            subject:title,
                                            message_type:msgType,
                                            message_option:msgOpt,
                                            content:encodeURIComponent(content)
                                        },
                                        success: function(response){
                                            Ext.toast(loc.message.complete);
                                            Ext.getStore('MessageOutStore').load();
                                            ww.close();
                                        },
                                        failure: function(){console.info('sending message failure');}
                                    });
                                }
                            },
                            {
                                ////////////////////
                                // cancel button  //
                                ////////////////////
                                xtype:'button',
                                text:loc.upload.cancel,
                                glyph:'xf00d@FontAwesome',
                                width:100,
                                margin:'0 0 0 10',
                                handler:function(button){
                                    win.close();
                                }
                            }
                        ]
                    }
                ],
                items:[
                    {
                        ///////////////////////////////////
                        // Container of the address book //
                        ///////////////////////////////////
                        xtype:'container',
                        layout:{
                            type:'hbox',
                            align:'left'
                        },
                        padding:6,
                        hidden:true,
                        width:'100%',
                        itemId:'messageType'
                    },
                    {
                        /////////////////////////////
                        // Container for recievers //
                        /////////////////////////////
                        xtype:'container',
                        layout:{
                            type:'column'
                        },
                        padding:6,
                        itemId:'selectedCon'
                    },
                    {
                        /////////////////////////////
                        // The toggle for editable //
                        /////////////////////////////
                        xtype:'checkbox',
                        fieldLabel:loc.message.allowEdit,
                        itemId:'isEditable',
                        margin:'-17 0 0 0',
                        hidden:true
                    },
                    {
                        ////////////////////
                        // The title field//
                        ////////////////////
                        xtype:'textfield',
                        itemId:'title',
                        emptyText:loc.main.title,
                        listeners:{
                            afterrender:function(tf){
                                if(isSendDoc){
                                    if(activeTab.type != 'schedule'){
                                        tf.setValue(selected[0].get('bd_subject'));
                                    }
                                    else{
                                        tf.setValue(activeTab.getTitle());
                                    }
                                }
                            }
                        }
                    },
                    {
                        ///////////////////////////////////
                        // The textarea to leave message //
                        ///////////////////////////////////
                        xtype:'htmleditor',
                        itemId:'htmlContent',
                        hideLabel: true,
                        enableFont: false,
                        boxLabel:loc.main.description,
                        height:250,
                        listeners:{
                            afterrender:function(editor){
                                if(isSendDoc){
                                    if(activeTab.type == 'schedule'){
                                        var inHtml = activeTab.items.items[0].el.dom.innerHTML;
                                        editor.setValue(inHtml);
                                    }
                                    else{

                                    }
                                }
                            }
                        }
                    }
                ],
                listeners:{
                    afterrender:function(msgWin){
                        var title = msgWin.down('#title');
                        var msgTypeCon = msgWin.down('#messageType');
                        /* show the selected user list top of window */
                        if(Ext.isElement(users)){
                            var userName = users.getAttribute('userName');
                            var userId = users.getAttribute('userId');
                            var gidx = users.getAttribute('gidx');
                            me.addReciever(msgWin.down('#selectedCon'), userId, userName);
                        }
                        else if(Array.isArray(users)){//멤버목록에서 대상이 선택 되어 넘어온 경우
                            for(var i=0; i<users.length; i++){
                                var uId = users[i].get('nvm_id');
                                var uName = users[i].get('nvm_name');
                                var uLevel = users[i].get('nvm_level');
                                var uPhoto = users[i].get('nvm_file');
                                me.addReciever(msgWin.down('#selectedCon'), uId, uName, uLevel, uPhoto);
                            }
                        }
                        else if(isSendDoc){//Viewer의 내용을 함께 보내는 경우
                            //                     msgWin.down('#viewerContent').setHidden(false);
                            msgTypeCon.setHidden(false);
                            msgWin.down('#isEditable').setHidden(false);

                            ///////////////////////////////////////////
                            // Container for copied form from viewer //
                            ///////////////////////////////////////////
                            var previewDoc =             {
                                xtype:'container',
                                width:'100%',
                                padding:'10 0 10 0',
                                itemId:'viewerContent',
                                html:viewer.el.dom.innerHTML,
                                style:'border:1px solid #cecece'
                            };
                            msgWin.add(previewDoc);

                            /////////////////////////////////////////
                            // Address book and recently sent list //
                            /////////////////////////////////////////
                            var addrBook = {//button for get address
                                xtype:'container',
                                width:'100%',
                                layout:{
                                    type:'hbox',
                                    align:'left'
                                },
                                items:[
                                    {
                                        xtype:'container',
                                        layout:{
                                            type:'hbox'
                                        },
                                        width:'100%',
                                        items:[
                                            {//button for selecting reciever
                                                xtype: 'button',
                                                itemId: 'btnAddrBook',
                                                glyph: 'xf02d@FontAwesome',
                                                text:loc.message.selectReciever,
                                                tooltip:loc.message.selectReciever,
                                                handler:function(button){
                                                    getController('Work').selectMember(cId, 'message');
                                                }
                                            },
                                            {//list container for users who has been sent
                                                xtype:'container',
                                                flex:1,
                                                layout:{
                                                    type:'column'
                                                },
                                                itemId:'recentList',
                                                width:'100%',
                                                margin:'0 0 0 10',
                                                text:loc.member.sentRecent,
                                                listeners:{
                                                    render:function(component){
                                                        localforage.getItem('recentReciever', function(err, value){
                                                            if(value) me.addRecentList(component, value);
                                                        });
                                                    }
                                                }
                                            }
                                        ]

                                    },
                                    {//selected reciever list
                                        xtype:'container',
                                        itemId:'sentList',
                                        flex:1,
                                        style:'border 1px solid #cecece'
                                    }
                                ]
                            };
                            ////////////////////////////////////////////////////
                            // radio group for normal, confirmation, approval //
                            ////////////////////////////////////////////////////
                            var rg = {
                                xtype:'radiogroup',
                                fieldLabel:loc.message.messageType,
                                itemId:'msgFor',
                                labelWidth:80,
                                layout:{
                                    type:'hbox',
                                    align:'left'
                                },
                                width:'100%',
                                vertical:false,
                                items:[
                                    {
                                        boxLabel:loc.message.normal,
                                        name:'rb',
                                        inputValue:100
                                    },
                                    {
                                        boxLabel:loc.message.confirmation,
                                        name:'rb',
                                        margin:'0 0 0 10',
                                        inputValue:101
                                    },
                                    {
                                        boxLabel:loc.message.agreement,
                                        name:'rb',
                                        margin:'0 0 0 10',
                                        inputValue:102
                                    },
                                    {
                                        boxLabel:loc.message.approvalRequest,
                                        name:'rb',
                                        margin:'0 0 0 10',
                                        hidden:hideMessageType,
                                        inputValue:103
                                    }
                                ],
                                listeners:{
                                    change:function(rg, newValue , oldValue , eOpts ){
                                        var fdSubject = rg.up('window').down('#title');
                                        var value = {
                                            100:'',
                                            101:'['+loc.message.confirmation+'] ',
                                            102:'['+loc.message.agreement+'] ',
                                            103:'['+loc.message.approvalRequest+'] '
                                        };
                                        var classify = value[newValue.rb];
                                        if(activeTab.type != 'schedule'){
                                            fdSubject.setValue(classify+selected[0].get('bd_subject'));
                                        }
                                        else{
                                            fdSubject.setValue('['+classify+']' +activeTab.getTitle());
                                        }
                                        msgWin.msgType = newValue.rb;
                                    }
                                }
                            };
                            msgTypeCon.add(addrBook);
                            msgWin.insert(2, rg);
                        }
                        else{//in case the meassage by reply
                            me.addReciever(msgWin.down('#selectedCon'), users.getAttribute('senderId'), users.getAttribute('senderName'));
                        }
                    }
                }
            }).show();
        }
        else{
            if(Array.isArray(users)){//멤버목록에서 대상이 선택 되어 넘어온 경우
                for(var i=0; i<users.length; i++){
                    var uId = users[i].get('nvm_id');
                    var uName = users[i].get('nvm_name');
                    var uLevel = users[i].get('nvm_level');
                    var uPhoto = users[i].get('nvm_file');
                    me.addReciever(messageWin.down('#selectedCon'), uId, uName, uLevel, uPhoto);
                }
            }
        }
    },

    addRecentList: function(target, list) {
        var me = this;
        if(!list) return;
        var uStore = Ext.getStore('UserStore');
        if(uStore.getCount() === 0){
            uStore.getProxy().setUrl(domain + '/json/member');
            uStore.on('load', function onStoreLoad(){
                uStore.un('load', onStoreLoad);
                me.setRecentList(target, list);
            });
            uStore.load();
        }
        else{
            me.setRecentList(target, list);
        }
    },

    setRecentList: function(target, list) {
        var me = this;
        var store = Ext.getStore('UserStore');
        var html = '<sapn style="color:#7792A9">'+loc.message.sentRecent+'</span>&nbsp;&nbsp;&nbsp;';
        html    += '<i id="deleteRecentReciever" class="fa fa-trash-o" aria-hidden="true" style="cursor:pointer" title="'+loc.menu.clear+'"></i>';
        target.add({
            xtype:'component',
            html:html,
            width:'100%',
            style:'cursor:default;margin-bottom:6px',
            listeners:{
                afterrender:function(){
                    var btn = Ext.get('deleteRecentReciever');
                    btn.el.on('click', function(){
                        localforage.removeItem('recentReciever');
                        target.removeAll();
                    });
                }
            }

        });

        for(var i=0; i<list.length; i++){
            var rec = store.findRecord('nvm_id', list[i].nvm_id);
            var hasPerm = false;

            var hasPerm = getController('Main').hasUserPermission('list', list[i].nvm_level);
            if(!list[i].nvm_file) list[i].nvm_file = 'resources/images/ico_no_userpic.gif';
            var bc = (hasPerm)? '#cecece' : '#f9c5c5';
            var csr = (hasPerm)? 'pointer' : 'default';
            var fc = (hasPerm)? 'black' : '#f9c5c5';
            target.add({
                xtype:'label',
                style:'border:1px solid '+bc+';border-radius:4px;cursor:'+csr+';padding:2px;color:'+ fc,
                margin:'0 5 0 0',
                hasPerm:hasPerm,
                text:list[i].nvm_name,
                userId:list[i].nvm_id,
                userLevel:list[i].nvm_level,
                userPhoto:list[i].nvm_file,
                listeners:{
                    render:function(tag){
                        tag.el.dom.setAttribute('title', tag.userId);
                        tag.el.on('click', function(e){
                            var comp = Ext.get(e.target).component;
                            if(comp.hasPerm){
                                var msgWin = comp.up('window');
                                me.addReciever(msgWin.down('#selectedCon'), comp.userId, comp.text, comp.userLevel, comp.userPhoto);
                            }
                            else{
                                Ext.Msg.alert('', loc.message.unAvailableUser);
                            }
                        });
                    }
                }
            });
        }
    },

    addReciever: function(target, uId, uName, uLevel, uFile) {
        if(target.down('#recent_' + uId) !== null) return;
        var unit = Ext.create(appName + '.view.DeletableUnit', {
            userId:uId,
            userName:uName,
            userLevel:uLevel,
            userPhoto:uFile,
            margin:'0 5 5 0'
        });

        unit.addContent({
            xtype:'label',
            text:uName,
            itemId:'recent_' + uId
        });
        target.add(unit);
    },

    /* When click one of button recieve message or send message */
    viewMessage: function(inOut, type) {
        var mainCtr = getController('Main');
        var me = this;
        var msgGrid, msgStore, msgId, msgTitle, msgTarget, targetName, photo, targetId, docIdx;
        if(inOut == 'in'){
            if(type == 'doc'){//in case of including document
                msgGrid = Ext.getCmp('documentInGrid');
                msgStore = Ext.getStore('MessageInStore');
                msgId = 'documentInGrid';
                msgTitle = loc.message.documentIn;
            }
            else{
                msgGrid = Ext.getCmp('messageInGrid');
                msgStore = Ext.getStore('MessageInStore');
                msgId = 'messageInGrid';
                msgTitle = loc.message.messageIn;
            }
            msgTarget = loc.message.sender;
            targetName = 'send_name';
            targetId = 'send_id';
            photo = 'send_photo';
        }
        else if(inOut == 'out'){
            if(type == 'doc'){//in case of including documet
                msgGrid = Ext.getCmp('documentOutGrid');
                msgStore = Ext.getStore('MessageOutStore');
                msgId = 'documentOutGrid';
                msgTitle = loc.message.documentOut;
            }
            else{
                msgGrid = Ext.getCmp('messageOutGrid');
                msgStore = Ext.getStore('MessageOutStore');
                msgId = 'messageOutGrid';
                msgTitle = loc.message.messageOut;
            }
            msgTarget = loc.message.reciever;
            targetName = 'recv_name';
            targetId = 'recv_id';
            photo = 'recv_list';
        }
        else{
            alert('The prameter must be given whether it is in or out');
        }
        docIdx = loc.message.docIndex;


        var parameter = {};
        /* like 검색, 1로 검색하면 100~199까지, 10으로 검색하면 10~109 */
        if(type == 'doc'){
            parameter.message_type = 1;
        }
        else{
            parameter.message_type = 0;
        }
        //change parameter by document or message
        msgStore.getProxy().setExtraParams(parameter);

        if(msgGrid !== undefined){//in case of grid alrealdy rendered
            msgGrid.getStore().load();
            mainCtr.getListTab().setActiveItem(msgGrid);
            return;
        }
        else{
            /* check if message store is totally ready */
            msgStore.on('messagestorecomplete', function onMsgStoreComplete(store){
                msgStore.un('messagestorecomplete', onMsgStoreComplete);
                if(type == 'doc'){
                    if(msgStore.findExact('isDoc', true) == -1){
                        Ext.Msg.alert('', loc.message.noMessage);
                        return;
                    }
                }
                else{
                    if(msgStore.findExact('isDoc', false) == -1){
                        Ext.Msg.alert('', loc.message.noMessage);
                        return;
                    }
                }

                var msgGrid = me.getMessageGrid(msgStore, msgTitle, msgId, photo, targetName, msgTarget, inOut, targetId);
                mainCtr.getListTab().add(msgGrid);
                mainCtr.getListTab().setActiveTab(msgGrid);

                currentPlugin = '';

                //remove panels for work mode
                if(mainCtr.getMainView().down('#workListPanel')){
                    mainCtr.getMainView().down('#workListPanel').destroy();
                    mainCtr.getMainView().down('#listTab').removeAll();
                }
                if(!mainCtr.getMainView().down('#southPanel').hidden){
                    mainCtr.getMainView().down('#southPanel').setHidden(true);
                    mainCtr.getMainView().down('#listTab').removeAll();
                }
                if(Ext.getCmp('contentCover')){
                    Ext.getCmp('contentCover').destroy();
                }

                mainCtr.getMainView().down('#centerPanel').setHidden(false);


            });
            msgStore.load();
        }

    },

    getMessageGrid: function(msgStore, title, msgId, photo, targetName, msgTarget, inOut, targetId) {
        me = this;
        var msgGrid = Ext.create('Ext.grid.Panel', {
            isMessage:true,
            title:title,
            id:msgId,
            store:msgStore,
            closable:true,
            cateOption:false,
            selModel: {
                selType: 'checkboxmodel',
                mode: 'MULTI'
            },
            columns:[
                {
                    text:loc.member.photo, dataIndex:photo, renderer:function(v){
                        var value = '';
                        var bgURL = '';
                        if(inOut == 'in'){
                            if(v === undefined) {
                                value = '<i style="color:grey" class="fa fa-user" aria-hidden="true"></i>';
                            }
                            else{
                                bgURL = 'background-image:url(\'' + v +'\')';
                                value = '<div style="width:30px;height:30px;' +bgURL+ ';background-size:cover"></div>';
                            }
                        }
                        else{
                            if(v[0].recv_photo === undefined) {
                                value = '<i style="color:grey" class="fa fa-user" aria-hidden="true"></i>';
                            }
                            else{
                                bgURL = 'background-image:url(\'' + v[0].recv_photo +'\')';
                                value = '<div style="width:30px;height:30px;' +bgURL+ ';background-size:cover"></div>';
                            }
                        }
                        return value;
                    },
                    width:60
                },
                {
                    text:msgTarget, dataIndex:targetName, width:140
                },
                {
                    text:loc.message.date, dataIndex:'send_date_time'
                },
                {
                    text:loc.message.readDate, dataIndex:'send_read_time', renderer:function(v){
                        var val = v;
                        if(inOut === 'in'){
                            if(v === null || v === undefined || v.trim() === ''){
                                val = '<i style="width:100%;text-align:center" class="fa fa-envelope-o" aria-hidden="true"></i>';
                            }
                        }
                        return val;
                    }
                },
                {
                    text:loc.message.title, dataIndex:'subject', flex:1
                }
            ],
            dockedItems: [
                {
                    xtype: 'pagingtoolbar',
                    dock: 'top',
                    displayInfo: true,
                    store:msgStore,
                    items: [
                        {
                            xtype: 'textfield',
                            itemId: 'dgSearch',
                            margin: '0 0 0 3',
                            fieldLabel: 'Label',
                            hideLabel: true
                        },
                        {
                            xtype: 'button',
                            itemId: 'findData',
                            margin: '0 6 0 6',
                            glyph: 'xf002@FontAwesome',
                            listeners: {
                                click: function(button){
                                    var value = button.up('pagingtoolbar').down('#dgSearch').getValue();
                                    msgStore.getProxy().api.read = domain+'/message/recv?search_str='+ encodeURIComponent(value);
                                    msgStore.load();
                                }
                            }
                        }
                    ]
                }
            ],
            listeners:{
                itemclick:function(dataview, record, item, index, e, eOpts){
                    if(item.id !== undefined){
                        /* in case click on unread message */
                        if(record.get('unread')){
                            Ext.get(item).el.select('.x-grid-row').elements[0].style.backgroundColor = '';
                            Ext.getStore('MessageInStore').load();
                        }
                    }
                    if(!record) return;
                    Ext.data.JsonP.request({
                        url:domain + '/message/read',
                        params:{
                            idx:record.get('idx')
                        },
                        success:function(response){
                            var vPan = Ext.getCmp('viewPanel');
                            var re = response.messageSet;
                            if(re.send_read_time === '' || re.send_read_time === null){
                                re.send_read_time = loc.message.unread;
                            }
                            var html = '';
                            var numOfReader = re.recv_list.length;
                            var numOfViewed = 0;
                            var numOfConfirm = 0;//number of confirmed, agreed or approved
                            var recList = '';
                            var isConfirmed = false;//한명이라도 confirm한 대상이 있을 경우 true
                            var cfmList = [];
                            vPan.receivers = re.recv_list;//Viewer에서 받은사람들의 확인여부를 확인하기 위해 저장, viewer에서 "docuinfocomplete" event 발생해서 다시 넘어옴
                            for(var i=0; i<numOfReader; i++){
                                if(re.recv_list[i].confirm == 1){
                                    cfmList.push(re.recv_list[i].recv_id);
                                    isConfirmed = true;
                                    numOfConfirm ++;
                                }
                                else{
                                    isConfirmed = false;
                                }
                                if(i !== 0 && i < 2){
                                    recList += ', ';
                                }
                                /* list up read or unread */
                                if(i < 2){
                                    if(re.recv_list[i].send_read_time !== '' && re.recv_list[i].send_read_time !== null){//has been read
                                        recList += '<span gidx="'+re.gidx+'" userName="'+re.recv_list[i].recv_name+'" userId="'+re.recv_list[i].recv_id+'" style="color:#5897ce;cursor:pointer" title="'+loc.message.opened+'"';
                                        recList += ' onclick="getController(\'Message\').sendMessage(this)">'+re.recv_list[i].recv_name+'</span>';
                                        numOfViewed ++;
                                    }
                                    else{//has been read
                                        recList += '<span gidx="'+re.gidx+'" userName="'+re.recv_list[i].recv_name;
                                        recList += '" userId="'+re.recv_list[i].recv_id;
                                        recList += '" style="color:red;cursor:pointer" title="'+loc.message.unread+'"';
                                        recList += ' onclick="getController(\'Message\').sendMessage(this)">'+re.recv_list[i].recv_name+'</span>';
                                    }
                                }
                            }
                            if(numOfReader > 2){
                                if(localLanguage == 'Korean'){
                                    recList += ' 외 ' + (numOfReader - 2) + '명 ';
                                }
                                else{
                                    recList += '+' + (numOfReader - 2) + ' other';
                                }
                            }

                            var confirmStatus, confirmLbl, confirmed, msgStyle;
                            if(re.message_type == 101){
                                confirmLbl = loc.message.statusConfirm;
                                confirmStatus = loc.message.didConfirm;
                                confirmed = loc.message.checkConfirm;
                                msgStyle = loc.message.confirm;
                            }
                            if(re.message_type == 102){
                                confirmLbl = loc.message.statusAgree;
                                confirmStatus = loc.message.didAgree;
                                confirmed = loc.message.checkAgree;
                                msgStyle = loc.message.agree;
                            }
                            if(re.message_type == 103){
                                confirmLbl = loc.message.statusApproval;
                                confirmStatus = loc.message.didApproval;
                                confirmed = loc.message.checkApproval;
                                msgStyle = loc.message.approval;
                            }

                            /* message_type 100:normal, 101:confirm, 102:agreement,  103:approval*/
                            /* show at top of viewer */
                            recList += ' ('+numOfViewed+'/'+numOfReader+' '+loc.message.opened;
                            if(re.message_type !== 100){//확인 사항 없는 문서전송일 경우(승인됩, 결재됨 등)
                                //결재요구 문서일 경우에는 main controller의 viewDocument에서 .numOfConfirm 클래스로 찾아 다시 업데이트 됨
                                recList += ', <span class="numOfConfirm">'+numOfConfirm+'/'+numOfReader+' '+confirmed+'</span>)';
                            }
                            ///////////////////////////////////////////////////////////////
                            // icon for show seen, read, agree or approval status window //
                            ///////////////////////////////////////////////////////////////
                            recList += ' <i id="showReceiverInfo" class="fa fa-external-link" aria-hidden="true" style="cursor:pointer" label="'+msgStyle+'"></i>';
                            if(re.message_type > 99 && re.message_type < 104){//in case sending a document
                                vPan.on('docuinfocomplete', function onDocuInfoComplete(receivers){
                                    vPan.un('docuinfocomplete', onDocuInfoComplete);
                                    Ext.get('showReceiverInfo').on('click', function(e){
                                        me.showReceiverInfo(receivers, e.target.getAttribute('label'));
                                    });
                                });
                                var editIco = Ext.get('icoEditable');
                                var msgOpt = eval('(' + re.message_option + ')');
                                html += '<div style="width:100%; padding:10px;" class="msgDocStatus">';
                                html += '	<table cellspacing="0" cellpadding="0" border="1" style="width:100%;background-color:white;';
                                html += '	font-size:12px;border-collapse:collapse;border:1px solid #cecece;border-color:#cecece">';
                                html +=	'		<tr>';
                                html +=	'			<td colspan="2" style="padding:3px 5px 3px 5px;font-size:14px;font-weight:600;color:white;background-color:black">';
                                html += 			msgOpt.categoryName + ' - ' + re.subject+'</td>';
                                html +=	'		</tr>';
                                if(response.viewType == 'recv'){//받은 문서함 보기 일경우 보낸사람 표시
                                    if(msgOpt.isEditable){
                                        editIco.show();
                                    }
                                    else{
                                        editIco.hide();
                                    }
                                    html +=	'		<tr>';
                                    html +=	'			<td colspan="2" style="padding:3px 5px 3px 5px;">';
                                    html +=	'				<div><span style="font-weight:600">'+loc.message.sender+'</span> :' +re.send_name+'</div>';
                                    html += 			'</td>';
                                    html +=	'		</tr>';
                                }
                                else{
                                    editIco.hide();
                                }
                                html +=	'		<tr>';
                                html +=	'			<td style="padding:3px 5px 3px 5px">';
                                if(re.bd_idx){
                                    html +=	'				<div><span style="font-weight:600">'+loc.message.docIndex+'</span> :' + re.bd_idx + '-' +re.gidx+'</div>';
                                }
                                else{
                                    html +=	'				<div><span style="font-weight:600">'+loc.message.docIndex+'</span> :' +re.idx+'</div>';
                                }
                                html +=					'</div>';
                                html += '			</td>';
                                html +=	'			<td style="padding:3px 5px 3px 5px">';
                                html += '				<div><span style="font-weight:600">'+loc.message.date+'</span> :' +re.send_date_time+'</div>';
                                html += '			</td>';
                                html +=	'		</tr>';
                                html +=	'		<tr>';
                                html += '			<td colspan="2" style="padding:3px 5px 3px 5px">';
                                html += '				<span style="font-weight:600">'+loc.message.reciever+'</span> : ' + recList;
                                html += '			</td>';
                                //                         html += '			<td style="padding:3px 5px 3px 5px">';
                                //                         html +=	'				<div><span style="font-weight:600">'+loc.message.readBy+'</span> :' +numOfViewed+'/'+numOfReader+'</div>';
                                //                         html += '			</td>';
                                html +=	'		</tr>';
                                if(isConfirmed){
                                    html += '		<tr>';
                                    html += '			<td style="padding:3px 5px 3px 5px;font-weight:700">' + confirmLbl;
                                    html += '			</td>';
                                    html +=	'			<td style="padding:3px 5px 3px 5px">' + confirmStatus;
                                    html += '			</td>';
                                    html += '		</tr>';
                                }
                                if(re.content !== null && re.content !== '' && re.content !== undefined){
                                    html +=	'		<tr>';
                                    html +=	'			<td colspan="2" style="padding:3px 5px 3px 5px">'+ decodeURIComponent(re.content)+'</td>';
                                    html +=	'		</tr>';
                                }
                                html += '	</table>';
                                html += '</div>';
                                config.option = msgOpt.caOption;
                                if(re.bd_idx !== 0){
                                    if(inOut == 'in'){
                                        /* accroding to message_type make a button on top of the viewer */
                                        Ext.getCmp('viewPanel').on('add', function onVPanAdd(dv, component, index, eOpts){
                                            dv.un('add', onVPanAdd);
                                            if(re.message_type == 100) return;
                                            var value = {
                                                101:{btnTxt:loc.message.confirm, lblTxt:loc.message.needConfirm, callbackMsg:loc.message.okConfirm},
                                                102:{btnTxt:loc.message.agree, lblTxt:loc.message.needAgree, callbackMsg:loc.message.okAgree},
                                                103:{btnTxt:loc.message.approval, lblTxt:loc.message.needApproval, callbackMsg:loc.message.okApproval}
                                            };
                                            if(Ext.getCmp('viewPanel').getDockedItems().length > 0){
                                                Ext.getCmp('viewPanel').getDockedItems()[0].destroy();
                                            }
                                            //////////////////////////////////////////////////////////////
                                            // buttons container for confrimation, agree, approval .... //
                                            //////////////////////////////////////////////////////////////
                                            var topCon= {
                                                xtype:'container',
                                                padding:10,
                                                hidden:isConfirmed,
                                                style:'background-color:#ecf1f5',
                                                layout:{
                                                    type:'hbox'
                                                },
                                                items:[
                                                    {
                                                        xtype:'button',
                                                        text:value[re.message_type].btnTxt,
                                                        scale:'medium',
                                                        hidden:re.message_type == 103,
                                                        handler:function(button){
                                                            Ext.data.JsonP.request({
                                                                url:domain + '/message/confirm?idx=' + re.idx,
                                                                success:function(response){
                                                                    if(response.result){
                                                                        Ext.toast(value[re.message_type].callbackMsg);
                                                                        Ext.getCmp('viewPanel').fireEvent('confirmed', re.message_type, re.bd_idx);
                                                                        msgStore.load();
                                                                        Ext.getCmp('viewPanel').getDockedItems()[0].destroy();
                                                                        Ext.getCmp('eastPanel').setCollapsed(true);
                                                                    }
                                                                }
                                                            });
                                                        }
                                                    },
                                                    {
                                                        xtype:'label',
                                                        margin:'0 0 0 15',
                                                        itemId:'lbHowtoCheck',
                                                        html:'<i class="fa fa-exclamation" aria-hidden="true"></i> ' + value[re.message_type].lblTxt
                                                    }
                                                ]
                                            };
                                            if(cfmList.indexOf(sessionId) == -1){
                                                Ext.getCmp('viewPanel').addDocked(topCon);
                                            }
                                        });
                                    }
                                    console.info('begin viewing message');
                                    var reco= Ext.data.Record.create([
                                        {name:'ca_id'}, {name:'bd_idx'}
                                    ]);
                                    reco.set({
                                        ca_id:msgOpt.categoryId,
                                        bd_idx:re.bd_idx,
                                        html:html
                                    });
        //                             record, title, formMode, index, isRecent
                                    var formRecord = Ext.getStore('FormStore').findRecord('index', msgOpt.formIndex);
                                    var formMode = formRecord.get('formId');
                                    getController('Main').viewDocument(reco, '', formMode);
                                }
                            }
                            else{//in case sending generally
                                html =  '	<table style="width:100%;font-size:13px">';
                                html +=	'		<tr>';
                                html +=	'			<td style="border-bottom:1px solid black;font-size:20px;height:40px;font-weight:600">'+re.subject+'</td>';
                                html +=	'		</tr>';
                                html +=	'		<tr>';
                                html +=	'			<td style="border-bottom:1px solid black;height:30px">';
                                html += '				<div style="float:left;"><span style="font-weight:600">'+msgTarget+'</span> : ';
                                html += '					<span style="color:#5897ce;cursor:pointer" userName="'+re[targetName]+'" userId="'+re[targetId]+'"';
                                html += '					onclick="getController(\'Message\').sendMessage(this)">'+re[targetName]+'</span></div>';
                                html += '				<div style="float:right"><span style="font-weight:600">'+loc.message.date+'</span> :' +re.send_date_time+'</div>';
                                html += '			</td>';
                                html +=	'		</tr>';
                                html +=	'		<tr>';
                                html += '			<td style="padding:3px 5px 3px 5px">';
                                html += '				<div><span style="font-weight:600">Message ID</span> : '+re.gidx+'</div>';
                                html +=	'				<div><span style="font-weight:600">'+loc.message.readDate+'</span> :' +re.send_read_time+'</div>';
                                html += '			</td>';
                                html +=	'		</tr>';
                                if(re.content !== null && re.content !== '' && re.content !== undefined){
                                    html +=	'		<tr>';
                                    html +=	'			<td style="padding:25px 0 0 0">'+ decodeURIComponent(re.content)+'</td>';
                                    html +=	'		</tr>';
                                }
                                html += '	</table>';

                                ////////////////////////////
                                // the viewer for message //
                                ////////////////////////////
                                var mailCon = Ext.create('Ext.container.Container', {
                                    padding:20,
                                    html:html,
                                    itemId:'viewer',
                                    isMessageOnly:true//to hide header of viwer at onViewPanelAdd
                                });
                                vPan.removeAll();
                                vPan.add(mailCon);

                                Ext.getCmp('eastPanel').setWidth(490);
                                Ext.getCmp('eastPanel').expand();
                                if(Ext.getCmp('eastPanel').getCollapsed() == 'right'){
                                    eastPanel.expand();
                                }
                            }
                        }
                    });
                }
            },
            getGrid:function(){
                return msgGrid;
            }
        });
        return msgGrid;
    },

    showReceiverInfo: function(receivers, type) {
        var html = '';
        if(!type || type == 'undefined') type = '';
        html    += '<table width="100%" cellpadding="0" cellspacing="0"  border="1" style="border-collapse:collapse;border:1px solid #cecece">';
        html    += '	<tr>';
        html    += '		<th style="padding:3px">'+ loc.main.name +'</th>';
        html    += '		<th>'+ loc.message.opened +'</th>';
        html    += '		<th>'+ type +'</th>';
        html    += '	</tr>';
        for(var i=0; i<receivers.length; i++){
            var isRead = '';
            var isConfirm = '';
            if(receivers[i].send_read_time !== null && receivers[i].send_read_time !== ''){
                isRead = '<i class="fa fa-circle-thin" aria-hidden="true"></i>';
            }
            if(receivers[i].confirm == 1){
                isConfirm = '<i class="fa fa-circle-thin" aria-hidden="true"></i>';
            }
        html    += '	<tr>';
        // html    += '		<td>'+ receivers[i].recv_photo +'</td>';
        html    += '		<td style="padding:3px">'+ receivers[i].recv_name +'</td>';
        html    += '		<td style="text-align:center;padding:3px">'+ isRead +'</td>';
        html    += '		<td style="text-align:center;padding:3px">'+ isConfirm +'</td>';
        html    += '	</tr>';
        }
        html    += '</table>';

        //////////////////////////////////////////////////////////
        // window for display a message status of each reciever //
        //////////////////////////////////////////////////////////
        var win = Ext.create('Ext.window.Window', {
            width:450,
            padding:15,
            title:loc.message.reciever,
            maxHeight:windowMaxHeight,
            scrollable:true,
            items:[
                {
                    xtype:'container',
                    html:html
                }
            ]
        }).show();
    }

});
