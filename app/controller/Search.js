/*
 * File: app/controller/Search.js
 *
 * This file was generated by Sencha Architect version 4.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Actor.controller.Search', {
    extend: 'Ext.app.Controller',

    search: function(query, store, clone) {
        //Base on params define if keep the paramesters
        var me = this;
        var dataUrl = getDataListByIdApi(query);
        if(clone){
            var parentName = getController('Main').getListTab().getActiveTab().parentName;
            Ext.create('Ext.window.Window', {
                padding:20,
                width:460,
                modal:true,
                title:loc.search.searchOption,
                items:[
                    {
                        xtype: 'radiogroup',
                        // Arrange radio buttons into two columns, distributed vertically
                        columns: 2,
                        width:400,
                        items: [
                            {
                                boxLabel: '<span style="color:#ffa65f">'+loc.search.fromSourceCategory+'<br>('+parentName+')</span>',
                                name: 'rb',
                                inputValue: '1',
                                labelWidth:200,
                                style:'margin-right:25px'
                            },
                            { boxLabel: loc.search.fromEdited, name: 'rb', inputValue: '2', checked: true},
                        ]
                    },
                    {
                        xtype:'container',
                        width:'100%',
                        docked:'bottom',
                        itemId:'btnSearch',
                        items:[
                            {
                                xtype:'button',
                                text:loc.search.search,
                                width:100,
                                style:'float:right',
                                listeners:{
                                    click:function(button){
                                        var value = button.up('window').down('radiogroup').getValue();
                                        if(value.rb == 1){
                                            getController('Main').getListTab().getActiveTab().down('pagingtoolbar').clone = true;
                                            store.clone = true;
                                            query += '&c=clone';
                                            me.search(query, store);
                                        }
                                        else{//within edited data
                                            getController('Main').getListTab().getActiveTab().down('pagingtoolbar').clone = false;
                                            store.clone = false;
                                            me.search(query, store);
                                        }
                                        button.up('window').close();
                                    }
                                }
                            }
                        ]
                    }
                ],
                listeners:{
                    afterrender:function(comp){
                        comp.el.on('keyup', function(e){
                            if(e.keyCode == 13){
                                comp.down('#btnSearch').fireEvent('click', comp.down('#btnSearch'));
                            }
                        });
                    }
                }
            }).show();
            return;
        }
        if(query.indexOf('&c=clone') == -1 && store.clone) dataUrl += '&c=clone';
        store.getProxy().setUrl(dataUrl);
        store.load();


    },

    openSearchWindow: function(cId, store, title, clone) {
        var me = this;
        var dtFormat = (localLanguage == 'Korean')? 'Y-m-d' : 'm-d-Y';
        if(!title){
            title = getController('Main').getListTab().getActiveTab().getTitle();
        }
        var isWork = false;
        var workPan = Ext.getCmp('workListPanel');
        if(Ext.getCmp('workListPanel')){
            isWork = true;
        }
        var win = Ext.create('Ext.window.Window', {
            layout:{
                type:'vbox',
                align:'stretch'
            },
            title:loc.search.detailSearch + '-' + title,
            ghost:false,
            modal:true,
            width:490,
            padding:5,
            tools: [
                {
                    xtype: 'tool',
                    itemId: 'refresh',
                    tooltipType: 'title',
                    type: 'refresh',
                    bind: {
                        tooltip: '{refresh}'
                    },
                    listeners: {
                        click: function(){
                            win.down('#fdSubject').setValue('');
                            win.down('#fdContent').setValue('');
                            win.down('#sDate').setValue(null);
                            win.down('#eDate').setValue(null);
                            win.down('#fdMonth').setValue('');
                            win.down('#fdYear').setValue('');
                        }
                    }
                }
            ],
            bodyStyle:'padding:15px',
            items:[
                {
                    xtype:'checkbox',
                    fieldLabel:loc.search.searchAll,
                    itemId:'btnByAll',
                    listeners:{
                        change:function(check){
                            if(check.getValue()){
                                check.up('window').down('#fdSubject').setFieldLabel(loc.main.title);
                                check.up('window').down('#fdContent').setFieldLabel(loc.main.contentTitle);
                            }
                            else{
                                check.up('window').down('#fdContent').setFieldLabel(loc.main.description);
                            }
                        }
                    }
                },
                {
                    /* by keyword */
                    xtype:'textfield',
                    itemId: 'fdKeyword',
                    labelAlign:'top',
                    fieldLabel:loc.search.byKeyword,
                    cls:'requestform-space'
                },
                {
                    /* by subject */
                    xtype:'textfield',
                    itemId: 'fdSubject',
                    labelAlign:'top',
                    fieldLabel:getController('Main').getListTab().getActiveTab().subjectTitle,
                    cls:'requestform-space'
                },
                {
                    /* by content */
                    xtype:'textfield',
                    itemId: 'fdContent',
                    labelAlign:'top',
                    fieldLabel:loc.main.description,
                    cls:'requestform-space'
                },
                {
                    /* registed data label */
                    xtype:'label',
                    text:loc.main.regDate,
                    cls: 'x-form-item-label-default'
                },
                {
                    /* date range */
                    xtype:'container',
                    layout:'hbox',
                    cls:'requestform-space',
                    style:'border:1px solid #ccd0d5',
                    padding:10,
                    items:[
                        {
                            /* date search label */
                            xtype:'label',
                            text:loc.search.from,
                            cls: 'x-form-item-label-default'
                        },
                        {
                            /* search label 'from' */
                            xtype:'datefield',
                            itemId:'sDate',
                            submitFormat:dtFormat
                        },
                        {
                            xtype:'tbspacer',
                            flex:1
                        },
                        {
                            /* date search label */
                            xtype:'label',
                            text:loc.search.to,
                            cls: 'x-form-item-label-default'
                        },
                        {
                            /* search label 'to' */
                            xtype:'datefield',
                            itemId:'eDate',
                            submitFormat:dtFormat
                        }
                    ]
                },
                {
                    /* search monthly label */
                    xtype:'label',
                    text:loc.search.monthly,
                    cls: 'x-form-item-label-default'
                },
                {
                    /* monthly combos */
                    xtype:'container',
                    layout:'hbox',
                    cls:'requestform-space',
                    style:'border:1px solid #ccd0d5',
                    padding:10,
                    items:[
                        {
                            /* year label */
                            xtype:'label',
                            text:loc.search.year,
                            cls: 'x-form-item-label-default'
                        },
                        /* combo for year */
                        Ext.create('Ext.form.field.ComboBox', {
                            displayField:'years',
                            itemId:'fdYear',
                            listeners:{
                                render:function(combo){
                                    var yData = [];
                                    var date = new Date();
                                    var year = date.getFullYear();
                                    for(var i=year; i> year - 5; i--){
                                        yData.push({years:i});
                                    }
                                    /* store for the first combobox */
                                    var yStore = Ext.create('Ext.data.Store', {
                                        fields:['years'],
                                        data : yData
                                    });
                                    combo.setStore(yStore);
                                    //                                                     combo.setValue(yData[0].years);
                                }
                            }
                        }),
                        {
                            xtype:'tbspacer',
                            flex:1
                        },
                        {
                            /* month label */
                            xtype:'label',
                            text:loc.search.month,
                            cls: 'x-form-item-label-default'
                        },
                        /* combo for month */
                        Ext.create('Ext.form.field.ComboBox', {
                            displayField:'months',
                            itemId:'fdMonth',
                            listeners:[
                                {
                                    render:function(combo){
                                        var mData = [];
                                        for(var i=1; i<= 12; i++){
                                            mData.push({months:i});
                                        }
                                        /* store for the first combobox */
                                        var mStore = Ext.create('Ext.data.Store', {
                                            fields:['months'],
                                            data : mData
                                        });
                                        var date = new Date();
                                        var month = date.getMonth();
                                        combo.setStore(mStore);
                                        //combo.setValue(month + 1);
                                    },
                                    select:function(combo){
                                        var fdYearVal = win.down('#fdYear').getValue();
                                        var fdMonth = win.down('#fdMonth');
                                        if(!fdYearVal){
                                            Ext.MessageBox.alert(loc.main.notice, loc.search.yearRequired);
                                            fdMonth.setValue(null);
                                        }
                                    }
                                }
                            ]
                        })
                    ]
                },
                {
                    xtype:'checkbox',
                    margin:'0 23 0 0',
                    style:'color:#7792A9',
                    itemId:'onlyMine',
                    boxLabel:loc.work.onlyMine
                },
                {
                    /* buttons container */
                    xtype:'container',
                    padding:'15 0 10 0',
                    layout:{
                        type:'hbox',
                        pack:'center'
                    },
                    items:[
                        /////////////
                        // 검색버튼 //
                        /////////////
                        {
                            xtype:'button',
                            width:100,
                            text:loc.search.search,
                            handler:function(button){
                                var byAll = button.up('window').down('#btnByAll');
                                var query = '';
                                var terms = {};
                                var numVal = 0;
                                if(win.down('#fdSubject').getValue() !== ''){
                                    query += '&se_subject=' + win.down('#fdSubject').getValue();
                                    numVal ++;
                                }
                                if(win.down('#fdContent').getValue() !== ''){
                                    query += '&se_content=' + win.down('#fdContent').getValue();
                                    numVal ++;
                                }
                                if(win.down('#fdKeyword').getValue() !== ''){
                                    query += '&se_all=' + win.down('#fdKeyword').getValue();
                                    numVal ++;
                                }
                                if(win.down('#fdYear').getValue()){
                                    var fdYVal = win.down('#fdYear').getValue();
                                    var fdMVal = win.down('#fdMonth').getValue();
                                    var ymVals;
                                    var ymVale;
                                    var lastday = 32 - new Date(fdYVal, fdMVal-1, 32).getDate();
                                    if(fdMVal && fdMVal){//년도와 월이 있는 경우 해당 월 모두 검색
                                        fdMVal = fdMVal.toString();
                                        fdYVal = fdYVal.toString();
                                        ymVals = fdYVal + '/' + '0'+ fdMVal.slice(-2) + '/01';
                                        ymVale = fdYVal + '/' + '0'+ fdMVal.slice(-2) + '/' + lastday;
                                        query += '&se_sdate=' + ymVals + '&se_edate=' + ymVale;
                                    }
                                    if(fdYVal && !fdMVal){//년도만 선택 된 경우 해당 년도 모두 검색
                                        fdYVal = fdYVal.toString();
                                        ymVals = fdYVal + '/01/01';
                                        ymVale = fdYVal + '/12/31';
                                        query += '&se_sdate=' + ymVals + '&se_edate=' + ymVale;
                                    }
                                    terms.se_sdate = ymVals;
                                    terms.se_edate = ymVals;
                                    numVal ++;
                                }
                                if(win.down('#eDate').getValue() || win.down('#sDate').getValue()){
                                    var sVal = win.down('#sDate').getValue();
                                    var eVal = win.down('#eDate').getValue();

                                    if(sVal !== null){
                                        if(localLanguage == 'Korean'){
                                            sVal = sVal.getFullYear() + '/' + ('0'+ (sVal.getMonth() + 1)).slice(-2) + '/' + ('0' + sVal.getDate()).slice(-2);
                                        }
                                        else{
                                            sVal = ('0'+ (sVal.getMonth() + 1)).slice(-2) + '/' + ('0' + sVal.getDate()).slice(-2) + '/' + sVal.getFullYear();
                                        }
                                    }
                                    else{
                                        /* searching for 1 day by datefeild that has a value */
                                        sVal = '';
                                        if(eVal){
                                            sVal = eVal;
                                        }
                                    }
                                    if(eVal !== null){
                                        if(localLanguage == 'Korean'){
                                            eVal = eVal.getFullYear() + '/' + ('0'+ (eVal.getMonth() + 1)).slice(-2) + '/' + ('0' + eVal.getDate()).slice(-2);
                                        }
                                        else{
                                            eVal = ('0'+ (eVal.getMonth() + 1)).slice(-2) + '/' + ('0' + eVal.getDate()).slice(-2) + '/' + eVal.getFullYear();
                                        }
                                    }
                                    else{
                                        eVal = '';
                                        /* searching for 1 day by datefeild that has a value */
                                        if(sVal){
                                            eVal = sVal;
                                        }
                                    }
                                    terms.se_sdate = sVal;
                                    terms.se_edate = eVal;
                                    query += '&se_sdate=' + sVal + '&se_edate=' + eVal;
                                    numVal ++;
                                }
        //                         var cVal = win.down('#color').getValue();
        //                         if(cVal !== ''){
        //                             var cArr = chroma(cVal).rgb();
        //                             query += '&rgb_r='+cArr[0]+'&rgb_r_method=intbet';
        //                             query += '&rgb_g='+cArr[1]+'&rgb_g_method=intbet';
        //                             query += '&rgb_b='+cArr[2]+'&rgb_b_method=intbet';
        //                             query += '&ca_id=' + cId;
        //                         }
                                if(win.down('#onlyMine')){
                                    var userId = userInfo.nv_id;
                                    if(win.down('#onlyMine').getValue()){
                                        numVal ++;
                                        query += '&se_user_id='+ userId;
                                    }
                                }
                                if(numVal === 0){//no input value at all
                                    Ext.toast(loc.search.noValues);
                                    return;
                                }
                                if(isWork){//in case of using work plugin
                                    if(win.down('#serchWorkContent').getValue()){
                                        /* searching within work contents */
                                        if(win.down('#outputCombo').getValue() === 0 || win.down('#outputCombo').getValue() === null){
                                            alert('업무내용을 선택 해야 합니다.');
                                        }
                                        /* open window to display the result that search by output name */
                                        else{
                                            var oCombo = win.down('#outputCombo');
                                            query += '';
                                            getController('Work').openOutputSearch('se_refer='+oCombo.getValue() + query, oCombo.rawValue);
                                            win.close();
                                        }
                                    }
                                    /* searching within work root */
                                    else{
                                        query += '&ca_id=' + workPan.categoryId;
                                        me.search(query, workPan.down('grid').getStore());
                                        win.close();
                                    }
                                }
                                /* searching common */
                                else{
                                    var targetStore;
                                    if(!byAll.getValue()){
                                        query += '&ca_id=' + cId;
                                        targetStore = store;
                                    }
                                    else{//find data through out all category
                                      targetStore =  me.searchFromAll(query).getStore();
                                    }
                                    me.search(query, targetStore, clone);
                                    win.close();
                                }
                                store.terms = terms;
                            }
                        },
                        {
                            xtype:'button',
                            width:100,
                            margin:'0 0 0 15',
                            text:loc.menu.close,
                            handler:function(button){
                                win.close();
                            }
                        }
                    ]
                }
            ],
            listeners:{
                render:function(component){
                    if(isWork){
                        var container = Ext.create('Ext.container.Container', {
                            layout:'vbox',
                            items:[
                                {
                                    xtype:'container',
                                    layout:'hbox',
                                    items:[
                                        {
                                            xtype:'radio',
                                            boxLabel:workPan.workName + '(' + workPan.teamName +') ' + loc.search.inWork,
                                            itemId:'serchWork',
                                            name:'serchWork',
                                            value:true
                                        },
                                        {
                                            xtype:'radio',
                                            margin:'0 0 0 20',
                                            boxLabel:workPan.workName + ' ' + loc.search.inWorkContent,
                                            itemId:'serchWorkContent',
                                            name:'serchWork',
                                            listeners:{
                                                change:function(radio){
                                                    var combo = radio.up('window').down('#outputCombo');
                                                    if(radio.getValue()){
                                                        combo.setHidden(false);
                                                    }
                                                    else{
                                                        combo.setHidden(true);
                                                        combo.setValue('');
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype:'combo',
                                    itemId:'outputCombo',
                                    displayField:'ca_name',
                                    valueField:'ca_id',
                                    labelAlign:'top',
                                    fieldLabel:loc.search.byOutput,
                                    labelWidth:85,
                                    hidden:true,
                                    emptyText:loc.main.emptyItem,
                                    listeners:{
                                        render:function(comp){
                                            var workPan = Ext.getCmp('workListPanel');
                                            var grid = workPan.down('grid');
                                            var fs = workPan.fieldSet;
                                            var srhStore = Ext.create('Ext.data.Store', {
                                                fields: ['ca_name','ca_id'],
                                                data: fs
                                            });
                                            comp.setStore(srhStore);
                                        }
                                    }
                                }
                            ]
                        });
                        component.insert(component.items.items.length - 1 , container);
                    }
                }
            }
        }).show();
    },

    findSimilarColor: function(cId, hex) {
        var me = this;
        var rgbs;
        if(hex){
            if(hex.charAt(0) != '#') hex = '#' + hex;
            rgbs = chroma(hex).rgb();
        }
        if(Ext.getCmp('colorFinder')) {Ext.getCmp('colorFinder').show(); return;}

        var win = Ext.create('Ext.window.Window', {
            layout:{
                type:'vbox',
                align:'stretch'
            },
            title:'Color Finder',
            ghost:false,
            modal:true,
            id:'colorFinder',
            padding:40,
            items:[
                {
                    xtype:'container',//color preview container
                    itemId:'colorBox',
                    height:50,
                    style:'background-color:#000000;cursor:pointer',
                    listeners:{
                        afterrender:function(comp){
                            if(hex) {
        //                         comp.setStyle({'background-color':hex});//if hex has value, set conlor in colorBox
                                comp.up('window').down('#searchBtn').setDisabled(false);//maker serach button enabled
                            }
                            comp.el.on('click', function(){
                                if(Ext.getCmp('colorPicker') !== undefined) return;
                                var picker = Ext.create('Ext.ux.colorpick.Selector', {
                                    value: hex,  // initial selected color
                                    listeners: {
                                        change: function (colorselector, color) {
                                            win.down('#color').setValue('#' + color);
                                        }
                                    }
                                });
                                //show color picker window
                                Ext.create('Ext.window.Window', {
                                    items:[picker],
                                    title:'Color picker',
                                    modal:true,
                                    id:'colorPicker'
                                }).show();
                            });
                        }
                    }
                },
                {
                    xtype:'container',
                    layout:'hbox',
                    items:[
                        {
                            xtype:'textfield',//input for hex value
                            itemId:'color',
                            fieldLabel:'Hex',
                            height:63,
                            width:156,
                            labelAlign:'top',
                            listeners:{
                                change:function (field){
                                    var value = field.getValue().trim();
                                    if(value.charAt(0) != '#'){
                                        value = '#' + value;
                                    }
                                    var isHex = getController('Util').isHex(value);
                                    var rawVal = value.replace('#' , '');
                                    if(rawVal.length < 6){
                                        return;
                                    }
                                    //check if number of length is over than 6
                                    if(rawVal.length > 6) value = field.setValue(value.replace(value.charAt(value.length - 1), ''));
                                    if(!isHex && rawVal !== ''){//check if hex value is valid
                                        Ext.toast(loc.error.unknwonColor + ' "' + value + '"');
                                        field.focus();
                                        return;
                                    }

                                    var rgbs = chroma(value).rgb();
                                    var fr = field.up('window').down('#colorR');
                                    var fg = field.up('window').down('#colorG');
                                    var fb = field.up('window').down('#colorB');
                                    fr.setValue(rgbs[0]);
                                    fg.setValue(rgbs[1]);
                                    fb.setValue(rgbs[2]);
                                    field.up('window').down('#colorBox').setStyle('background-color', value);
                                    field.up('window').down('#searchBtn').setDisabled(false);
                                },
                                afterrender:function(field){
                                    if(hex) field.setValue(hex);
                                }
                            }
                        },
                        {
                            xtype:'numberfield',//range of searching tollerance
                            itemId:'range',
                            fieldLabel:'Range',
                            width:75,
                            maxValue:50,
                            minValue:0,
                            margin:'0 0 0 10',
                            labelAlign:'top',
                            value:25
                        }
                    ]
                },
                {
                    xtype:'container',
                    layout:'hbox',
                    items:[
                        {
                            xtype:'numberfield',//input Red
                            itemId:'colorR',
                            fieldLabel:'R',
                            width:80,
                            labelAlign:'top',
                            maxValue:255,
                            minValue:0,
                            listeners:{
                                blur:function(field){
                                    var rVal = field.getValue();
                                    var gVal = field.up('container').down('#colorG').getValue();
                                    var bVal = field.up('container').down('#colorB').getValue();
                                    if(rVal !== null && gVal !== null & bVal !== null ){
                                        var hex = chroma([rVal, gVal, bVal]);
                                        field.up('window').down('#color').setValue(hex);
                                        field.up('window').down('#colorBox').setStyle('background-color', hex);
                                        field.up('window').down('#searchBtn').setDisabled(false);
                                    }

                                }
                            }
                        },
                        {
                            xtype:'numberfield',//input Green
                            itemId:'colorG',
                            fieldLabel:'G',
                            width:80,
                            labelAlign:'top',
                            maxValue:255,
                            minValue:0,
                            listeners:{
                                blur:function(field){
                                    var gVal = field.getValue();
                                    var rVal = field.up('container').down('#colorR').getValue();
                                    var bVal = field.up('container').down('#colorB').getValue();
                                    if(rVal !== null && gVal !== null & bVal !== null ){
                                        var hex = chroma([rVal, gVal, bVal]);
                                        field.up('window').down('#color').setValue(hex);
                                        field.up('window').down('#colorBox').setStyle('background-color', hex);
                                        field.up('window').down('#searchBtn').setDisabled(false);
                                    }

                                },
                                render:function(field){

                                }
                            }
                        },
                        {
                            xtype:'numberfield',//input Blue
                            itemId:'colorB',
                            fieldLabel:'B',
                            width:80,
                            labelAlign:'top',
                            maxValue:255,
                            minValue:0,
                            listeners:{
                                blur:function(field){
                                    var bVal = field.getValue();
                                    var gVal = field.up('container').down('#colorG').getValue();
                                    var rVal = field.up('container').down('#colorR').getValue();
                                    if(rVal !== null && gVal !== null & bVal !== null ){
                                        var hex = chroma([rVal, gVal, bVal]);
                                        field.up('window').down('#color').setValue(hex);
                                        field.up('window').down('#colorBox').setStyle('background-color', hex);
                                        field.up('window').down('#searchBtn').setDisabled(false);
                                    }

                                }
                            }
                        }
                    ]

                },
                /////////////
                // 검색버튼 //
                /////////////
                {
                    xtype:'container',
                    layout:{
                        type:'hbox',
                        pack:'center'
                    },
                    padding:'25, 0 0 0',
                    items:[
                        {
                            xtype:'button',//Search button
                            text:loc.search.search,
                            width:115,
                            disabled:true,
                            itemId:'searchBtn',
                            listeners:{
                                click:function(btn){
                                    var cId = getController('Main').getListTab().getActiveTab().categoryId;
                                    var store = Ext.getStore('dStore_' + cId);
                                    var cVal = btn.up('window').down('#color').getValue();
                                    var cArr = chroma(cVal.trim()).rgb();
                                    var ranVal = btn.up('window').down('#range').getValue();
                                    var query = 'rgb_r='+cArr[0]+'&rgb_r_method=intbet:' + ranVal;
                                    query += '&rgb_g='+cArr[1]+'&rgb_g_method=intbet:' + ranVal;
                                    query += '&rgb_b='+cArr[2]+'&rgb_b_method=intbet:' + ranVal;
                                    query += '&ca_id=' + cId;
                                    me.search(query, store);
                                }
                            }
                        },
                        {
                            xtype:'tbspacer',
                            width:10
                        },
                        {
                            xtype:'button',//close button
                            text:loc.menu.close,
                            width:115,
                            handler:function(button){
                                win.close();
                            }
                        }
                    ]
                }
            ]

        }).show();
    },

    getSearchIdx: function(value) {
        value = value.toString();
        if(value.length == 1){
            value = '000' + value;
        }
        if(value.length == 2){
            value = '00' + value;
        }
        if(value.length == 3){
            value = '0' + value;
        }

        return value;
    },

    searchFromAll: function(query) {
        var cTree = Ext.getCmp('categoryTree');

        //get list through all data by a value
        targetStore = Ext.create('Ext.data.Store', {
            fields: [],
            pageSize:30,
            proxy: {
                type: 'jsonp',
                url:getDataListByIdApi(query, true),
                limitParam:'page_size',
                reader: {
                    type: 'json',
                    rootProperty: 'binderList',
                    totalProperty: 'page.totCount'
                }

            },
            listeners:{
                load:function(sr){
                    if(sr.getCount() === 0){
                        Ext.toast('검색된 결과가 없습니다.');
                    }
                }
            }
        });
        var grid = Ext.create('Ext.grid.Panel', {
            store: targetStore,
            columns: [
                { text: loc.search.categoryName, dataIndex: 'ca_name'},
                { text: loc.member.title, dataIndex: 'bd_subject' },
                { text: loc.search.date, dataIndex: 'bd_regdate' },
                { text: loc.main.description, dataIndex: 'bd_content', flex:1 }
            ],
            height: 200,
            width: 400,
            listeners:{
                itemclick:function(tree, record, item, index, e, eOpts){
                    var cId = record.get('ca_id');
                    var formMode = defaultFormName;
                    //View the details at viewer when click list
                    getController('Main').viewDocument(record, record.get('bd_subject'), formMode);
                }
            }
        });

        var srhWin = Ext.create('Ext.window.Window', {
            padding:10,
            width:720,
            title:loc.search.searchResult,
            id:'searchByAll',
            layout:'fit',
            items:[
                grid
            ],
            bbar:{
                xtype:'pagingtoolbar',
                store:targetStore
            },
            listeners:{
                close:function(win){
                    var ctrl = getController('Main');
                    var mainViewController = ctrl.getMainView().getController();
                    /* restore last content of viewer */
                    var selectedTab = mainViewController.getActiveTab();
                    var selected = mainViewController.getSelected();
                    var record = selected[0];
                    if(!sessionId){
                        alert(loc.error.noSession);
                        return;
                    }
                    //view previous details after close the search window
                    ctrl.viewDocument(record, selectedTab.title, selectedTab.formMode, win.lastIndex);
                }
            }
        }).show();
        return grid;
    }

});
